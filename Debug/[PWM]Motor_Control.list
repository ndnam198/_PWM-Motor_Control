
[PWM]Motor_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ab8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  08005bc4  08005bc4  00015bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006108  08006108  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006108  08006108  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006108  08006108  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006108  08006108  00016108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800610c  0800610c  0001610c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000078  08006188  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08006188  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128ce  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003534  00000000  00000000  0003296f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001120  00000000  00000000  00035ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f80  00000000  00000000  00036fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000186d5  00000000  00000000  00037f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014210  00000000  00000000  0005061d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007bca3  00000000  00000000  0006482d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e04d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b50  00000000  00000000  000e054c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08005bac 	.word	0x08005bac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08005bac 	.word	0x08005bac

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <MX_ADC1_Init+0xb4>)
 8000666:	4a29      	ldr	r2, [pc, #164]	; (800070c <MX_ADC1_Init+0xb8>)
 8000668:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800066a:	4b27      	ldr	r3, [pc, #156]	; (8000708 <MX_ADC1_Init+0xb4>)
 800066c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000670:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000672:	4b25      	ldr	r3, [pc, #148]	; (8000708 <MX_ADC1_Init+0xb4>)
 8000674:	2201      	movs	r2, #1
 8000676:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000678:	4b23      	ldr	r3, [pc, #140]	; (8000708 <MX_ADC1_Init+0xb4>)
 800067a:	2200      	movs	r2, #0
 800067c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067e:	4b22      	ldr	r3, [pc, #136]	; (8000708 <MX_ADC1_Init+0xb4>)
 8000680:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000684:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <MX_ADC1_Init+0xb4>)
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <MX_ADC1_Init+0xb4>)
 800068e:	2203      	movs	r2, #3
 8000690:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000692:	481d      	ldr	r0, [pc, #116]	; (8000708 <MX_ADC1_Init+0xb4>)
 8000694:	f001 f9e0 	bl	8001a58 <HAL_ADC_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800069e:	f000 fc27 	bl	8000ef0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80006aa:	2307      	movs	r3, #7
 80006ac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	4815      	ldr	r0, [pc, #84]	; (8000708 <MX_ADC1_Init+0xb4>)
 80006b4:	f001 fba2 	bl	8001dfc <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006be:	f000 fc17 	bl	8000ef0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006c2:	2310      	movs	r3, #16
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80006ca:	2302      	movs	r3, #2
 80006cc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	4619      	mov	r1, r3
 80006d2:	480d      	ldr	r0, [pc, #52]	; (8000708 <MX_ADC1_Init+0xb4>)
 80006d4:	f001 fb92 	bl	8001dfc <HAL_ADC_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006de:	f000 fc07 	bl	8000ef0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80006e2:	2311      	movs	r3, #17
 80006e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e6:	2303      	movs	r3, #3
 80006e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	4619      	mov	r1, r3
 80006ee:	4806      	ldr	r0, [pc, #24]	; (8000708 <MX_ADC1_Init+0xb4>)
 80006f0:	f001 fb84 	bl	8001dfc <HAL_ADC_ConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80006fa:	f000 fbf9 	bl	8000ef0 <Error_Handler>
  }

}
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200000ac 	.word	0x200000ac
 800070c:	40012400 	.word	0x40012400

08000710 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a28      	ldr	r2, [pc, #160]	; (80007cc <HAL_ADC_MspInit+0xbc>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d149      	bne.n	80007c4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000730:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <HAL_ADC_MspInit+0xc0>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a26      	ldr	r2, [pc, #152]	; (80007d0 <HAL_ADC_MspInit+0xc0>)
 8000736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <HAL_ADC_MspInit+0xc0>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <HAL_ADC_MspInit+0xc0>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a20      	ldr	r2, [pc, #128]	; (80007d0 <HAL_ADC_MspInit+0xc0>)
 800074e:	f043 0304 	orr.w	r3, r3, #4
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <HAL_ADC_MspInit+0xc0>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f003 0304 	and.w	r3, r3, #4
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000760:	2301      	movs	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000764:	2303      	movs	r3, #3
 8000766:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	4819      	ldr	r0, [pc, #100]	; (80007d4 <HAL_ADC_MspInit+0xc4>)
 8000770:	f002 f980 	bl	8002a74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <HAL_ADC_MspInit+0xc8>)
 8000776:	4a19      	ldr	r2, [pc, #100]	; (80007dc <HAL_ADC_MspInit+0xcc>)
 8000778:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <HAL_ADC_MspInit+0xc8>)
 800077c:	2200      	movs	r2, #0
 800077e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <HAL_ADC_MspInit+0xc8>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_ADC_MspInit+0xc8>)
 8000788:	2280      	movs	r2, #128	; 0x80
 800078a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_ADC_MspInit+0xc8>)
 800078e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000792:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <HAL_ADC_MspInit+0xc8>)
 8000796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800079a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <HAL_ADC_MspInit+0xc8>)
 800079e:	2220      	movs	r2, #32
 80007a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <HAL_ADC_MspInit+0xc8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <HAL_ADC_MspInit+0xc8>)
 80007aa:	f001 fdf1 	bl	8002390 <HAL_DMA_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80007b4:	f000 fb9c 	bl	8000ef0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <HAL_ADC_MspInit+0xc8>)
 80007bc:	621a      	str	r2, [r3, #32]
 80007be:	4a06      	ldr	r2, [pc, #24]	; (80007d8 <HAL_ADC_MspInit+0xc8>)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007c4:	bf00      	nop
 80007c6:	3720      	adds	r7, #32
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40012400 	.word	0x40012400
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010800 	.word	0x40010800
 80007d8:	200000dc 	.word	0x200000dc
 80007dc:	40020008 	.word	0x40020008

080007e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_DMA_Init+0x38>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <MX_DMA_Init+0x38>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_DMA_Init+0x38>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	200b      	movs	r0, #11
 8000804:	f001 fd99 	bl	800233a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000808:	200b      	movs	r0, #11
 800080a:	f001 fdb2 	bl	8002372 <HAL_NVIC_EnableIRQ>

}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000

0800081c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000830:	4b42      	ldr	r3, [pc, #264]	; (800093c <MX_GPIO_Init+0x120>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a41      	ldr	r2, [pc, #260]	; (800093c <MX_GPIO_Init+0x120>)
 8000836:	f043 0310 	orr.w	r3, r3, #16
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b3f      	ldr	r3, [pc, #252]	; (800093c <MX_GPIO_Init+0x120>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0310 	and.w	r3, r3, #16
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000848:	4b3c      	ldr	r3, [pc, #240]	; (800093c <MX_GPIO_Init+0x120>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a3b      	ldr	r2, [pc, #236]	; (800093c <MX_GPIO_Init+0x120>)
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b39      	ldr	r3, [pc, #228]	; (800093c <MX_GPIO_Init+0x120>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b36      	ldr	r3, [pc, #216]	; (800093c <MX_GPIO_Init+0x120>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a35      	ldr	r2, [pc, #212]	; (800093c <MX_GPIO_Init+0x120>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b33      	ldr	r3, [pc, #204]	; (800093c <MX_GPIO_Init+0x120>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000878:	4b30      	ldr	r3, [pc, #192]	; (800093c <MX_GPIO_Init+0x120>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a2f      	ldr	r2, [pc, #188]	; (800093c <MX_GPIO_Init+0x120>)
 800087e:	f043 0308 	orr.w	r3, r3, #8
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b2d      	ldr	r3, [pc, #180]	; (800093c <MX_GPIO_Init+0x120>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0308 	and.w	r3, r3, #8
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L298N_RELAY_CONTROL_GPIO_Port, L298N_RELAY_CONTROL_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000896:	482a      	ldr	r0, [pc, #168]	; (8000940 <MX_GPIO_Init+0x124>)
 8000898:	f002 fa5d 	bl	8002d56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_DEBUG_Pin|RELAY_CONTROL_PIN_Pin|INT4_NO_PWM_MOTOR_2_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80008a2:	4828      	ldr	r0, [pc, #160]	; (8000944 <MX_GPIO_Init+0x128>)
 80008a4:	f002 fa57 	bl	8002d56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INT2_NO_PWM_MOTOR_1_GPIO_Port, INT2_NO_PWM_MOTOR_1_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2180      	movs	r1, #128	; 0x80
 80008ac:	4826      	ldr	r0, [pc, #152]	; (8000948 <MX_GPIO_Init+0x12c>)
 80008ae:	f002 fa52 	bl	8002d56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L298N_RELAY_CONTROL_Pin;
 80008b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L298N_RELAY_CONTROL_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	481d      	ldr	r0, [pc, #116]	; (8000940 <MX_GPIO_Init+0x124>)
 80008cc:	f002 f8d2 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BT_UP_Pin|BT_CENTER_Pin|BT_DOWN_Pin;
 80008d0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80008d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_GPIO_Init+0x130>)
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008da:	2301      	movs	r3, #1
 80008dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	4619      	mov	r1, r3
 80008e4:	4817      	ldr	r0, [pc, #92]	; (8000944 <MX_GPIO_Init+0x128>)
 80008e6:	f002 f8c5 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin|RELAY_CONTROL_PIN_Pin|INT4_NO_PWM_MOTOR_2_Pin;
 80008ea:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80008ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2302      	movs	r3, #2
 80008fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	4619      	mov	r1, r3
 8000902:	4810      	ldr	r0, [pc, #64]	; (8000944 <MX_GPIO_Init+0x128>)
 8000904:	f002 f8b6 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT2_NO_PWM_MOTOR_1_Pin;
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2302      	movs	r3, #2
 8000916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT2_NO_PWM_MOTOR_1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4619      	mov	r1, r3
 800091e:	480a      	ldr	r0, [pc, #40]	; (8000948 <MX_GPIO_Init+0x12c>)
 8000920:	f002 f8a8 	bl	8002a74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2103      	movs	r1, #3
 8000928:	2017      	movs	r0, #23
 800092a:	f001 fd06 	bl	800233a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800092e:	2017      	movs	r0, #23
 8000930:	f001 fd1f 	bl	8002372 <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	3720      	adds	r7, #32
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	40011000 	.word	0x40011000
 8000944:	40010800 	.word	0x40010800
 8000948:	40010c00 	.word	0x40010c00
 800094c:	10210000 	.word	0x10210000

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000954:	f001 f82c 	bl	80019b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000958:	f000 f8d0 	bl	8000afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095c:	f7ff ff5e 	bl	800081c <MX_GPIO_Init>
  MX_DMA_Init();
 8000960:	f7ff ff3e 	bl	80007e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000964:	f000 ff8a 	bl	800187c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000968:	f000 fe16 	bl	8001598 <MX_TIM3_Init>
  MX_TIM4_Init();
 800096c:	f000 fe8a 	bl	8001684 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000970:	f7ff fe70 	bl	8000654 <MX_ADC1_Init>
  //  MX_RTC_Init
  /* USER CODE BEGIN 2 */
  vIWDG_Init(&hiwdg, 5000);
 8000974:	f241 3188 	movw	r1, #5000	; 0x1388
 8000978:	484b      	ldr	r0, [pc, #300]	; (8000aa8 <main+0x158>)
 800097a:	f000 fb53 	bl	8001024 <vIWDG_Init>
  __RETARGET_INIT(DEBUG_USART);
 800097e:	484b      	ldr	r0, [pc, #300]	; (8000aac <main+0x15c>)
 8000980:	f000 fbe0 	bl	8001144 <RetargetInit>
  __PRINT_RESET_CAUSE();
 8000984:	f000 faba 	bl	8000efc <resetCauseGet>
 8000988:	4603      	mov	r3, r0
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fafc 	bl	8000f88 <resetCauseGetName>
 8000990:	4603      	mov	r3, r0
 8000992:	4618      	mov	r0, r3
 8000994:	f004 f902 	bl	8004b9c <iprintf>
 8000998:	4845      	ldr	r0, [pc, #276]	; (8000ab0 <main+0x160>)
 800099a:	f004 f973 	bl	8004c84 <puts>
  __MY_OFF_ALL_LED();
 800099e:	2201      	movs	r2, #1
 80009a0:	2120      	movs	r1, #32
 80009a2:	4844      	ldr	r0, [pc, #272]	; (8000ab4 <main+0x164>)
 80009a4:	f002 f9d7 	bl	8002d56 <HAL_GPIO_WritePin>
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ae:	4842      	ldr	r0, [pc, #264]	; (8000ab8 <main+0x168>)
 80009b0:	f002 f9d1 	bl	8002d56 <HAL_GPIO_WritePin>
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ba:	483f      	ldr	r0, [pc, #252]	; (8000ab8 <main+0x168>)
 80009bc:	f002 f9cb 	bl	8002d56 <HAL_GPIO_WritePin>
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c6:	483b      	ldr	r0, [pc, #236]	; (8000ab4 <main+0x164>)
 80009c8:	f002 f9c5 	bl	8002d56 <HAL_GPIO_WritePin>

  /* Start PWM on TIM3_CHANNEL_2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80009cc:	2104      	movs	r1, #4
 80009ce:	483b      	ldr	r0, [pc, #236]	; (8000abc <main+0x16c>)
 80009d0:	f003 f82c 	bl	8003a2c <HAL_TIM_PWM_Start>
  /* Start PWM on TIM4_CHANNEL_3 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80009d4:	2108      	movs	r1, #8
 80009d6:	483a      	ldr	r0, [pc, #232]	; (8000ac0 <main+0x170>)
 80009d8:	f003 f828 	bl	8003a2c <HAL_TIM_PWM_Start>
  /* Start DMA */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1_data_buffer,
 80009dc:	2203      	movs	r2, #3
 80009de:	4939      	ldr	r1, [pc, #228]	; (8000ac4 <main+0x174>)
 80009e0:	4839      	ldr	r0, [pc, #228]	; (8000ac8 <main+0x178>)
 80009e2:	f001 f911 	bl	8001c08 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PRINTF("################################################################################################\r\n");
 80009e6:	4839      	ldr	r0, [pc, #228]	; (8000acc <main+0x17c>)
 80009e8:	f004 f94c 	bl	8004c84 <puts>
  PRINTF("Project name: [PWM]Motor_Control\r\n");
 80009ec:	4838      	ldr	r0, [pc, #224]	; (8000ad0 <main+0x180>)
 80009ee:	f004 f949 	bl	8004c84 <puts>
  PRINTF("**********************************SHORT DESCRIPTION******************************\r\n");
 80009f2:	4838      	ldr	r0, [pc, #224]	; (8000ad4 <main+0x184>)
 80009f4:	f004 f946 	bl	8004c84 <puts>
  PRINTF("This project utilizes L298N module to concurrently control 2 DC motors by modulating PWM signal\r\n");
 80009f8:	4837      	ldr	r0, [pc, #220]	; (8000ad8 <main+0x188>)
 80009fa:	f004 f943 	bl	8004c84 <puts>
  PRINTF("*********************************************************************************\r\n");
 80009fe:	4837      	ldr	r0, [pc, #220]	; (8000adc <main+0x18c>)
 8000a00:	f004 f940 	bl	8004c84 <puts>
  PRINTF("Run Application\r\n");
 8000a04:	4836      	ldr	r0, [pc, #216]	; (8000ae0 <main+0x190>)
 8000a06:	f004 f93d 	bl	8004c84 <puts>
  prev_time_blinkled = HAL_GetTick();
 8000a0a:	f000 fff9 	bl	8001a00 <HAL_GetTick>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <main+0x194>)
 8000a12:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* Task 500ms */
    if (HAL_GetTick() - prev_time_blinkled >= BLINK_LED_FREQ){
 8000a14:	f000 fff4 	bl	8001a00 <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	4b32      	ldr	r3, [pc, #200]	; (8000ae4 <main+0x194>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a24:	d309      	bcc.n	8000a3a <main+0xea>
      prev_time_blinkled = HAL_GetTick();
 8000a26:	f000 ffeb 	bl	8001a00 <HAL_GetTick>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <main+0x194>)
 8000a2e:	601a      	str	r2, [r3, #0]
      __MY_TOGGLE_LED(LED_2);
 8000a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a34:	4820      	ldr	r0, [pc, #128]	; (8000ab8 <main+0x168>)
 8000a36:	f002 f9a6 	bl	8002d86 <HAL_GPIO_TogglePin>
    }

    vTimeStamp(HAL_GetTick());
 8000a3a:	f000 ffe1 	bl	8001a00 <HAL_GetTick>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 fb35 	bl	80010b0 <vTimeStamp>
    /* Print Var-register ADC value */
    PRINT_VAR((uint32_t)adc1_data_buffer[0]);
 8000a46:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <main+0x174>)
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4826      	ldr	r0, [pc, #152]	; (8000ae8 <main+0x198>)
 8000a4e:	f004 f8a5 	bl	8004b9c <iprintf>
    /* Remap speed value to be in range of 0-100 */
    speed = (int)(((float)adc1_data_buffer[0] / 4096) * TIM_PWM_OVERFLOW_VALUE);
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <main+0x174>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fc2e 	bl	80002b8 <__aeabi_ui2f>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fd34 	bl	80004d0 <__aeabi_fdiv>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	4920      	ldr	r1, [pc, #128]	; (8000aec <main+0x19c>)
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fc7b 	bl	8000368 <__aeabi_fmul>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fdc7 	bl	8000608 <__aeabi_f2iz>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <main+0x1a0>)
 8000a80:	701a      	strb	r2, [r3, #0]
    /* Control motor speed accordingly */
    motorControl(speed, rotate_direction, motor_select);
 8000a82:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <main+0x1a0>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	4618      	mov	r0, r3
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <main+0x1a4>)
 8000a8c:	6819      	ldr	r1, [r3, #0]
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <main+0x1a8>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	f000 f958 	bl	8000d48 <motorControl>
    HAL_Delay(50);
 8000a98:	2032      	movs	r0, #50	; 0x32
 8000a9a:	f000 ffbb 	bl	8001a14 <HAL_Delay>
    HAL_IWDG_Refresh(&hiwdg);
 8000a9e:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <main+0x158>)
 8000aa0:	f002 f9db 	bl	8002e5a <HAL_IWDG_Refresh>
    if (HAL_GetTick() - prev_time_blinkled >= BLINK_LED_FREQ){
 8000aa4:	e7b6      	b.n	8000a14 <main+0xc4>
 8000aa6:	bf00      	nop
 8000aa8:	20000120 	.word	0x20000120
 8000aac:	20000218 	.word	0x20000218
 8000ab0:	08005bc4 	.word	0x08005bc4
 8000ab4:	40010c00 	.word	0x40010c00
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	200001d8 	.word	0x200001d8
 8000ac0:	20000198 	.word	0x20000198
 8000ac4:	20000138 	.word	0x20000138
 8000ac8:	200000ac 	.word	0x200000ac
 8000acc:	08005bc8 	.word	0x08005bc8
 8000ad0:	08005c2c 	.word	0x08005c2c
 8000ad4:	08005c50 	.word	0x08005c50
 8000ad8:	08005ca4 	.word	0x08005ca4
 8000adc:	08005d08 	.word	0x08005d08
 8000ae0:	08005d5c 	.word	0x08005d5c
 8000ae4:	20000098 	.word	0x20000098
 8000ae8:	08005d70 	.word	0x08005d70
 8000aec:	42c80000 	.word	0x42c80000
 8000af0:	20000094 	.word	0x20000094
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000004 	.word	0x20000004

08000afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b094      	sub	sp, #80	; 0x50
 8000b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b06:	2228      	movs	r2, #40	; 0x28
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f004 f83e 	bl	8004b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8000b2c:	2309      	movs	r3, #9
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b42:	2302      	movs	r3, #2
 8000b44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b4c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 f9a6 	bl	8002ea8 <HAL_RCC_OscConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000b62:	f000 f9c5 	bl	8000ef0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b66:	230f      	movs	r3, #15
 8000b68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b76:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2102      	movs	r1, #2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 fc10 	bl	80033a8 <HAL_RCC_ClockConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b8e:	f000 f9af 	bl	8000ef0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC;
 8000b92:	2303      	movs	r3, #3
 8000b94:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8000b96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b9a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ba0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 fdcb 	bl	8003740 <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000bb0:	f000 f99e 	bl	8000ef0 <Error_Handler>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3750      	adds	r7, #80	; 0x50
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
  static uint8_t motor_state, rotate_state;
  /* Change rotate direction */
  if (GPIO_Pin == BT_DOWN_Pin)
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bcc:	d13b      	bne.n	8000c46 <HAL_GPIO_EXTI_Callback+0x8a>
  {
    volatile uint32_t wait = 100000;
 8000bce:	4b50      	ldr	r3, [pc, #320]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x154>)
 8000bd0:	617b      	str	r3, [r7, #20]
    while ((wait--) != 0)
 8000bd2:	e000      	b.n	8000bd6 <HAL_GPIO_EXTI_Callback+0x1a>
    {
      __NOP();
 8000bd4:	bf00      	nop
    while ((wait--) != 0)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	1e5a      	subs	r2, r3, #1
 8000bda:	617a      	str	r2, [r7, #20]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d1f9      	bne.n	8000bd4 <HAL_GPIO_EXTI_Callback+0x18>
    }
    if (HAL_GPIO_ReadPin(BT_DOWN_GPIO_Port, BT_DOWN_Pin) == 0)
 8000be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be4:	484b      	ldr	r0, [pc, #300]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x158>)
 8000be6:	f002 f89f 	bl	8002d28 <HAL_GPIO_ReadPin>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f040 8086 	bne.w	8000cfe <HAL_GPIO_EXTI_Callback+0x142>
    {
      __MY_TOGGLE_LED(LED_3);
 8000bf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf6:	4847      	ldr	r0, [pc, #284]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x158>)
 8000bf8:	f002 f8c5 	bl	8002d86 <HAL_GPIO_TogglePin>
      if (rotate_state == 0)
 8000bfc:	4b46      	ldr	r3, [pc, #280]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d107      	bne.n	8000c14 <HAL_GPIO_EXTI_Callback+0x58>
      {
        rotate_state = 1;
 8000c04:	4b44      	ldr	r3, [pc, #272]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
        rotate_direction = ANTI_CLOCKWISE;
 8000c0a:	4b44      	ldr	r3, [pc, #272]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x160>)
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	e009      	b.n	8000c28 <HAL_GPIO_EXTI_Callback+0x6c>
      }
      else if (rotate_state == 1)
 8000c14:	4b40      	ldr	r3, [pc, #256]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d105      	bne.n	8000c28 <HAL_GPIO_EXTI_Callback+0x6c>
      {
        rotate_state = 0;
 8000c1c:	4b3e      	ldr	r3, [pc, #248]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
        rotate_direction = CLOCKWISE;
 8000c22:	4b3e      	ldr	r3, [pc, #248]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x160>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
      }
      PRINTF("--------------------\r\n");
 8000c28:	483d      	ldr	r0, [pc, #244]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x164>)
 8000c2a:	f004 f82b 	bl	8004c84 <puts>
      PRINTF("BT_DOWN pressed\r\n");
 8000c2e:	483d      	ldr	r0, [pc, #244]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x168>)
 8000c30:	f004 f828 	bl	8004c84 <puts>
      PRINT_VAR(rotate_direction);
 8000c34:	4b39      	ldr	r3, [pc, #228]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x160>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	483b      	ldr	r0, [pc, #236]	; (8000d28 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000c3c:	f003 ffae 	bl	8004b9c <iprintf>
      PRINTF("--------------------\r\n");
 8000c40:	4837      	ldr	r0, [pc, #220]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x164>)
 8000c42:	f004 f81f 	bl	8004c84 <puts>
      return;
    }
  }

  /* Switch control between motor */
  if (GPIO_Pin == BT_CENTER_Pin)
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	2b80      	cmp	r3, #128	; 0x80
 8000c4a:	d133      	bne.n	8000cb4 <HAL_GPIO_EXTI_Callback+0xf8>
  {
    volatile uint32_t wait = 100000;
 8000c4c:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x154>)
 8000c4e:	613b      	str	r3, [r7, #16]
    while ((wait--) != 0)
 8000c50:	e000      	b.n	8000c54 <HAL_GPIO_EXTI_Callback+0x98>
    {
      __NOP();
 8000c52:	bf00      	nop
    while ((wait--) != 0)
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	1e5a      	subs	r2, r3, #1
 8000c58:	613a      	str	r2, [r7, #16]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f9      	bne.n	8000c52 <HAL_GPIO_EXTI_Callback+0x96>
    }
    if (HAL_GPIO_ReadPin(BT_CENTER_GPIO_Port, BT_CENTER_Pin) == 0)
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	482c      	ldr	r0, [pc, #176]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x158>)
 8000c62:	f002 f861 	bl	8002d28 <HAL_GPIO_ReadPin>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d14a      	bne.n	8000d02 <HAL_GPIO_EXTI_Callback+0x146>
    {
      if (motor_state == 0)
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x170>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d106      	bne.n	8000c82 <HAL_GPIO_EXTI_Callback+0xc6>
      {
        motor_state = 1;
 8000c74:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x170>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
        motor_select = MOTOR_2;
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x174>)
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	e009      	b.n	8000c96 <HAL_GPIO_EXTI_Callback+0xda>
      }
      else if (motor_state == 1)
 8000c82:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x170>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d105      	bne.n	8000c96 <HAL_GPIO_EXTI_Callback+0xda>
      {
        motor_state = 0;
 8000c8a:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x170>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
        motor_select = MOTOR_1;
 8000c90:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x174>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	601a      	str	r2, [r3, #0]
      }
      PRINTF("--------------------\r\n");
 8000c96:	4822      	ldr	r0, [pc, #136]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x164>)
 8000c98:	f003 fff4 	bl	8004c84 <puts>
      PRINTF("BT_CENTER pressed\r\n");
 8000c9c:	4825      	ldr	r0, [pc, #148]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x178>)
 8000c9e:	f003 fff1 	bl	8004c84 <puts>
      PRINT_VAR(motor_select);
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x174>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4823      	ldr	r0, [pc, #140]	; (8000d38 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000caa:	f003 ff77 	bl	8004b9c <iprintf>
      PRINTF("--------------------\r\n");
 8000cae:	481c      	ldr	r0, [pc, #112]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x164>)
 8000cb0:	f003 ffe8 	bl	8004c84 <puts>
    {
      return;
    }
  }

  if (GPIO_Pin == BT_UP_Pin)
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	2b40      	cmp	r3, #64	; 0x40
 8000cb8:	d126      	bne.n	8000d08 <HAL_GPIO_EXTI_Callback+0x14c>
  {
    volatile uint32_t wait = 100000;
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x154>)
 8000cbc:	60fb      	str	r3, [r7, #12]
    while ((wait--) != 0)
 8000cbe:	e000      	b.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x106>
    {
      __NOP();
 8000cc0:	bf00      	nop
    while ((wait--) != 0)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	1e5a      	subs	r2, r3, #1
 8000cc6:	60fa      	str	r2, [r7, #12]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1f9      	bne.n	8000cc0 <HAL_GPIO_EXTI_Callback+0x104>
    }
    if (HAL_GPIO_ReadPin(BT_UP_GPIO_Port, BT_UP_Pin) == 0)
 8000ccc:	2140      	movs	r1, #64	; 0x40
 8000cce:	4811      	ldr	r0, [pc, #68]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x158>)
 8000cd0:	f002 f82a 	bl	8002d28 <HAL_GPIO_ReadPin>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d115      	bne.n	8000d06 <HAL_GPIO_EXTI_Callback+0x14a>
    {

      HAL_GPIO_TogglePin(L298N_RELAY_CONTROL_GPIO_Port,
 8000cda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cde:	4817      	ldr	r0, [pc, #92]	; (8000d3c <HAL_GPIO_EXTI_Callback+0x180>)
 8000ce0:	f002 f851 	bl	8002d86 <HAL_GPIO_TogglePin>
                         L298N_RELAY_CONTROL_Pin);
      PRINTF("--------------------\r\n");
 8000ce4:	480e      	ldr	r0, [pc, #56]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x164>)
 8000ce6:	f003 ffcd 	bl	8004c84 <puts>
      PRINTF("BT_UP pressed\r\n");
 8000cea:	4815      	ldr	r0, [pc, #84]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x184>)
 8000cec:	f003 ffca 	bl	8004c84 <puts>
      PRINTF("L298N power state changed\r\n");
 8000cf0:	4814      	ldr	r0, [pc, #80]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x188>)
 8000cf2:	f003 ffc7 	bl	8004c84 <puts>
      PRINTF("--------------------\r\n");
 8000cf6:	480a      	ldr	r0, [pc, #40]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x164>)
 8000cf8:	f003 ffc4 	bl	8004c84 <puts>
 8000cfc:	e004      	b.n	8000d08 <HAL_GPIO_EXTI_Callback+0x14c>
      return;
 8000cfe:	bf00      	nop
 8000d00:	e002      	b.n	8000d08 <HAL_GPIO_EXTI_Callback+0x14c>
      return;
 8000d02:	bf00      	nop
 8000d04:	e000      	b.n	8000d08 <HAL_GPIO_EXTI_Callback+0x14c>
    }
    else
    {
      return;
 8000d06:	bf00      	nop
    }
  }
}
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	000186a0 	.word	0x000186a0
 8000d14:	40010800 	.word	0x40010800
 8000d18:	2000009c 	.word	0x2000009c
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	08005d98 	.word	0x08005d98
 8000d24:	08005db0 	.word	0x08005db0
 8000d28:	08005dc4 	.word	0x08005dc4
 8000d2c:	2000009d 	.word	0x2000009d
 8000d30:	20000004 	.word	0x20000004
 8000d34:	08005de0 	.word	0x08005de0
 8000d38:	08005df4 	.word	0x08005df4
 8000d3c:	40011000 	.word	0x40011000
 8000d40:	08005e0c 	.word	0x08005e0c
 8000d44:	08005e1c 	.word	0x08005e1c

08000d48 <motorControl>:
 * @param speed equivalent to duty_cycle impose to motor, range from 1 -> TIM_PWM_OVERFLOW_VALUE
 * @param rotate_direction 
 */
void motorControl(uint32_t speed, int32_t rotate_direction,
                  uint32_t motor_select)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  if ((rotate_direction != 1) && (rotate_direction != -1))
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d007      	beq.n	8000d6a <motorControl+0x22>
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d60:	d003      	beq.n	8000d6a <motorControl+0x22>
  {
    PRINTF("Wrong parameter: rotate_direction\r\n");
 8000d62:	4838      	ldr	r0, [pc, #224]	; (8000e44 <motorControl+0xfc>)
 8000d64:	f003 ff8e 	bl	8004c84 <puts>
    return;
 8000d68:	e069      	b.n	8000e3e <motorControl+0xf6>
  }

  if (speed > TIM_PWM_OVERFLOW_VALUE)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2b64      	cmp	r3, #100	; 0x64
 8000d6e:	d903      	bls.n	8000d78 <motorControl+0x30>
  {
    PRINTF("Wrong parameter: speed\r\n");
 8000d70:	4835      	ldr	r0, [pc, #212]	; (8000e48 <motorControl+0x100>)
 8000d72:	f003 ff87 	bl	8004c84 <puts>
    return;
 8000d76:	e062      	b.n	8000e3e <motorControl+0xf6>
  }
  uint32_t duty_cycle = speed;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	617b      	str	r3, [r7, #20]
  PRINT_VAR(speed);
 8000d7c:	68f9      	ldr	r1, [r7, #12]
 8000d7e:	4833      	ldr	r0, [pc, #204]	; (8000e4c <motorControl+0x104>)
 8000d80:	f003 ff0c 	bl	8004b9c <iprintf>
  switch (motor_select)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d002      	beq.n	8000d90 <motorControl+0x48>
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d029      	beq.n	8000de2 <motorControl+0x9a>
                            TIM_PWM_OVERFLOW_VALUE - duty_cycle);
    }
    break;
  }
  default:
    break;
 8000d8e:	e056      	b.n	8000e3e <motorControl+0xf6>
    PRINTF("MOTOR_1 selected\r\n");
 8000d90:	482f      	ldr	r0, [pc, #188]	; (8000e50 <motorControl+0x108>)
 8000d92:	f003 ff77 	bl	8004c84 <puts>
    motorHalt(MOTOR_2);
 8000d96:	2002      	movs	r0, #2
 8000d98:	f000 f86e 	bl	8000e78 <motorHalt>
    if (rotate_direction == CLOCKWISE)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d10e      	bne.n	8000dc0 <motorControl+0x78>
      PRINTF("MOTOR_1: Clockwise rotating\r\n");
 8000da2:	482c      	ldr	r0, [pc, #176]	; (8000e54 <motorControl+0x10c>)
 8000da4:	f003 ff6e 	bl	8004c84 <puts>
      HAL_GPIO_WritePin(INT2_NO_PWM_MOTOR_1_GPIO_Port,
 8000da8:	2201      	movs	r2, #1
 8000daa:	2180      	movs	r1, #128	; 0x80
 8000dac:	482a      	ldr	r0, [pc, #168]	; (8000e58 <motorControl+0x110>)
 8000dae:	f001 ffd2 	bl	8002d56 <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,
 8000db2:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <motorControl+0x114>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8000dbc:	63da      	str	r2, [r3, #60]	; 0x3c
    break;
 8000dbe:	e03b      	b.n	8000e38 <motorControl+0xf0>
    else if (rotate_direction == ANTI_CLOCKWISE)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc6:	d137      	bne.n	8000e38 <motorControl+0xf0>
      PRINTF("MOTOR_1: Anti-Clockwise rotating\r\n");
 8000dc8:	4825      	ldr	r0, [pc, #148]	; (8000e60 <motorControl+0x118>)
 8000dca:	f003 ff5b 	bl	8004c84 <puts>
      HAL_GPIO_WritePin(INT2_NO_PWM_MOTOR_1_GPIO_Port,
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	4821      	ldr	r0, [pc, #132]	; (8000e58 <motorControl+0x110>)
 8000dd4:	f001 ffbf 	bl	8002d56 <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty_cycle);
 8000dd8:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <motorControl+0x114>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	63da      	str	r2, [r3, #60]	; 0x3c
    break;
 8000de0:	e02a      	b.n	8000e38 <motorControl+0xf0>
    PRINTF("MOTOR_2 selected\r\n");
 8000de2:	4820      	ldr	r0, [pc, #128]	; (8000e64 <motorControl+0x11c>)
 8000de4:	f003 ff4e 	bl	8004c84 <puts>
    motorHalt(MOTOR_1);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f000 f845 	bl	8000e78 <motorHalt>
    if (rotate_direction == CLOCKWISE)
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d10d      	bne.n	8000e10 <motorControl+0xc8>
      PRINTF("MOTOR_2: Clockwise rotating\r\n");
 8000df4:	481c      	ldr	r0, [pc, #112]	; (8000e68 <motorControl+0x120>)
 8000df6:	f003 ff45 	bl	8004c84 <puts>
      HAL_GPIO_WritePin(INT4_NO_PWM_MOTOR_2_GPIO_Port,
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e00:	481a      	ldr	r0, [pc, #104]	; (8000e6c <motorControl+0x124>)
 8000e02:	f001 ffa8 	bl	8002d56 <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle);
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <motorControl+0x128>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	639a      	str	r2, [r3, #56]	; 0x38
    break;
 8000e0e:	e015      	b.n	8000e3c <motorControl+0xf4>
    else if (rotate_direction == ANTI_CLOCKWISE)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e16:	d111      	bne.n	8000e3c <motorControl+0xf4>
      PRINTF("MOTOR_2: Anti-Clockwise rotating\r\n");
 8000e18:	4816      	ldr	r0, [pc, #88]	; (8000e74 <motorControl+0x12c>)
 8000e1a:	f003 ff33 	bl	8004c84 <puts>
      HAL_GPIO_WritePin(INT4_NO_PWM_MOTOR_2_GPIO_Port,
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e24:	4811      	ldr	r0, [pc, #68]	; (8000e6c <motorControl+0x124>)
 8000e26:	f001 ff96 	bl	8002d56 <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <motorControl+0x128>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8000e34:	639a      	str	r2, [r3, #56]	; 0x38
    break;
 8000e36:	e001      	b.n	8000e3c <motorControl+0xf4>
    break;
 8000e38:	bf00      	nop
 8000e3a:	e000      	b.n	8000e3e <motorControl+0xf6>
    break;
 8000e3c:	bf00      	nop
  }
}
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	08005e38 	.word	0x08005e38
 8000e48:	08005e5c 	.word	0x08005e5c
 8000e4c:	08005e74 	.word	0x08005e74
 8000e50:	08005e84 	.word	0x08005e84
 8000e54:	08005e98 	.word	0x08005e98
 8000e58:	40010c00 	.word	0x40010c00
 8000e5c:	20000198 	.word	0x20000198
 8000e60:	08005eb8 	.word	0x08005eb8
 8000e64:	08005edc 	.word	0x08005edc
 8000e68:	08005ef0 	.word	0x08005ef0
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	200001d8 	.word	0x200001d8
 8000e74:	08005f10 	.word	0x08005f10

08000e78 <motorHalt>:

void motorHalt(uint32_t motor_select)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if (motor_select == MOTOR_1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d109      	bne.n	8000e9a <motorHalt+0x22>
  {
    HAL_GPIO_WritePin(INT2_NO_PWM_MOTOR_1_GPIO_Port,
 8000e86:	2200      	movs	r2, #0
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	480c      	ldr	r0, [pc, #48]	; (8000ebc <motorHalt+0x44>)
 8000e8c:	f001 ff63 	bl	8002d56 <HAL_GPIO_WritePin>
                      INT2_NO_PWM_MOTOR_1_Pin, 0);
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <motorHalt+0x48>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2200      	movs	r2, #0
 8000e96:	63da      	str	r2, [r3, #60]	; 0x3c
  {
    HAL_GPIO_WritePin(INT4_NO_PWM_MOTOR_2_GPIO_Port,
                      INT4_NO_PWM_MOTOR_2_Pin, 0);
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
  }
}
 8000e98:	e00c      	b.n	8000eb4 <motorHalt+0x3c>
  else if (motor_select == MOTOR_2)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d109      	bne.n	8000eb4 <motorHalt+0x3c>
    HAL_GPIO_WritePin(INT4_NO_PWM_MOTOR_2_GPIO_Port,
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea6:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <motorHalt+0x4c>)
 8000ea8:	f001 ff55 	bl	8002d56 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <motorHalt+0x50>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40010c00 	.word	0x40010c00
 8000ec0:	20000198 	.word	0x20000198
 8000ec4:	40010800 	.word	0x40010800
 8000ec8:	200001d8 	.word	0x200001d8

08000ecc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d101      	bne.n	8000ee2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000ede:	f000 fd7d 	bl	80019dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40012c00 	.word	0x40012c00

08000ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <resetCauseGet>:
	}
}
#endif /* !configLL_UART */

reset_cause_t resetCauseGet(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
	reset_cause_t reset_cause;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <resetCauseGet+0x84>)
 8000f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	da02      	bge.n	8000f10 <resetCauseGet+0x14>
	{
		reset_cause = eRESET_CAUSE_LOW_POWER_RESET;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	e02e      	b.n	8000f6e <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <resetCauseGet+0x84>)
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d002      	beq.n	8000f22 <resetCauseGet+0x26>
	{
		reset_cause = eRESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	e025      	b.n	8000f6e <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <resetCauseGet+0x84>)
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d002      	beq.n	8000f34 <resetCauseGet+0x38>
	{
		reset_cause = eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	71fb      	strb	r3, [r7, #7]
 8000f32:	e01c      	b.n	8000f6e <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <resetCauseGet+0x84>)
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <resetCauseGet+0x4a>
	{
		reset_cause = eRESET_CAUSE_SOFTWARE_RESET; // This reset is induced by calling the ARM CMSIS `NVIC_SystemReset()` function!
 8000f40:	2304      	movs	r3, #4
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	e013      	b.n	8000f6e <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <resetCauseGet+0x84>)
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <resetCauseGet+0x5c>
	{
		reset_cause = eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8000f52:	2305      	movs	r3, #5
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	e00a      	b.n	8000f6e <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <resetCauseGet+0x84>)
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <resetCauseGet+0x6e>
	{
		reset_cause = eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8000f64:	2306      	movs	r3, #6
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	e001      	b.n	8000f6e <resetCauseGet+0x72>
     {
     reset_cause = eRESET_CAUSE_BROWNOUT_RESET;
     } */
	else
	{
		reset_cause = eRESET_CAUSE_UNKNOWN;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	71fb      	strb	r3, [r7, #7]
	}

	// Clear all the reset flags or else they will remain set during future resets until system power is fully removed.
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <resetCauseGet+0x88>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

	return reset_cause;
 8000f74:	79fb      	ldrb	r3, [r7, #7]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	40021000 	.word	0x40021000
 8000f84:	424204e0 	.word	0x424204e0

08000f88 <resetCauseGetName>:

const char *resetCauseGetName(reset_cause_t reset_cause)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	const char *reset_cause_name = "TBD";
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <resetCauseGetName+0x78>)
 8000f94:	60fb      	str	r3, [r7, #12]

	switch (reset_cause)
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b07      	cmp	r3, #7
 8000f9a:	d82b      	bhi.n	8000ff4 <resetCauseGetName+0x6c>
 8000f9c:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <resetCauseGetName+0x1c>)
 8000f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa2:	bf00      	nop
 8000fa4:	08000fc5 	.word	0x08000fc5
 8000fa8:	08000fcb 	.word	0x08000fcb
 8000fac:	08000fd1 	.word	0x08000fd1
 8000fb0:	08000fd7 	.word	0x08000fd7
 8000fb4:	08000fdd 	.word	0x08000fdd
 8000fb8:	08000fe3 	.word	0x08000fe3
 8000fbc:	08000fe9 	.word	0x08000fe9
 8000fc0:	08000fef 	.word	0x08000fef
	{
	case eRESET_CAUSE_UNKNOWN:
		reset_cause_name = "UNKNOWN";
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <resetCauseGetName+0x7c>)
 8000fc6:	60fb      	str	r3, [r7, #12]
		break;
 8000fc8:	e014      	b.n	8000ff4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_LOW_POWER_RESET:
		reset_cause_name = "LOW_POWER_RESET";
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <resetCauseGetName+0x80>)
 8000fcc:	60fb      	str	r3, [r7, #12]
		break;
 8000fce:	e011      	b.n	8000ff4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_WINDOW_WATCHDOG_RESET:
		reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <resetCauseGetName+0x84>)
 8000fd2:	60fb      	str	r3, [r7, #12]
		break;
 8000fd4:	e00e      	b.n	8000ff4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
		reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <resetCauseGetName+0x88>)
 8000fd8:	60fb      	str	r3, [r7, #12]
		break;
 8000fda:	e00b      	b.n	8000ff4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_SOFTWARE_RESET:
		reset_cause_name = "SOFTWARE_RESET";
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <resetCauseGetName+0x8c>)
 8000fde:	60fb      	str	r3, [r7, #12]
		break;
 8000fe0:	e008      	b.n	8000ff4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
		reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <resetCauseGetName+0x90>)
 8000fe4:	60fb      	str	r3, [r7, #12]
		break;
 8000fe6:	e005      	b.n	8000ff4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
		reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <resetCauseGetName+0x94>)
 8000fea:	60fb      	str	r3, [r7, #12]
		break;
 8000fec:	e002      	b.n	8000ff4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_BROWNOUT_RESET:
		reset_cause_name = "BROWNOUT_RESET (BOR)";
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <resetCauseGetName+0x98>)
 8000ff0:	60fb      	str	r3, [r7, #12]
		break;
 8000ff2:	bf00      	nop
	}
	return reset_cause_name;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	08005f34 	.word	0x08005f34
 8001004:	08005f38 	.word	0x08005f38
 8001008:	08005f40 	.word	0x08005f40
 800100c:	08005f50 	.word	0x08005f50
 8001010:	08005f68 	.word	0x08005f68
 8001014:	08005f84 	.word	0x08005f84
 8001018:	08005f94 	.word	0x08005f94
 800101c:	08005fc4 	.word	0x08005fc4
 8001020:	08005fe0 	.word	0x08005fe0

08001024 <vIWDG_Init>:

void vIWDG_Init(IWDG_HandleTypeDef *hiwdg, uint32_t millis)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	uint32_t iwdg_timeout_millis = millis;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	60fb      	str	r3, [r7, #12]

	/* Select INDEPENDENT_WATCHDOG */
	hiwdg->Instance = IWDG;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a13      	ldr	r2, [pc, #76]	; (8001084 <vIWDG_Init+0x60>)
 8001036:	601a      	str	r2, [r3, #0]
	/* Use prescaler LSI/128 */
	hiwdg->Init.Prescaler = IWDG_PRESCALER_128;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2205      	movs	r2, #5
 800103c:	605a      	str	r2, [r3, #4]
	hiwdg->Init.Reload = (int)(IWDG_RESOLUTION * ((float)iwdg_timeout_millis / PRESCALER_128_UPPER_LIMIT));
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f7ff f93a 	bl	80002b8 <__aeabi_ui2f>
 8001044:	4603      	mov	r3, r0
 8001046:	4910      	ldr	r1, [pc, #64]	; (8001088 <vIWDG_Init+0x64>)
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa41 	bl	80004d0 <__aeabi_fdiv>
 800104e:	4603      	mov	r3, r0
 8001050:	490e      	ldr	r1, [pc, #56]	; (800108c <vIWDG_Init+0x68>)
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff f988 	bl	8000368 <__aeabi_fmul>
 8001058:	4603      	mov	r3, r0
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fad4 	bl	8000608 <__aeabi_f2iz>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	609a      	str	r2, [r3, #8]

	if (HAL_IWDG_Init(hiwdg) != HAL_OK)
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f001 febd 	bl	8002de8 <HAL_IWDG_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <vIWDG_Init+0x58>
	{
		_Error_Handler(__FILE__, __LINE__);
 8001074:	217f      	movs	r1, #127	; 0x7f
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <vIWDG_Init+0x6c>)
 8001078:	f000 f80c 	bl	8001094 <_Error_Handler>
	}
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40003000 	.word	0x40003000
 8001088:	464ccc00 	.word	0x464ccc00
 800108c:	457ff000 	.word	0x457ff000
 8001090:	08005ff8 	.word	0x08005ff8

08001094 <_Error_Handler>:

__weak void _Error_Handler(char *file, int line)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1)
	{
		PRINTF("\r\nError file %s line %d", file, line);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4802      	ldr	r0, [pc, #8]	; (80010ac <_Error_Handler+0x18>)
 80010a4:	f003 fd7a 	bl	8004b9c <iprintf>
 80010a8:	e7f9      	b.n	800109e <_Error_Handler+0xa>
 80010aa:	bf00      	nop
 80010ac:	08006010 	.word	0x08006010

080010b0 <vTimeStamp>:
	}
	/* USER CODE END Error_Handler_Debug */
}

void vTimeStamp(uint32_t now_tick)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af02      	add	r7, sp, #8
 80010b6:	6078      	str	r0, [r7, #4]
	uint8_t second, minute, hour;
	uint32_t millis_second, now_second;

	/* ex: 450235ms => now_second = 450 */
	now_second = now_tick / 1000;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a1f      	ldr	r2, [pc, #124]	; (8001138 <vTimeStamp+0x88>)
 80010bc:	fba2 2303 	umull	r2, r3, r2, r3
 80010c0:	099b      	lsrs	r3, r3, #6
 80010c2:	613b      	str	r3, [r7, #16]
	/* ex: 450235ms => millis_second = 235 */
	millis_second = now_tick - now_second * 1000;
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	60fb      	str	r3, [r7, #12]
	/* ex: 450235ms => 450/60 = 7 */
	minute = now_second / 60;
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4a19      	ldr	r2, [pc, #100]	; (800113c <vTimeStamp+0x8c>)
 80010d8:	fba2 2303 	umull	r2, r3, r2, r3
 80010dc:	095b      	lsrs	r3, r3, #5
 80010de:	75fb      	strb	r3, [r7, #23]
	/* ex: 450235ms => 450 - 7*60 = 30 */
	second = now_second - minute * 60;
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	4619      	mov	r1, r3
 80010e8:	0109      	lsls	r1, r1, #4
 80010ea:	1acb      	subs	r3, r1, r3
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	72fb      	strb	r3, [r7, #11]
	if (minute > 60)
 80010f4:	7dfb      	ldrb	r3, [r7, #23]
 80010f6:	2b3c      	cmp	r3, #60	; 0x3c
 80010f8:	d90f      	bls.n	800111a <vTimeStamp+0x6a>
	{
		hour = minute / 60;
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
 80010fc:	4a0f      	ldr	r2, [pc, #60]	; (800113c <vTimeStamp+0x8c>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	75bb      	strb	r3, [r7, #22]
		minute = minute - hour * 60;
 8001106:	7dbb      	ldrb	r3, [r7, #22]
 8001108:	461a      	mov	r2, r3
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	b2da      	uxtb	r2, r3
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	4413      	add	r3, r2
 8001116:	75fb      	strb	r3, [r7, #23]
 8001118:	e001      	b.n	800111e <vTimeStamp+0x6e>
	}
	else
	{
		hour = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	75bb      	strb	r3, [r7, #22]
	}

#if (defined(PRINT_DEBUG))
	printf("[%02d:%02d:%02d.%03ld]\r\n", hour, minute, second, millis_second);
 800111e:	7db9      	ldrb	r1, [r7, #22]
 8001120:	7dfa      	ldrb	r2, [r7, #23]
 8001122:	7af8      	ldrb	r0, [r7, #11]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4603      	mov	r3, r0
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <vTimeStamp+0x90>)
 800112c:	f003 fd36 	bl	8004b9c <iprintf>
#endif
	return;
 8001130:	bf00      	nop
}
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	10624dd3 	.word	0x10624dd3
 800113c:	88888889 	.word	0x88888889
 8001140:	08006028 	.word	0x08006028

08001144 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <RetargetInit+0x28>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <RetargetInit+0x2c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6898      	ldr	r0, [r3, #8]
 8001158:	2300      	movs	r3, #0
 800115a:	2202      	movs	r2, #2
 800115c:	2100      	movs	r1, #0
 800115e:	f003 fd99 	bl	8004c94 <setvbuf>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000140 	.word	0x20000140
 8001170:	20000014 	.word	0x20000014

08001174 <_isatty>:

int _isatty(int fd) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db04      	blt.n	800118c <_isatty+0x18>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b02      	cmp	r3, #2
 8001186:	dc01      	bgt.n	800118c <_isatty+0x18>
    return 1;
 8001188:	2301      	movs	r3, #1
 800118a:	e005      	b.n	8001198 <_isatty+0x24>

  errno = EBADF;
 800118c:	f003 fcd4 	bl	8004b38 <__errno>
 8001190:	4602      	mov	r2, r0
 8001192:	2309      	movs	r3, #9
 8001194:	6013      	str	r3, [r2, #0]
  return 0;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <_write>:

int _write(int fd, char* ptr, int len) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d002      	beq.n	80011b8 <_write+0x18>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d111      	bne.n	80011dc <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <_write+0x54>)
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	f003 fa54 	bl	8004672 <HAL_UART_Transmit>
 80011ca:	4603      	mov	r3, r0
 80011cc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <_write+0x38>
      return len;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	e008      	b.n	80011ea <_write+0x4a>
    else
      return EIO;
 80011d8:	2305      	movs	r3, #5
 80011da:	e006      	b.n	80011ea <_write+0x4a>
  }
  errno = EBADF;
 80011dc:	f003 fcac 	bl	8004b38 <__errno>
 80011e0:	4602      	mov	r2, r0
 80011e2:	2309      	movs	r3, #9
 80011e4:	6013      	str	r3, [r2, #0]
  return -1;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000140 	.word	0x20000140

080011f8 <_close>:

int _close(int fd) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db04      	blt.n	8001210 <_close+0x18>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b02      	cmp	r3, #2
 800120a:	dc01      	bgt.n	8001210 <_close+0x18>
    return 0;
 800120c:	2300      	movs	r3, #0
 800120e:	e006      	b.n	800121e <_close+0x26>

  errno = EBADF;
 8001210:	f003 fc92 	bl	8004b38 <__errno>
 8001214:	4602      	mov	r2, r0
 8001216:	2309      	movs	r3, #9
 8001218:	6013      	str	r3, [r2, #0]
  return -1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001232:	f003 fc81 	bl	8004b38 <__errno>
 8001236:	4602      	mov	r2, r0
 8001238:	2309      	movs	r3, #9
 800123a:	6013      	str	r3, [r2, #0]
  return -1;
 800123c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_read>:

int _read(int fd, char* ptr, int len) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d110      	bne.n	800127c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <_read+0x4c>)
 800125c:	6818      	ldr	r0, [r3, #0]
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	2201      	movs	r2, #1
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	f003 fa9d 	bl	80047a4 <HAL_UART_Receive>
 800126a:	4603      	mov	r3, r0
 800126c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <_read+0x30>
      return 1;
 8001274:	2301      	movs	r3, #1
 8001276:	e008      	b.n	800128a <_read+0x42>
    else
      return EIO;
 8001278:	2305      	movs	r3, #5
 800127a:	e006      	b.n	800128a <_read+0x42>
  }
  errno = EBADF;
 800127c:	f003 fc5c 	bl	8004b38 <__errno>
 8001280:	4602      	mov	r2, r0
 8001282:	2309      	movs	r3, #9
 8001284:	6013      	str	r3, [r2, #0]
  return -1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000140 	.word	0x20000140

08001298 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db08      	blt.n	80012ba <_fstat+0x22>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	dc05      	bgt.n	80012ba <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012b4:	605a      	str	r2, [r3, #4]
    return 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e005      	b.n	80012c6 <_fstat+0x2e>
  }

  errno = EBADF;
 80012ba:	f003 fc3d 	bl	8004b38 <__errno>
 80012be:	4602      	mov	r2, r0
 80012c0:	2309      	movs	r3, #9
 80012c2:	6013      	str	r3, [r2, #0]
  return 0;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <HAL_MspInit+0x7c>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	4a1c      	ldr	r2, [pc, #112]	; (800134c <HAL_MspInit+0x7c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6193      	str	r3, [r2, #24]
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_MspInit+0x7c>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_MspInit+0x7c>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a16      	ldr	r2, [pc, #88]	; (800134c <HAL_MspInit+0x7c>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_MspInit+0x7c>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2001      	movs	r0, #1
 800130c:	f001 f815 	bl	800233a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001310:	2001      	movs	r0, #1
 8001312:	f001 f82e 	bl	8002372 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2004      	movs	r0, #4
 800131c:	f001 f80d 	bl	800233a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001320:	2004      	movs	r0, #4
 8001322:	f001 f826 	bl	8002372 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_MspInit+0x80>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <HAL_MspInit+0x80>)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000
 8001350:	40010000 	.word	0x40010000

08001354 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	; 0x30
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	2019      	movs	r0, #25
 800136a:	f000 ffe6 	bl	800233a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800136e:	2019      	movs	r0, #25
 8001370:	f000 ffff 	bl	8002372 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <HAL_InitTick+0x9c>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <HAL_InitTick+0x9c>)
 800137a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_InitTick+0x9c>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800138c:	f107 0210 	add.w	r2, r7, #16
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f002 f984 	bl	80036a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800139c:	f002 f96e 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 80013a0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80013a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a4:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <HAL_InitTick+0xa0>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	0c9b      	lsrs	r3, r3, #18
 80013ac:	3b01      	subs	r3, #1
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_InitTick+0xa4>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <HAL_InitTick+0xa8>)
 80013b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <HAL_InitTick+0xa4>)
 80013b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013be:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <HAL_InitTick+0xa4>)
 80013c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_InitTick+0xa4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_InitTick+0xa4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80013d0:	4809      	ldr	r0, [pc, #36]	; (80013f8 <HAL_InitTick+0xa4>)
 80013d2:	f002 fab1 	bl	8003938 <HAL_TIM_Base_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d104      	bne.n	80013e6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80013dc:	4806      	ldr	r0, [pc, #24]	; (80013f8 <HAL_InitTick+0xa4>)
 80013de:	f002 fad6 	bl	800398e <HAL_TIM_Base_Start_IT>
 80013e2:	4603      	mov	r3, r0
 80013e4:	e000      	b.n	80013e8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3730      	adds	r7, #48	; 0x30
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	431bde83 	.word	0x431bde83
 80013f8:	20000158 	.word	0x20000158
 80013fc:	40012c00 	.word	0x40012c00

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <HardFault_Handler+0x4>

08001412 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <MemManage_Handler+0x4>

08001418 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <BusFault_Handler+0x4>

0800141e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <UsageFault_Handler+0x4>

08001424 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001458:	f001 fd0e 	bl	8002e78 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <RTC_IRQHandler+0x10>)
 8001466:	f002 fa21 	bl	80038ac <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000144 	.word	0x20000144

08001474 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001478:	f001 f978 	bl	800276c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}

08001480 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <DMA1_Channel1_IRQHandler+0x10>)
 8001486:	f001 f83d 	bl	8002504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200000dc 	.word	0x200000dc

08001494 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001498:	2040      	movs	r0, #64	; 0x40
 800149a:	f001 fc8d 	bl	8002db8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800149e:	2080      	movs	r0, #128	; 0x80
 80014a0:	f001 fc8a 	bl	8002db8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80014a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014a8:	f001 fc86 	bl	8002db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <TIM1_UP_IRQHandler+0x10>)
 80014b6:	f002 faeb 	bl	8003a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000158 	.word	0x20000158

080014c4 <_sbrk>:
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	4a14      	ldr	r2, [pc, #80]	; (8001520 <_sbrk+0x5c>)
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <_sbrk+0x60>)
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_sbrk+0x22>
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <_sbrk+0x64>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <_sbrk+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <_sbrk+0x40>
 80014f4:	f003 fb20 	bl	8004b38 <__errno>
 80014f8:	4602      	mov	r2, r0
 80014fa:	230c      	movs	r3, #12
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	e009      	b.n	8001518 <_sbrk+0x54>
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <_sbrk+0x64>)
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20005000 	.word	0x20005000
 8001524:	00000400 	.word	0x00000400
 8001528:	200000a0 	.word	0x200000a0
 800152c:	20000288 	.word	0x20000288

08001530 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <SystemInit+0x5c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a14      	ldr	r2, [pc, #80]	; (800158c <SystemInit+0x5c>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <SystemInit+0x5c>)
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	4911      	ldr	r1, [pc, #68]	; (800158c <SystemInit+0x5c>)
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <SystemInit+0x60>)
 8001548:	4013      	ands	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <SystemInit+0x5c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <SystemInit+0x5c>)
 8001552:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <SystemInit+0x5c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0a      	ldr	r2, [pc, #40]	; (800158c <SystemInit+0x5c>)
 8001562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001566:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <SystemInit+0x5c>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <SystemInit+0x5c>)
 800156e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001572:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <SystemInit+0x5c>)
 8001576:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800157a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SystemInit+0x64>)
 800157e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001582:	609a      	str	r2, [r3, #8]
#endif 
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	40021000 	.word	0x40021000
 8001590:	f8ff0000 	.word	0xf8ff0000
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08e      	sub	sp, #56	; 0x38
 800159c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ac:	f107 0320 	add.w	r3, r7, #32
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
 80015c4:	615a      	str	r2, [r3, #20]
 80015c6:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80015c8:	4b2c      	ldr	r3, [pc, #176]	; (800167c <MX_TIM3_Init+0xe4>)
 80015ca:	4a2d      	ldr	r2, [pc, #180]	; (8001680 <MX_TIM3_Init+0xe8>)
 80015cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80015ce:	4b2b      	ldr	r3, [pc, #172]	; (800167c <MX_TIM3_Init+0xe4>)
 80015d0:	2247      	movs	r2, #71	; 0x47
 80015d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d4:	4b29      	ldr	r3, [pc, #164]	; (800167c <MX_TIM3_Init+0xe4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80015da:	4b28      	ldr	r3, [pc, #160]	; (800167c <MX_TIM3_Init+0xe4>)
 80015dc:	2263      	movs	r2, #99	; 0x63
 80015de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e0:	4b26      	ldr	r3, [pc, #152]	; (800167c <MX_TIM3_Init+0xe4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e6:	4b25      	ldr	r3, [pc, #148]	; (800167c <MX_TIM3_Init+0xe4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015ec:	4823      	ldr	r0, [pc, #140]	; (800167c <MX_TIM3_Init+0xe4>)
 80015ee:	f002 f9a3 	bl	8003938 <HAL_TIM_Base_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80015f8:	f7ff fc7a 	bl	8000ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001606:	4619      	mov	r1, r3
 8001608:	481c      	ldr	r0, [pc, #112]	; (800167c <MX_TIM3_Init+0xe4>)
 800160a:	f002 fc0f 	bl	8003e2c <HAL_TIM_ConfigClockSource>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001614:	f7ff fc6c 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001618:	4818      	ldr	r0, [pc, #96]	; (800167c <MX_TIM3_Init+0xe4>)
 800161a:	f002 f9db 	bl	80039d4 <HAL_TIM_PWM_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001624:	f7ff fc64 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001630:	f107 0320 	add.w	r3, r7, #32
 8001634:	4619      	mov	r1, r3
 8001636:	4811      	ldr	r0, [pc, #68]	; (800167c <MX_TIM3_Init+0xe4>)
 8001638:	f002 ff78 	bl	800452c <HAL_TIMEx_MasterConfigSynchronization>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001642:	f7ff fc55 	bl	8000ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001646:	2360      	movs	r3, #96	; 0x60
 8001648:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2204      	movs	r2, #4
 800165a:	4619      	mov	r1, r3
 800165c:	4807      	ldr	r0, [pc, #28]	; (800167c <MX_TIM3_Init+0xe4>)
 800165e:	f002 fb1f 	bl	8003ca0 <HAL_TIM_PWM_ConfigChannel>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001668:	f7ff fc42 	bl	8000ef0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800166c:	4803      	ldr	r0, [pc, #12]	; (800167c <MX_TIM3_Init+0xe4>)
 800166e:	f000 f89d 	bl	80017ac <HAL_TIM_MspPostInit>

}
 8001672:	bf00      	nop
 8001674:	3738      	adds	r7, #56	; 0x38
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200001d8 	.word	0x200001d8
 8001680:	40000400 	.word	0x40000400

08001684 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168a:	f107 0320 	add.w	r3, r7, #32
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]
 80016a2:	615a      	str	r2, [r3, #20]
 80016a4:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <MX_TIM4_Init+0xa8>)
 80016a8:	4a21      	ldr	r2, [pc, #132]	; (8001730 <MX_TIM4_Init+0xac>)
 80016aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <MX_TIM4_Init+0xa8>)
 80016ae:	2247      	movs	r2, #71	; 0x47
 80016b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b2:	4b1e      	ldr	r3, [pc, #120]	; (800172c <MX_TIM4_Init+0xa8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80016b8:	4b1c      	ldr	r3, [pc, #112]	; (800172c <MX_TIM4_Init+0xa8>)
 80016ba:	2263      	movs	r2, #99	; 0x63
 80016bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b1b      	ldr	r3, [pc, #108]	; (800172c <MX_TIM4_Init+0xa8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <MX_TIM4_Init+0xa8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016ca:	4818      	ldr	r0, [pc, #96]	; (800172c <MX_TIM4_Init+0xa8>)
 80016cc:	f002 f982 	bl	80039d4 <HAL_TIM_PWM_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80016d6:	f7ff fc0b 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016e2:	f107 0320 	add.w	r3, r7, #32
 80016e6:	4619      	mov	r1, r3
 80016e8:	4810      	ldr	r0, [pc, #64]	; (800172c <MX_TIM4_Init+0xa8>)
 80016ea:	f002 ff1f 	bl	800452c <HAL_TIMEx_MasterConfigSynchronization>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80016f4:	f7ff fbfc 	bl	8000ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f8:	2360      	movs	r3, #96	; 0x60
 80016fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2208      	movs	r2, #8
 800170c:	4619      	mov	r1, r3
 800170e:	4807      	ldr	r0, [pc, #28]	; (800172c <MX_TIM4_Init+0xa8>)
 8001710:	f002 fac6 	bl	8003ca0 <HAL_TIM_PWM_ConfigChannel>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800171a:	f7ff fbe9 	bl	8000ef0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800171e:	4803      	ldr	r0, [pc, #12]	; (800172c <MX_TIM4_Init+0xa8>)
 8001720:	f000 f844 	bl	80017ac <HAL_TIM_MspPostInit>

}
 8001724:	bf00      	nop
 8001726:	3728      	adds	r7, #40	; 0x28
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000198 	.word	0x20000198
 8001730:	40000800 	.word	0x40000800

08001734 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a09      	ldr	r2, [pc, #36]	; (8001768 <HAL_TIM_Base_MspInit+0x34>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d10b      	bne.n	800175e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_TIM_Base_MspInit+0x38>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a08      	ldr	r2, [pc, #32]	; (800176c <HAL_TIM_Base_MspInit+0x38>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_TIM_Base_MspInit+0x38>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	40000400 	.word	0x40000400
 800176c:	40021000 	.word	0x40021000

08001770 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <HAL_TIM_PWM_MspInit+0x34>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d10b      	bne.n	800179a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_TIM_PWM_MspInit+0x38>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	4a08      	ldr	r2, [pc, #32]	; (80017a8 <HAL_TIM_PWM_MspInit+0x38>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	61d3      	str	r3, [r2, #28]
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_TIM_PWM_MspInit+0x38>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	40000800 	.word	0x40000800
 80017a8:	40021000 	.word	0x40021000

080017ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a28      	ldr	r2, [pc, #160]	; (8001868 <HAL_TIM_MspPostInit+0xbc>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d12a      	bne.n	8001822 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017cc:	4b27      	ldr	r3, [pc, #156]	; (800186c <HAL_TIM_MspPostInit+0xc0>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a26      	ldr	r2, [pc, #152]	; (800186c <HAL_TIM_MspPostInit+0xc0>)
 80017d2:	f043 0308 	orr.w	r3, r3, #8
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_TIM_MspPostInit+0xc0>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = INT3_PWM_TIM3_CH2_MOTOR_2_Pin;
 80017e4:	2320      	movs	r3, #32
 80017e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2302      	movs	r3, #2
 80017ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(INT3_PWM_TIM3_CH2_MOTOR_2_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	481e      	ldr	r0, [pc, #120]	; (8001870 <HAL_TIM_MspPostInit+0xc4>)
 80017f8:	f001 f93c 	bl	8002a74 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <HAL_TIM_MspPostInit+0xc8>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	4a16      	ldr	r2, [pc, #88]	; (8001874 <HAL_TIM_MspPostInit+0xc8>)
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001820:	e01d      	b.n	800185e <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM4)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a14      	ldr	r2, [pc, #80]	; (8001878 <HAL_TIM_MspPostInit+0xcc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d118      	bne.n	800185e <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_TIM_MspPostInit+0xc0>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a0e      	ldr	r2, [pc, #56]	; (800186c <HAL_TIM_MspPostInit+0xc0>)
 8001832:	f043 0308 	orr.w	r3, r3, #8
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_TIM_MspPostInit+0xc0>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INT1_PWM_TIM4_CH3_MOTOR_1_Pin;
 8001844:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2302      	movs	r3, #2
 8001850:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(INT1_PWM_TIM4_CH3_MOTOR_1_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4619      	mov	r1, r3
 8001858:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_TIM_MspPostInit+0xc4>)
 800185a:	f001 f90b 	bl	8002a74 <HAL_GPIO_Init>
}
 800185e:	bf00      	nop
 8001860:	3728      	adds	r7, #40	; 0x28
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40000400 	.word	0x40000400
 800186c:	40021000 	.word	0x40021000
 8001870:	40010c00 	.word	0x40010c00
 8001874:	40010000 	.word	0x40010000
 8001878:	40000800 	.word	0x40000800

0800187c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <MX_USART2_UART_Init+0x50>)
 8001884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 8001888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800188c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 80018a2:	220c      	movs	r2, #12
 80018a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 80018b4:	f002 fe90 	bl	80045d8 <HAL_UART_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018be:	f7ff fb17 	bl	8000ef0 <Error_Handler>
  }

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000218 	.word	0x20000218
 80018cc:	40004400 	.word	0x40004400

080018d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a1b      	ldr	r2, [pc, #108]	; (8001958 <HAL_UART_MspInit+0x88>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d12f      	bne.n	8001950 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <HAL_UART_MspInit+0x8c>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	4a19      	ldr	r2, [pc, #100]	; (800195c <HAL_UART_MspInit+0x8c>)
 80018f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fa:	61d3      	str	r3, [r2, #28]
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <HAL_UART_MspInit+0x8c>)
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <HAL_UART_MspInit+0x8c>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a13      	ldr	r2, [pc, #76]	; (800195c <HAL_UART_MspInit+0x8c>)
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_UART_MspInit+0x8c>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001920:	2304      	movs	r3, #4
 8001922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	4619      	mov	r1, r3
 8001932:	480b      	ldr	r0, [pc, #44]	; (8001960 <HAL_UART_MspInit+0x90>)
 8001934:	f001 f89e 	bl	8002a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001938:	2308      	movs	r3, #8
 800193a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	4619      	mov	r1, r3
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <HAL_UART_MspInit+0x90>)
 800194c:	f001 f892 	bl	8002a74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001950:	bf00      	nop
 8001952:	3720      	adds	r7, #32
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40004400 	.word	0x40004400
 800195c:	40021000 	.word	0x40021000
 8001960:	40010800 	.word	0x40010800

08001964 <Reset_Handler>:
 8001964:	2100      	movs	r1, #0
 8001966:	e003      	b.n	8001970 <LoopCopyDataInit>

08001968 <CopyDataInit>:
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <LoopFillZerobss+0x14>)
 800196a:	585b      	ldr	r3, [r3, r1]
 800196c:	5043      	str	r3, [r0, r1]
 800196e:	3104      	adds	r1, #4

08001970 <LoopCopyDataInit>:
 8001970:	480a      	ldr	r0, [pc, #40]	; (800199c <LoopFillZerobss+0x18>)
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <LoopFillZerobss+0x1c>)
 8001974:	1842      	adds	r2, r0, r1
 8001976:	429a      	cmp	r2, r3
 8001978:	d3f6      	bcc.n	8001968 <CopyDataInit>
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <LoopFillZerobss+0x20>)
 800197c:	e002      	b.n	8001984 <LoopFillZerobss>

0800197e <FillZerobss>:
 800197e:	2300      	movs	r3, #0
 8001980:	f842 3b04 	str.w	r3, [r2], #4

08001984 <LoopFillZerobss>:
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <LoopFillZerobss+0x24>)
 8001986:	429a      	cmp	r2, r3
 8001988:	d3f9      	bcc.n	800197e <FillZerobss>
 800198a:	f7ff fdd1 	bl	8001530 <SystemInit>
 800198e:	f003 f8d9 	bl	8004b44 <__libc_init_array>
 8001992:	f7fe ffdd 	bl	8000950 <main>
 8001996:	4770      	bx	lr
 8001998:	08006110 	.word	0x08006110
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000078 	.word	0x20000078
 80019a4:	20000078 	.word	0x20000078
 80019a8:	20000284 	.word	0x20000284

080019ac <ADC1_2_IRQHandler>:
 80019ac:	e7fe      	b.n	80019ac <ADC1_2_IRQHandler>
	...

080019b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_Init+0x28>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <HAL_Init+0x28>)
 80019ba:	f043 0310 	orr.w	r3, r3, #16
 80019be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c0:	2003      	movs	r0, #3
 80019c2:	f000 fcaf 	bl	8002324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c6:	2000      	movs	r0, #0
 80019c8:	f7ff fcc4 	bl	8001354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019cc:	f7ff fc80 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40022000 	.word	0x40022000

080019dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_IncTick+0x1c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_IncTick+0x20>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a03      	ldr	r2, [pc, #12]	; (80019fc <HAL_IncTick+0x20>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	20000010 	.word	0x20000010
 80019fc:	20000258 	.word	0x20000258

08001a00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <HAL_GetTick+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	20000258 	.word	0x20000258

08001a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff fff0 	bl	8001a00 <HAL_GetTick>
 8001a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2c:	d005      	beq.n	8001a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_Delay+0x40>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a3a:	bf00      	nop
 8001a3c:	f7ff ffe0 	bl	8001a00 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d8f7      	bhi.n	8001a3c <HAL_Delay+0x28>
  {
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000010 	.word	0x20000010

08001a58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e0be      	b.n	8001bf8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d109      	bne.n	8001a9c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7fe fe3a 	bl	8000710 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 faf7 	bl	8002090 <ADC_ConversionStop_Disable>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 8099 	bne.w	8001be6 <HAL_ADC_Init+0x18e>
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f040 8095 	bne.w	8001be6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ac4:	f023 0302 	bic.w	r3, r3, #2
 8001ac8:	f043 0202 	orr.w	r2, r3, #2
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ad8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7b1b      	ldrb	r3, [r3, #12]
 8001ade:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ae0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001af0:	d003      	beq.n	8001afa <HAL_ADC_Init+0xa2>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d102      	bne.n	8001b00 <HAL_ADC_Init+0xa8>
 8001afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001afe:	e000      	b.n	8001b02 <HAL_ADC_Init+0xaa>
 8001b00:	2300      	movs	r3, #0
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7d1b      	ldrb	r3, [r3, #20]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d119      	bne.n	8001b44 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7b1b      	ldrb	r3, [r3, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d109      	bne.n	8001b2c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	035a      	lsls	r2, r3, #13
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	e00b      	b.n	8001b44 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	f043 0220 	orr.w	r2, r3, #32
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	f043 0201 	orr.w	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <HAL_ADC_Init+0x1a8>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	68b9      	ldr	r1, [r7, #8]
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b74:	d003      	beq.n	8001b7e <HAL_ADC_Init+0x126>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d104      	bne.n	8001b88 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	051b      	lsls	r3, r3, #20
 8001b86:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <HAL_ADC_Init+0x1ac>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d10b      	bne.n	8001bc4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	f023 0303 	bic.w	r3, r3, #3
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bc2:	e018      	b.n	8001bf6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc8:	f023 0312 	bic.w	r3, r3, #18
 8001bcc:	f043 0210 	orr.w	r2, r3, #16
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	f043 0201 	orr.w	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001be4:	e007      	b.n	8001bf6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	f043 0210 	orr.w	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	ffe1f7fd 	.word	0xffe1f7fd
 8001c04:	ff1f0efe 	.word	0xff1f0efe

08001c08 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a64      	ldr	r2, [pc, #400]	; (8001db0 <HAL_ADC_Start_DMA+0x1a8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d004      	beq.n	8001c2c <HAL_ADC_Start_DMA+0x24>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a63      	ldr	r2, [pc, #396]	; (8001db4 <HAL_ADC_Start_DMA+0x1ac>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d106      	bne.n	8001c3a <HAL_ADC_Start_DMA+0x32>
 8001c2c:	4b60      	ldr	r3, [pc, #384]	; (8001db0 <HAL_ADC_Start_DMA+0x1a8>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f040 80b3 	bne.w	8001da0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_ADC_Start_DMA+0x40>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e0ae      	b.n	8001da6 <HAL_ADC_Start_DMA+0x19e>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 f9cb 	bl	8001fec <ADC_Enable>
 8001c56:	4603      	mov	r3, r0
 8001c58:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f040 809a 	bne.w	8001d96 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a4e      	ldr	r2, [pc, #312]	; (8001db4 <HAL_ADC_Start_DMA+0x1ac>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d105      	bne.n	8001c8c <HAL_ADC_Start_DMA+0x84>
 8001c80:	4b4b      	ldr	r3, [pc, #300]	; (8001db0 <HAL_ADC_Start_DMA+0x1a8>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d115      	bne.n	8001cb8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d026      	beq.n	8001cf4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001caa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cb6:	e01d      	b.n	8001cf4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a39      	ldr	r2, [pc, #228]	; (8001db0 <HAL_ADC_Start_DMA+0x1a8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d004      	beq.n	8001cd8 <HAL_ADC_Start_DMA+0xd0>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a38      	ldr	r2, [pc, #224]	; (8001db4 <HAL_ADC_Start_DMA+0x1ac>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d10d      	bne.n	8001cf4 <HAL_ADC_Start_DMA+0xec>
 8001cd8:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <HAL_ADC_Start_DMA+0x1a8>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d007      	beq.n	8001cf4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	f023 0206 	bic.w	r2, r3, #6
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d0c:	e002      	b.n	8001d14 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4a25      	ldr	r2, [pc, #148]	; (8001db8 <HAL_ADC_Start_DMA+0x1b0>)
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4a24      	ldr	r2, [pc, #144]	; (8001dbc <HAL_ADC_Start_DMA+0x1b4>)
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a23      	ldr	r2, [pc, #140]	; (8001dc0 <HAL_ADC_Start_DMA+0x1b8>)
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0202 	mvn.w	r2, #2
 8001d3c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d4c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a18      	ldr	r0, [r3, #32]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	334c      	adds	r3, #76	; 0x4c
 8001d58:	4619      	mov	r1, r3
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f000 fb71 	bl	8002444 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d6c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d70:	d108      	bne.n	8001d84 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d80:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d82:	e00f      	b.n	8001da4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d92:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d94:	e006      	b.n	8001da4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001d9e:	e001      	b.n	8001da4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40012400 	.word	0x40012400
 8001db4:	40012800 	.word	0x40012800
 8001db8:	08002105 	.word	0x08002105
 8001dbc:	08002181 	.word	0x08002181
 8001dc0:	0800219d 	.word	0x0800219d

08001dc4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x20>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e0dc      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x1da>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b06      	cmp	r3, #6
 8001e2a:	d81c      	bhi.n	8001e66 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3b05      	subs	r3, #5
 8001e3e:	221f      	movs	r2, #31
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4019      	ands	r1, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	3b05      	subs	r3, #5
 8001e58:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	635a      	str	r2, [r3, #52]	; 0x34
 8001e64:	e03c      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b0c      	cmp	r3, #12
 8001e6c:	d81c      	bhi.n	8001ea8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3b23      	subs	r3, #35	; 0x23
 8001e80:	221f      	movs	r2, #31
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	4019      	ands	r1, r3
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	3b23      	subs	r3, #35	; 0x23
 8001e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ea6:	e01b      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3b41      	subs	r3, #65	; 0x41
 8001eba:	221f      	movs	r2, #31
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	4019      	ands	r1, r3
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3b41      	subs	r3, #65	; 0x41
 8001ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b09      	cmp	r3, #9
 8001ee6:	d91c      	bls.n	8001f22 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68d9      	ldr	r1, [r3, #12]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3b1e      	subs	r3, #30
 8001efa:	2207      	movs	r2, #7
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	4019      	ands	r1, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6898      	ldr	r0, [r3, #8]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	3b1e      	subs	r3, #30
 8001f14:	fa00 f203 	lsl.w	r2, r0, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	e019      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6919      	ldr	r1, [r3, #16]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	2207      	movs	r2, #7
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	4019      	ands	r1, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6898      	ldr	r0, [r3, #8]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4613      	mov	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b10      	cmp	r3, #16
 8001f5c:	d003      	beq.n	8001f66 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f62:	2b11      	cmp	r3, #17
 8001f64:	d132      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1d      	ldr	r2, [pc, #116]	; (8001fe0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d125      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d126      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f8c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b10      	cmp	r3, #16
 8001f94:	d11a      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f96:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	0c9a      	lsrs	r2, r3, #18
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fac:	e002      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f9      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x1b2>
 8001fba:	e007      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	f043 0220 	orr.w	r2, r3, #32
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	40012400 	.word	0x40012400
 8001fe4:	20000008 	.word	0x20000008
 8001fe8:	431bde83 	.word	0x431bde83

08001fec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b01      	cmp	r3, #1
 8002008:	d039      	beq.n	800207e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0201 	orr.w	r2, r2, #1
 8002018:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800201a:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <ADC_Enable+0x9c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1b      	ldr	r2, [pc, #108]	; (800208c <ADC_Enable+0xa0>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	0c9b      	lsrs	r3, r3, #18
 8002026:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002028:	e002      	b.n	8002030 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3b01      	subs	r3, #1
 800202e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f9      	bne.n	800202a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002036:	f7ff fce3 	bl	8001a00 <HAL_GetTick>
 800203a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800203c:	e018      	b.n	8002070 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800203e:	f7ff fcdf 	bl	8001a00 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d911      	bls.n	8002070 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	f043 0210 	orr.w	r2, r3, #16
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	f043 0201 	orr.w	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e007      	b.n	8002080 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b01      	cmp	r3, #1
 800207c:	d1df      	bne.n	800203e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000008 	.word	0x20000008
 800208c:	431bde83 	.word	0x431bde83

08002090 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d127      	bne.n	80020fa <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0201 	bic.w	r2, r2, #1
 80020b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020ba:	f7ff fca1 	bl	8001a00 <HAL_GetTick>
 80020be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020c0:	e014      	b.n	80020ec <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020c2:	f7ff fc9d 	bl	8001a00 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d90d      	bls.n	80020ec <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	f043 0210 	orr.w	r2, r3, #16
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	f043 0201 	orr.w	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e007      	b.n	80020fc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d0e3      	beq.n	80020c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800211a:	2b00      	cmp	r3, #0
 800211c:	d127      	bne.n	800216e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002134:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002138:	d115      	bne.n	8002166 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800213e:	2b00      	cmp	r3, #0
 8002140:	d111      	bne.n	8002166 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d105      	bne.n	8002166 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	f043 0201 	orr.w	r2, r3, #1
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f7ff fe2c 	bl	8001dc4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800216c:	e004      	b.n	8002178 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
}
 8002178:	bf00      	nop
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f7ff fe21 	bl	8001dd6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	f043 0204 	orr.w	r2, r3, #4
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f7ff fe10 	bl	8001de8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021c8:	bf00      	nop
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021ec:	4013      	ands	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002202:	4a04      	ldr	r2, [pc, #16]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	60d3      	str	r3, [r2, #12]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <__NVIC_GetPriorityGrouping+0x18>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	f003 0307 	and.w	r3, r3, #7
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	2b00      	cmp	r3, #0
 8002244:	db0b      	blt.n	800225e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	4906      	ldr	r1, [pc, #24]	; (8002268 <__NVIC_EnableIRQ+0x34>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	2001      	movs	r0, #1
 8002256:	fa00 f202 	lsl.w	r2, r0, r2
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	e000e100 	.word	0xe000e100

0800226c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	6039      	str	r1, [r7, #0]
 8002276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	2b00      	cmp	r3, #0
 800227e:	db0a      	blt.n	8002296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	490c      	ldr	r1, [pc, #48]	; (80022b8 <__NVIC_SetPriority+0x4c>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	0112      	lsls	r2, r2, #4
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	440b      	add	r3, r1
 8002290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002294:	e00a      	b.n	80022ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4908      	ldr	r1, [pc, #32]	; (80022bc <__NVIC_SetPriority+0x50>)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	3b04      	subs	r3, #4
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	440b      	add	r3, r1
 80022aa:	761a      	strb	r2, [r3, #24]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000e100 	.word	0xe000e100
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f1c3 0307 	rsb	r3, r3, #7
 80022da:	2b04      	cmp	r3, #4
 80022dc:	bf28      	it	cs
 80022de:	2304      	movcs	r3, #4
 80022e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3304      	adds	r3, #4
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d902      	bls.n	80022f0 <NVIC_EncodePriority+0x30>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3b03      	subs	r3, #3
 80022ee:	e000      	b.n	80022f2 <NVIC_EncodePriority+0x32>
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43da      	mvns	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	401a      	ands	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	43d9      	mvns	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	4313      	orrs	r3, r2
         );
}
 800231a:	4618      	mov	r0, r3
 800231c:	3724      	adds	r7, #36	; 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ff4f 	bl	80021d0 <__NVIC_SetPriorityGrouping>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800234c:	f7ff ff64 	bl	8002218 <__NVIC_GetPriorityGrouping>
 8002350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f7ff ffb2 	bl	80022c0 <NVIC_EncodePriority>
 800235c:	4602      	mov	r2, r0
 800235e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff81 	bl	800226c <__NVIC_SetPriority>
}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff57 	bl	8002234 <__NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e043      	b.n	800242e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_DMA_Init+0xa8>)
 80023ae:	4413      	add	r3, r2
 80023b0:	4a22      	ldr	r2, [pc, #136]	; (800243c <HAL_DMA_Init+0xac>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	009a      	lsls	r2, r3, #2
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a1f      	ldr	r2, [pc, #124]	; (8002440 <HAL_DMA_Init+0xb0>)
 80023c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002400:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	bffdfff8 	.word	0xbffdfff8
 800243c:	cccccccd 	.word	0xcccccccd
 8002440:	40020000 	.word	0x40020000

08002444 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 3020 	ldrb.w	r3, [r3, #32]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_DMA_Start_IT+0x20>
 8002460:	2302      	movs	r3, #2
 8002462:	e04a      	b.n	80024fa <HAL_DMA_Start_IT+0xb6>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002472:	2b01      	cmp	r3, #1
 8002474:	d13a      	bne.n	80024ec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2202      	movs	r2, #2
 800247a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 f938 	bl	8002710 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 020e 	orr.w	r2, r2, #14
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	e00f      	b.n	80024da <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0204 	bic.w	r2, r2, #4
 80024c8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 020a 	orr.w	r2, r2, #10
 80024d8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0201 	orr.w	r2, r2, #1
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	e005      	b.n	80024f8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
 80024f6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	2204      	movs	r2, #4
 8002522:	409a      	lsls	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d04f      	beq.n	80025cc <HAL_DMA_IRQHandler+0xc8>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b00      	cmp	r3, #0
 8002534:	d04a      	beq.n	80025cc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0204 	bic.w	r2, r2, #4
 8002552:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a66      	ldr	r2, [pc, #408]	; (80026f4 <HAL_DMA_IRQHandler+0x1f0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d029      	beq.n	80025b2 <HAL_DMA_IRQHandler+0xae>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a65      	ldr	r2, [pc, #404]	; (80026f8 <HAL_DMA_IRQHandler+0x1f4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d022      	beq.n	80025ae <HAL_DMA_IRQHandler+0xaa>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a63      	ldr	r2, [pc, #396]	; (80026fc <HAL_DMA_IRQHandler+0x1f8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d01a      	beq.n	80025a8 <HAL_DMA_IRQHandler+0xa4>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a62      	ldr	r2, [pc, #392]	; (8002700 <HAL_DMA_IRQHandler+0x1fc>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d012      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x9e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a60      	ldr	r2, [pc, #384]	; (8002704 <HAL_DMA_IRQHandler+0x200>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00a      	beq.n	800259c <HAL_DMA_IRQHandler+0x98>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a5f      	ldr	r2, [pc, #380]	; (8002708 <HAL_DMA_IRQHandler+0x204>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d102      	bne.n	8002596 <HAL_DMA_IRQHandler+0x92>
 8002590:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002594:	e00e      	b.n	80025b4 <HAL_DMA_IRQHandler+0xb0>
 8002596:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800259a:	e00b      	b.n	80025b4 <HAL_DMA_IRQHandler+0xb0>
 800259c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025a0:	e008      	b.n	80025b4 <HAL_DMA_IRQHandler+0xb0>
 80025a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025a6:	e005      	b.n	80025b4 <HAL_DMA_IRQHandler+0xb0>
 80025a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ac:	e002      	b.n	80025b4 <HAL_DMA_IRQHandler+0xb0>
 80025ae:	2340      	movs	r3, #64	; 0x40
 80025b0:	e000      	b.n	80025b4 <HAL_DMA_IRQHandler+0xb0>
 80025b2:	2304      	movs	r3, #4
 80025b4:	4a55      	ldr	r2, [pc, #340]	; (800270c <HAL_DMA_IRQHandler+0x208>)
 80025b6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8094 	beq.w	80026ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80025ca:	e08e      	b.n	80026ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	2202      	movs	r2, #2
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d056      	beq.n	800268a <HAL_DMA_IRQHandler+0x186>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d051      	beq.n	800268a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10b      	bne.n	800260c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 020a 	bic.w	r2, r2, #10
 8002602:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a38      	ldr	r2, [pc, #224]	; (80026f4 <HAL_DMA_IRQHandler+0x1f0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d029      	beq.n	800266a <HAL_DMA_IRQHandler+0x166>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a37      	ldr	r2, [pc, #220]	; (80026f8 <HAL_DMA_IRQHandler+0x1f4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d022      	beq.n	8002666 <HAL_DMA_IRQHandler+0x162>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a35      	ldr	r2, [pc, #212]	; (80026fc <HAL_DMA_IRQHandler+0x1f8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01a      	beq.n	8002660 <HAL_DMA_IRQHandler+0x15c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a34      	ldr	r2, [pc, #208]	; (8002700 <HAL_DMA_IRQHandler+0x1fc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d012      	beq.n	800265a <HAL_DMA_IRQHandler+0x156>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a32      	ldr	r2, [pc, #200]	; (8002704 <HAL_DMA_IRQHandler+0x200>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00a      	beq.n	8002654 <HAL_DMA_IRQHandler+0x150>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a31      	ldr	r2, [pc, #196]	; (8002708 <HAL_DMA_IRQHandler+0x204>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d102      	bne.n	800264e <HAL_DMA_IRQHandler+0x14a>
 8002648:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800264c:	e00e      	b.n	800266c <HAL_DMA_IRQHandler+0x168>
 800264e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002652:	e00b      	b.n	800266c <HAL_DMA_IRQHandler+0x168>
 8002654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002658:	e008      	b.n	800266c <HAL_DMA_IRQHandler+0x168>
 800265a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800265e:	e005      	b.n	800266c <HAL_DMA_IRQHandler+0x168>
 8002660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002664:	e002      	b.n	800266c <HAL_DMA_IRQHandler+0x168>
 8002666:	2320      	movs	r3, #32
 8002668:	e000      	b.n	800266c <HAL_DMA_IRQHandler+0x168>
 800266a:	2302      	movs	r3, #2
 800266c:	4a27      	ldr	r2, [pc, #156]	; (800270c <HAL_DMA_IRQHandler+0x208>)
 800266e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	d034      	beq.n	80026ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002688:	e02f      	b.n	80026ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2208      	movs	r2, #8
 8002690:	409a      	lsls	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d028      	beq.n	80026ec <HAL_DMA_IRQHandler+0x1e8>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d023      	beq.n	80026ec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 020e 	bic.w	r2, r2, #14
 80026b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	2101      	movs	r1, #1
 80026be:	fa01 f202 	lsl.w	r2, r1, r2
 80026c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d004      	beq.n	80026ec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	4798      	blx	r3
    }
  }
  return;
 80026ea:	bf00      	nop
 80026ec:	bf00      	nop
}
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40020008 	.word	0x40020008
 80026f8:	4002001c 	.word	0x4002001c
 80026fc:	40020030 	.word	0x40020030
 8002700:	40020044 	.word	0x40020044
 8002704:	40020058 	.word	0x40020058
 8002708:	4002006c 	.word	0x4002006c
 800270c:	40020000 	.word	0x40020000

08002710 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002726:	2101      	movs	r1, #1
 8002728:	fa01 f202 	lsl.w	r2, r1, r2
 800272c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b10      	cmp	r3, #16
 800273c:	d108      	bne.n	8002750 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800274e:	e007      	b.n	8002760 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	60da      	str	r2, [r3, #12]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr
	...

0800276c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002776:	4b6e      	ldr	r3, [pc, #440]	; (8002930 <HAL_FLASH_IRQHandler+0x1c4>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	d105      	bne.n	800278e <HAL_FLASH_IRQHandler+0x22>
 8002782:	4b6b      	ldr	r3, [pc, #428]	; (8002930 <HAL_FLASH_IRQHandler+0x1c4>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00e      	beq.n	80027ac <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 800278e:	4b69      	ldr	r3, [pc, #420]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8002794:	4b67      	ldr	r3, [pc, #412]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 8002796:	f04f 32ff 	mov.w	r2, #4294967295
 800279a:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 800279c:	f000 f8fa 	bl	8002994 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f8d2 	bl	800294a <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80027a6:	4b63      	ldr	r3, [pc, #396]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80027ac:	4b60      	ldr	r3, [pc, #384]	; (8002930 <HAL_FLASH_IRQHandler+0x1c4>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80a2 	beq.w	80028fe <HAL_FLASH_IRQHandler+0x192>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80027ba:	4b5d      	ldr	r3, [pc, #372]	; (8002930 <HAL_FLASH_IRQHandler+0x1c4>)
 80027bc:	2220      	movs	r2, #32
 80027be:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 80027c0:	4b5c      	ldr	r3, [pc, #368]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8099 	beq.w	80028fe <HAL_FLASH_IRQHandler+0x192>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 80027cc:	4b59      	ldr	r3, [pc, #356]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d12d      	bne.n	8002832 <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 80027d6:	4b57      	ldr	r3, [pc, #348]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	4a55      	ldr	r2, [pc, #340]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 80027de:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 80027e0:	4b54      	ldr	r3, [pc, #336]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d017      	beq.n	8002818 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 80027e8:	4b52      	ldr	r3, [pc, #328]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f8a2 	bl	8002938 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 80027f4:	4b4f      	ldr	r3, [pc, #316]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027fc:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 80027fe:	4a4d      	ldr	r2, [pc, #308]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002804:	4b4a      	ldr	r3, [pc, #296]	; (8002930 <HAL_FLASH_IRQHandler+0x1c4>)
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	4a49      	ldr	r2, [pc, #292]	; (8002930 <HAL_FLASH_IRQHandler+0x1c4>)
 800280a:	f023 0302 	bic.w	r3, r3, #2
 800280e:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f90f 	bl	8002a34 <FLASH_PageErase>
 8002816:	e072      	b.n	80028fe <HAL_FLASH_IRQHandler+0x192>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
 800281c:	607b      	str	r3, [r7, #4]
 800281e:	4a45      	ldr	r2, [pc, #276]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002824:	4b43      	ldr	r3, [pc, #268]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f884 	bl	8002938 <HAL_FLASH_EndOfOperationCallback>
 8002830:	e065      	b.n	80028fe <HAL_FLASH_IRQHandler+0x192>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002832:	4b40      	ldr	r3, [pc, #256]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d10c      	bne.n	8002856 <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800283c:	4b3c      	ldr	r3, [pc, #240]	; (8002930 <HAL_FLASH_IRQHandler+0x1c4>)
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	4a3b      	ldr	r2, [pc, #236]	; (8002930 <HAL_FLASH_IRQHandler+0x1c4>)
 8002842:	f023 0304 	bic.w	r3, r3, #4
 8002846:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8002848:	2000      	movs	r0, #0
 800284a:	f000 f875 	bl	8002938 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800284e:	4b39      	ldr	r3, [pc, #228]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e053      	b.n	80028fe <HAL_FLASH_IRQHandler+0x192>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8002856:	4b37      	ldr	r3, [pc, #220]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	4a35      	ldr	r2, [pc, #212]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 800285e:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002860:	4b34      	ldr	r3, [pc, #208]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d026      	beq.n	80028b6 <HAL_FLASH_IRQHandler+0x14a>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8002868:	4b32      	ldr	r3, [pc, #200]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	3302      	adds	r3, #2
 800286e:	4a31      	ldr	r2, [pc, #196]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 8002870:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8002872:	4b30      	ldr	r3, [pc, #192]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002878:	4b2e      	ldr	r3, [pc, #184]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 800287a:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	f04f 0400 	mov.w	r4, #0
 8002886:	0c0b      	lsrs	r3, r1, #16
 8002888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800288c:	0c14      	lsrs	r4, r2, #16
 800288e:	4a29      	ldr	r2, [pc, #164]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 8002890:	e9c2 3404 	strd	r3, r4, [r2, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002894:	4b26      	ldr	r3, [pc, #152]	; (8002930 <HAL_FLASH_IRQHandler+0x1c4>)
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	4a25      	ldr	r2, [pc, #148]	; (8002930 <HAL_FLASH_IRQHandler+0x1c4>)
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 80028a0:	4b24      	ldr	r3, [pc, #144]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 80028a2:	f103 0410 	add.w	r4, r3, #16
 80028a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	4619      	mov	r1, r3
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f854 	bl	800295c <FLASH_Program_HalfWord>
 80028b4:	e023      	b.n	80028fe <HAL_FLASH_IRQHandler+0x192>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 80028b6:	4b1f      	ldr	r3, [pc, #124]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d105      	bne.n	80028cc <HAL_FLASH_IRQHandler+0x160>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80028c0:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 f837 	bl	8002938 <HAL_FLASH_EndOfOperationCallback>
 80028ca:	e011      	b.n	80028f0 <HAL_FLASH_IRQHandler+0x184>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d106      	bne.n	80028e4 <HAL_FLASH_IRQHandler+0x178>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 80028d6:	4b17      	ldr	r3, [pc, #92]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	3b02      	subs	r3, #2
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 f82b 	bl	8002938 <HAL_FLASH_EndOfOperationCallback>
 80028e2:	e005      	b.n	80028f0 <HAL_FLASH_IRQHandler+0x184>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	3b06      	subs	r3, #6
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 f824 	bl	8002938 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 80028f0:	4b10      	ldr	r3, [pc, #64]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 80028f2:	f04f 32ff 	mov.w	r2, #4294967295
 80028f6:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80028fe:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10e      	bne.n	8002926 <HAL_FLASH_IRQHandler+0x1ba>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_FLASH_IRQHandler+0x1c4>)
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	4a08      	ldr	r2, [pc, #32]	; (8002930 <HAL_FLASH_IRQHandler+0x1c4>)
 800290e:	f023 0307 	bic.w	r3, r3, #7
 8002912:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_FLASH_IRQHandler+0x1c4>)
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	4a05      	ldr	r2, [pc, #20]	; (8002930 <HAL_FLASH_IRQHandler+0x1c4>)
 800291a:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 800291e:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <HAL_FLASH_IRQHandler+0x1c8>)
 8002922:	2200      	movs	r2, #0
 8002924:	761a      	strb	r2, [r3, #24]
  }
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bd90      	pop	{r4, r7, pc}
 800292e:	bf00      	nop
 8002930:	40022000 	.word	0x40022000
 8002934:	20000260 	.word	0x20000260

08002938 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <FLASH_Program_HalfWord+0x30>)
 800296a:	2200      	movs	r2, #0
 800296c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <FLASH_Program_HalfWord+0x34>)
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	4a07      	ldr	r2, [pc, #28]	; (8002990 <FLASH_Program_HalfWord+0x34>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	887a      	ldrh	r2, [r7, #2]
 800297e:	801a      	strh	r2, [r3, #0]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000260 	.word	0x20000260
 8002990:	40022000 	.word	0x40022000

08002994 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800299e:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <FLASH_SetErrorCode+0x98>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80029aa:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <FLASH_SetErrorCode+0x9c>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f043 0302 	orr.w	r3, r3, #2
 80029b2:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <FLASH_SetErrorCode+0x9c>)
 80029b4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f043 0310 	orr.w	r3, r3, #16
 80029bc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80029be:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <FLASH_SetErrorCode+0x98>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80029ca:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <FLASH_SetErrorCode+0x9c>)
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <FLASH_SetErrorCode+0x9c>)
 80029d4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f043 0304 	orr.w	r3, r3, #4
 80029dc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80029de:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <FLASH_SetErrorCode+0x98>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <FLASH_SetErrorCode+0x9c>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	4a0f      	ldr	r2, [pc, #60]	; (8002a30 <FLASH_SetErrorCode+0x9c>)
 80029f4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <FLASH_SetErrorCode+0x98>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <FLASH_SetErrorCode+0x98>)
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f240 1201 	movw	r2, #257	; 0x101
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d106      	bne.n	8002a1a <FLASH_SetErrorCode+0x86>
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <FLASH_SetErrorCode+0x98>)
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	4a06      	ldr	r2, [pc, #24]	; (8002a2c <FLASH_SetErrorCode+0x98>)
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	61d3      	str	r3, [r2, #28]
}  
 8002a18:	e002      	b.n	8002a20 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002a1a:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <FLASH_SetErrorCode+0x98>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	60d3      	str	r3, [r2, #12]
}  
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40022000 	.word	0x40022000
 8002a30:	20000260 	.word	0x20000260

08002a34 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <FLASH_PageErase+0x38>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <FLASH_PageErase+0x3c>)
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <FLASH_PageErase+0x3c>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002a4e:	4a08      	ldr	r2, [pc, #32]	; (8002a70 <FLASH_PageErase+0x3c>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <FLASH_PageErase+0x3c>)
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <FLASH_PageErase+0x3c>)
 8002a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a5e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000260 	.word	0x20000260
 8002a70:	40022000 	.word	0x40022000

08002a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b08b      	sub	sp, #44	; 0x2c
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a82:	2300      	movs	r3, #0
 8002a84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a86:	e127      	b.n	8002cd8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a88:	2201      	movs	r2, #1
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	f040 8116 	bne.w	8002cd2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b12      	cmp	r3, #18
 8002aac:	d034      	beq.n	8002b18 <HAL_GPIO_Init+0xa4>
 8002aae:	2b12      	cmp	r3, #18
 8002ab0:	d80d      	bhi.n	8002ace <HAL_GPIO_Init+0x5a>
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d02b      	beq.n	8002b0e <HAL_GPIO_Init+0x9a>
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d804      	bhi.n	8002ac4 <HAL_GPIO_Init+0x50>
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d031      	beq.n	8002b22 <HAL_GPIO_Init+0xae>
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d01c      	beq.n	8002afc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ac2:	e048      	b.n	8002b56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d043      	beq.n	8002b50 <HAL_GPIO_Init+0xdc>
 8002ac8:	2b11      	cmp	r3, #17
 8002aca:	d01b      	beq.n	8002b04 <HAL_GPIO_Init+0x90>
          break;
 8002acc:	e043      	b.n	8002b56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ace:	4a89      	ldr	r2, [pc, #548]	; (8002cf4 <HAL_GPIO_Init+0x280>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d026      	beq.n	8002b22 <HAL_GPIO_Init+0xae>
 8002ad4:	4a87      	ldr	r2, [pc, #540]	; (8002cf4 <HAL_GPIO_Init+0x280>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d806      	bhi.n	8002ae8 <HAL_GPIO_Init+0x74>
 8002ada:	4a87      	ldr	r2, [pc, #540]	; (8002cf8 <HAL_GPIO_Init+0x284>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d020      	beq.n	8002b22 <HAL_GPIO_Init+0xae>
 8002ae0:	4a86      	ldr	r2, [pc, #536]	; (8002cfc <HAL_GPIO_Init+0x288>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d01d      	beq.n	8002b22 <HAL_GPIO_Init+0xae>
          break;
 8002ae6:	e036      	b.n	8002b56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ae8:	4a85      	ldr	r2, [pc, #532]	; (8002d00 <HAL_GPIO_Init+0x28c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d019      	beq.n	8002b22 <HAL_GPIO_Init+0xae>
 8002aee:	4a85      	ldr	r2, [pc, #532]	; (8002d04 <HAL_GPIO_Init+0x290>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d016      	beq.n	8002b22 <HAL_GPIO_Init+0xae>
 8002af4:	4a84      	ldr	r2, [pc, #528]	; (8002d08 <HAL_GPIO_Init+0x294>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <HAL_GPIO_Init+0xae>
          break;
 8002afa:	e02c      	b.n	8002b56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	623b      	str	r3, [r7, #32]
          break;
 8002b02:	e028      	b.n	8002b56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	623b      	str	r3, [r7, #32]
          break;
 8002b0c:	e023      	b.n	8002b56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	3308      	adds	r3, #8
 8002b14:	623b      	str	r3, [r7, #32]
          break;
 8002b16:	e01e      	b.n	8002b56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	623b      	str	r3, [r7, #32]
          break;
 8002b20:	e019      	b.n	8002b56 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d102      	bne.n	8002b30 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	623b      	str	r3, [r7, #32]
          break;
 8002b2e:	e012      	b.n	8002b56 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d105      	bne.n	8002b44 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b38:	2308      	movs	r3, #8
 8002b3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	611a      	str	r2, [r3, #16]
          break;
 8002b42:	e008      	b.n	8002b56 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b44:	2308      	movs	r3, #8
 8002b46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	615a      	str	r2, [r3, #20]
          break;
 8002b4e:	e002      	b.n	8002b56 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b50:	2300      	movs	r3, #0
 8002b52:	623b      	str	r3, [r7, #32]
          break;
 8002b54:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	2bff      	cmp	r3, #255	; 0xff
 8002b5a:	d801      	bhi.n	8002b60 <HAL_GPIO_Init+0xec>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	e001      	b.n	8002b64 <HAL_GPIO_Init+0xf0>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3304      	adds	r3, #4
 8002b64:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2bff      	cmp	r3, #255	; 0xff
 8002b6a:	d802      	bhi.n	8002b72 <HAL_GPIO_Init+0xfe>
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	e002      	b.n	8002b78 <HAL_GPIO_Init+0x104>
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	3b08      	subs	r3, #8
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	210f      	movs	r1, #15
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	401a      	ands	r2, r3
 8002b8a:	6a39      	ldr	r1, [r7, #32]
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	431a      	orrs	r2, r3
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8096 	beq.w	8002cd2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ba6:	4b59      	ldr	r3, [pc, #356]	; (8002d0c <HAL_GPIO_Init+0x298>)
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	4a58      	ldr	r2, [pc, #352]	; (8002d0c <HAL_GPIO_Init+0x298>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6193      	str	r3, [r2, #24]
 8002bb2:	4b56      	ldr	r3, [pc, #344]	; (8002d0c <HAL_GPIO_Init+0x298>)
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bbe:	4a54      	ldr	r2, [pc, #336]	; (8002d10 <HAL_GPIO_Init+0x29c>)
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	089b      	lsrs	r3, r3, #2
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	220f      	movs	r2, #15
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4013      	ands	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a4b      	ldr	r2, [pc, #300]	; (8002d14 <HAL_GPIO_Init+0x2a0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d013      	beq.n	8002c12 <HAL_GPIO_Init+0x19e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a4a      	ldr	r2, [pc, #296]	; (8002d18 <HAL_GPIO_Init+0x2a4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00d      	beq.n	8002c0e <HAL_GPIO_Init+0x19a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a49      	ldr	r2, [pc, #292]	; (8002d1c <HAL_GPIO_Init+0x2a8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <HAL_GPIO_Init+0x196>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a48      	ldr	r2, [pc, #288]	; (8002d20 <HAL_GPIO_Init+0x2ac>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d101      	bne.n	8002c06 <HAL_GPIO_Init+0x192>
 8002c02:	2303      	movs	r3, #3
 8002c04:	e006      	b.n	8002c14 <HAL_GPIO_Init+0x1a0>
 8002c06:	2304      	movs	r3, #4
 8002c08:	e004      	b.n	8002c14 <HAL_GPIO_Init+0x1a0>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e002      	b.n	8002c14 <HAL_GPIO_Init+0x1a0>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_GPIO_Init+0x1a0>
 8002c12:	2300      	movs	r3, #0
 8002c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c16:	f002 0203 	and.w	r2, r2, #3
 8002c1a:	0092      	lsls	r2, r2, #2
 8002c1c:	4093      	lsls	r3, r2
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c24:	493a      	ldr	r1, [pc, #232]	; (8002d10 <HAL_GPIO_Init+0x29c>)
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	3302      	adds	r3, #2
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d006      	beq.n	8002c4c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c3e:	4b39      	ldr	r3, [pc, #228]	; (8002d24 <HAL_GPIO_Init+0x2b0>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	4938      	ldr	r1, [pc, #224]	; (8002d24 <HAL_GPIO_Init+0x2b0>)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
 8002c4a:	e006      	b.n	8002c5a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c4c:	4b35      	ldr	r3, [pc, #212]	; (8002d24 <HAL_GPIO_Init+0x2b0>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	4933      	ldr	r1, [pc, #204]	; (8002d24 <HAL_GPIO_Init+0x2b0>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d006      	beq.n	8002c74 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c66:	4b2f      	ldr	r3, [pc, #188]	; (8002d24 <HAL_GPIO_Init+0x2b0>)
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	492e      	ldr	r1, [pc, #184]	; (8002d24 <HAL_GPIO_Init+0x2b0>)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	604b      	str	r3, [r1, #4]
 8002c72:	e006      	b.n	8002c82 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c74:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <HAL_GPIO_Init+0x2b0>)
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	4929      	ldr	r1, [pc, #164]	; (8002d24 <HAL_GPIO_Init+0x2b0>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d006      	beq.n	8002c9c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c8e:	4b25      	ldr	r3, [pc, #148]	; (8002d24 <HAL_GPIO_Init+0x2b0>)
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	4924      	ldr	r1, [pc, #144]	; (8002d24 <HAL_GPIO_Init+0x2b0>)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
 8002c9a:	e006      	b.n	8002caa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c9c:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <HAL_GPIO_Init+0x2b0>)
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	491f      	ldr	r1, [pc, #124]	; (8002d24 <HAL_GPIO_Init+0x2b0>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d006      	beq.n	8002cc4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <HAL_GPIO_Init+0x2b0>)
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	491a      	ldr	r1, [pc, #104]	; (8002d24 <HAL_GPIO_Init+0x2b0>)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60cb      	str	r3, [r1, #12]
 8002cc2:	e006      	b.n	8002cd2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002cc4:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <HAL_GPIO_Init+0x2b0>)
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	4915      	ldr	r1, [pc, #84]	; (8002d24 <HAL_GPIO_Init+0x2b0>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f47f aed0 	bne.w	8002a88 <HAL_GPIO_Init+0x14>
  }
}
 8002ce8:	bf00      	nop
 8002cea:	372c      	adds	r7, #44	; 0x2c
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	10210000 	.word	0x10210000
 8002cf8:	10110000 	.word	0x10110000
 8002cfc:	10120000 	.word	0x10120000
 8002d00:	10310000 	.word	0x10310000
 8002d04:	10320000 	.word	0x10320000
 8002d08:	10220000 	.word	0x10220000
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40010000 	.word	0x40010000
 8002d14:	40010800 	.word	0x40010800
 8002d18:	40010c00 	.word	0x40010c00
 8002d1c:	40011000 	.word	0x40011000
 8002d20:	40011400 	.word	0x40011400
 8002d24:	40010400 	.word	0x40010400

08002d28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	887b      	ldrh	r3, [r7, #2]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
 8002d44:	e001      	b.n	8002d4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	807b      	strh	r3, [r7, #2]
 8002d62:	4613      	mov	r3, r2
 8002d64:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d66:	787b      	ldrb	r3, [r7, #1]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6c:	887a      	ldrh	r2, [r7, #2]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d72:	e003      	b.n	8002d7c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d74:	887b      	ldrh	r3, [r7, #2]
 8002d76:	041a      	lsls	r2, r3, #16
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	611a      	str	r2, [r3, #16]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	887b      	ldrh	r3, [r7, #2]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d9e:	887a      	ldrh	r2, [r7, #2]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002da4:	e002      	b.n	8002dac <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002da6:	887a      	ldrh	r2, [r7, #2]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	611a      	str	r2, [r3, #16]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
	...

08002db8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dce:	4a05      	ldr	r2, [pc, #20]	; (8002de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fd fef0 	bl	8000bbc <HAL_GPIO_EXTI_Callback>
  }
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40010400 	.word	0x40010400

08002de8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e02b      	b.n	8002e52 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002e02:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f245 5255 	movw	r2, #21845	; 0x5555
 8002e0c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6852      	ldr	r2, [r2, #4]
 8002e16:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6892      	ldr	r2, [r2, #8]
 8002e20:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002e22:	f7fe fded 	bl	8001a00 <HAL_GetTick>
 8002e26:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002e2a:	f7fe fde9 	bl	8001a00 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b30      	cmp	r3, #48	; 0x30
 8002e36:	d901      	bls.n	8002e3c <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e00a      	b.n	8002e52 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f1      	bne.n	8002e2a <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_PWR_PVD_IRQHandler+0x20>)
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002e88:	f000 f808 	bl	8002e9c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002e8c:	4b02      	ldr	r3, [pc, #8]	; (8002e98 <HAL_PWR_PVD_IRQHandler+0x20>)
 8002e8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e92:	615a      	str	r2, [r3, #20]
  }
}
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40010400 	.word	0x40010400

08002e9c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e26c      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 8087 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ec8:	4b92      	ldr	r3, [pc, #584]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d00c      	beq.n	8002eee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ed4:	4b8f      	ldr	r3, [pc, #572]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d112      	bne.n	8002f06 <HAL_RCC_OscConfig+0x5e>
 8002ee0:	4b8c      	ldr	r3, [pc, #560]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eec:	d10b      	bne.n	8002f06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eee:	4b89      	ldr	r3, [pc, #548]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d06c      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x12c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d168      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e246      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x76>
 8002f10:	4b80      	ldr	r3, [pc, #512]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a7f      	ldr	r2, [pc, #508]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	e02e      	b.n	8002f7c <HAL_RCC_OscConfig+0xd4>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x98>
 8002f26:	4b7b      	ldr	r3, [pc, #492]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a7a      	ldr	r2, [pc, #488]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b78      	ldr	r3, [pc, #480]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a77      	ldr	r2, [pc, #476]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e01d      	b.n	8002f7c <HAL_RCC_OscConfig+0xd4>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0xbc>
 8002f4a:	4b72      	ldr	r3, [pc, #456]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a71      	ldr	r2, [pc, #452]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b6f      	ldr	r3, [pc, #444]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a6e      	ldr	r2, [pc, #440]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e00b      	b.n	8002f7c <HAL_RCC_OscConfig+0xd4>
 8002f64:	4b6b      	ldr	r3, [pc, #428]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a6a      	ldr	r2, [pc, #424]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b68      	ldr	r3, [pc, #416]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a67      	ldr	r2, [pc, #412]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7fe fd3c 	bl	8001a00 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fd38 	bl	8001a00 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	; 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e1fa      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	4b5d      	ldr	r3, [pc, #372]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0xe4>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fe fd28 	bl	8001a00 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fd24 	bl	8001a00 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	; 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e1e6      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	4b53      	ldr	r3, [pc, #332]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x10c>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d063      	beq.n	80030aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fe2:	4b4c      	ldr	r3, [pc, #304]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fee:	4b49      	ldr	r3, [pc, #292]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d11c      	bne.n	8003034 <HAL_RCC_OscConfig+0x18c>
 8002ffa:	4b46      	ldr	r3, [pc, #280]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d116      	bne.n	8003034 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003006:	4b43      	ldr	r3, [pc, #268]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_RCC_OscConfig+0x176>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d001      	beq.n	800301e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e1ba      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301e:	4b3d      	ldr	r3, [pc, #244]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4939      	ldr	r1, [pc, #228]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003032:	e03a      	b.n	80030aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800303c:	4b36      	ldr	r3, [pc, #216]	; (8003118 <HAL_RCC_OscConfig+0x270>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7fe fcdd 	bl	8001a00 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304a:	f7fe fcd9 	bl	8001a00 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e19b      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003068:	4b2a      	ldr	r3, [pc, #168]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4927      	ldr	r1, [pc, #156]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]
 800307c:	e015      	b.n	80030aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307e:	4b26      	ldr	r3, [pc, #152]	; (8003118 <HAL_RCC_OscConfig+0x270>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe fcbc 	bl	8001a00 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308c:	f7fe fcb8 	bl	8001a00 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e17a      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d03a      	beq.n	800312c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d019      	beq.n	80030f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <HAL_RCC_OscConfig+0x274>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c4:	f7fe fc9c 	bl	8001a00 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030cc:	f7fe fc98 	bl	8001a00 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e15a      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ea:	2001      	movs	r0, #1
 80030ec:	f000 fb0a 	bl	8003704 <RCC_Delay>
 80030f0:	e01c      	b.n	800312c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f2:	4b0a      	ldr	r3, [pc, #40]	; (800311c <HAL_RCC_OscConfig+0x274>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f8:	f7fe fc82 	bl	8001a00 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fe:	e00f      	b.n	8003120 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003100:	f7fe fc7e 	bl	8001a00 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d908      	bls.n	8003120 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e140      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	42420000 	.word	0x42420000
 800311c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003120:	4b9e      	ldr	r3, [pc, #632]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e9      	bne.n	8003100 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80a6 	beq.w	8003286 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313a:	2300      	movs	r3, #0
 800313c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313e:	4b97      	ldr	r3, [pc, #604]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10d      	bne.n	8003166 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	4b94      	ldr	r3, [pc, #592]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4a93      	ldr	r2, [pc, #588]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003154:	61d3      	str	r3, [r2, #28]
 8003156:	4b91      	ldr	r3, [pc, #580]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b8e      	ldr	r3, [pc, #568]	; (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003172:	4b8b      	ldr	r3, [pc, #556]	; (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a8a      	ldr	r2, [pc, #552]	; (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7fe fc3f 	bl	8001a00 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fe fc3b 	bl	8001a00 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b64      	cmp	r3, #100	; 0x64
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e0fd      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	4b81      	ldr	r3, [pc, #516]	; (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x312>
 80031ac:	4b7b      	ldr	r3, [pc, #492]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a7a      	ldr	r2, [pc, #488]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	e02d      	b.n	8003216 <HAL_RCC_OscConfig+0x36e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x334>
 80031c2:	4b76      	ldr	r3, [pc, #472]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a75      	ldr	r2, [pc, #468]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	6213      	str	r3, [r2, #32]
 80031ce:	4b73      	ldr	r3, [pc, #460]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4a72      	ldr	r2, [pc, #456]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	6213      	str	r3, [r2, #32]
 80031da:	e01c      	b.n	8003216 <HAL_RCC_OscConfig+0x36e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d10c      	bne.n	80031fe <HAL_RCC_OscConfig+0x356>
 80031e4:	4b6d      	ldr	r3, [pc, #436]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	4a6c      	ldr	r2, [pc, #432]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	6213      	str	r3, [r2, #32]
 80031f0:	4b6a      	ldr	r3, [pc, #424]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4a69      	ldr	r2, [pc, #420]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6213      	str	r3, [r2, #32]
 80031fc:	e00b      	b.n	8003216 <HAL_RCC_OscConfig+0x36e>
 80031fe:	4b67      	ldr	r3, [pc, #412]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4a66      	ldr	r2, [pc, #408]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	6213      	str	r3, [r2, #32]
 800320a:	4b64      	ldr	r3, [pc, #400]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4a63      	ldr	r2, [pc, #396]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d015      	beq.n	800324a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321e:	f7fe fbef 	bl	8001a00 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fe fbeb 	bl	8001a00 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	; 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e0ab      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	4b57      	ldr	r3, [pc, #348]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0ee      	beq.n	8003226 <HAL_RCC_OscConfig+0x37e>
 8003248:	e014      	b.n	8003274 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324a:	f7fe fbd9 	bl	8001a00 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003250:	e00a      	b.n	8003268 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003252:	f7fe fbd5 	bl	8001a00 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e095      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	4b4c      	ldr	r3, [pc, #304]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1ee      	bne.n	8003252 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d105      	bne.n	8003286 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327a:	4b48      	ldr	r3, [pc, #288]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	4a47      	ldr	r2, [pc, #284]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003284:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8081 	beq.w	8003392 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003290:	4b42      	ldr	r3, [pc, #264]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b08      	cmp	r3, #8
 800329a:	d061      	beq.n	8003360 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d146      	bne.n	8003332 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a4:	4b3f      	ldr	r3, [pc, #252]	; (80033a4 <HAL_RCC_OscConfig+0x4fc>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032aa:	f7fe fba9 	bl	8001a00 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b2:	f7fe fba5 	bl	8001a00 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e067      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c4:	4b35      	ldr	r3, [pc, #212]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d8:	d108      	bne.n	80032ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	492d      	ldr	r1, [pc, #180]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ec:	4b2b      	ldr	r3, [pc, #172]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a19      	ldr	r1, [r3, #32]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	430b      	orrs	r3, r1
 80032fe:	4927      	ldr	r1, [pc, #156]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003304:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <HAL_RCC_OscConfig+0x4fc>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330a:	f7fe fb79 	bl	8001a00 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003312:	f7fe fb75 	bl	8001a00 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e037      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003324:	4b1d      	ldr	r3, [pc, #116]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x46a>
 8003330:	e02f      	b.n	8003392 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003332:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <HAL_RCC_OscConfig+0x4fc>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fb62 	bl	8001a00 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7fe fb5e 	bl	8001a00 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e020      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x498>
 800335e:	e018      	b.n	8003392 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e013      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	429a      	cmp	r2, r3
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d001      	beq.n	8003392 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000
 80033a0:	40007000 	.word	0x40007000
 80033a4:	42420060 	.word	0x42420060

080033a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0d0      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033bc:	4b6a      	ldr	r3, [pc, #424]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d910      	bls.n	80033ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b67      	ldr	r3, [pc, #412]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 0207 	bic.w	r2, r3, #7
 80033d2:	4965      	ldr	r1, [pc, #404]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033da:	4b63      	ldr	r3, [pc, #396]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0b8      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d020      	beq.n	800343a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003404:	4b59      	ldr	r3, [pc, #356]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4a58      	ldr	r2, [pc, #352]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800340e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800341c:	4b53      	ldr	r3, [pc, #332]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4a52      	ldr	r2, [pc, #328]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003426:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003428:	4b50      	ldr	r3, [pc, #320]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	494d      	ldr	r1, [pc, #308]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d040      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d107      	bne.n	800345e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	4b47      	ldr	r3, [pc, #284]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d115      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e07f      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d107      	bne.n	8003476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003466:	4b41      	ldr	r3, [pc, #260]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e073      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003476:	4b3d      	ldr	r3, [pc, #244]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e06b      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003486:	4b39      	ldr	r3, [pc, #228]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f023 0203 	bic.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	4936      	ldr	r1, [pc, #216]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003498:	f7fe fab2 	bl	8001a00 <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a0:	f7fe faae 	bl	8001a00 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e053      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	4b2d      	ldr	r3, [pc, #180]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 020c 	and.w	r2, r3, #12
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d1eb      	bne.n	80034a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034c8:	4b27      	ldr	r3, [pc, #156]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d210      	bcs.n	80034f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b24      	ldr	r3, [pc, #144]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 0207 	bic.w	r2, r3, #7
 80034de:	4922      	ldr	r1, [pc, #136]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b20      	ldr	r3, [pc, #128]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e032      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003504:	4b19      	ldr	r3, [pc, #100]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4916      	ldr	r1, [pc, #88]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	490e      	ldr	r1, [pc, #56]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003536:	f000 f821 	bl	800357c <HAL_RCC_GetSysClockFreq>
 800353a:	4601      	mov	r1, r0
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 8003548:	5cd3      	ldrb	r3, [r2, r3]
 800354a:	fa21 f303 	lsr.w	r3, r1, r3
 800354e:	4a09      	ldr	r2, [pc, #36]	; (8003574 <HAL_RCC_ClockConfig+0x1cc>)
 8003550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_RCC_ClockConfig+0x1d0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7fd fefc 	bl	8001354 <HAL_InitTick>

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40022000 	.word	0x40022000
 800356c:	40021000 	.word	0x40021000
 8003570:	08006058 	.word	0x08006058
 8003574:	20000008 	.word	0x20000008
 8003578:	2000000c 	.word	0x2000000c

0800357c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800357c:	b490      	push	{r4, r7}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003582:	4b2a      	ldr	r3, [pc, #168]	; (800362c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003584:	1d3c      	adds	r4, r7, #4
 8003586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800358c:	4b28      	ldr	r3, [pc, #160]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb4>)
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	2300      	movs	r3, #0
 8003598:	61bb      	str	r3, [r7, #24]
 800359a:	2300      	movs	r3, #0
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035a6:	4b23      	ldr	r3, [pc, #140]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d002      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0x40>
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d003      	beq.n	80035c2 <HAL_RCC_GetSysClockFreq+0x46>
 80035ba:	e02d      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035bc:	4b1e      	ldr	r3, [pc, #120]	; (8003638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035be:	623b      	str	r3, [r7, #32]
      break;
 80035c0:	e02d      	b.n	800361e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	0c9b      	lsrs	r3, r3, #18
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035ce:	4413      	add	r3, r2
 80035d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d013      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035e0:	4b14      	ldr	r3, [pc, #80]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	0c5b      	lsrs	r3, r3, #17
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035ee:	4413      	add	r3, r2
 80035f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	4a0f      	ldr	r2, [pc, #60]	; (8003638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035fa:	fb02 f203 	mul.w	r2, r2, r3
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
 8003606:	e004      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	4a0c      	ldr	r2, [pc, #48]	; (800363c <HAL_RCC_GetSysClockFreq+0xc0>)
 800360c:	fb02 f303 	mul.w	r3, r2, r3
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	623b      	str	r3, [r7, #32]
      break;
 8003616:	e002      	b.n	800361e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003618:	4b07      	ldr	r3, [pc, #28]	; (8003638 <HAL_RCC_GetSysClockFreq+0xbc>)
 800361a:	623b      	str	r3, [r7, #32]
      break;
 800361c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800361e:	6a3b      	ldr	r3, [r7, #32]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3728      	adds	r7, #40	; 0x28
 8003624:	46bd      	mov	sp, r7
 8003626:	bc90      	pop	{r4, r7}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	08006044 	.word	0x08006044
 8003630:	08006054 	.word	0x08006054
 8003634:	40021000 	.word	0x40021000
 8003638:	007a1200 	.word	0x007a1200
 800363c:	003d0900 	.word	0x003d0900

08003640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003644:	4b02      	ldr	r3, [pc, #8]	; (8003650 <HAL_RCC_GetHCLKFreq+0x10>)
 8003646:	681b      	ldr	r3, [r3, #0]
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr
 8003650:	20000008 	.word	0x20000008

08003654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003658:	f7ff fff2 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 800365c:	4601      	mov	r1, r0
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	4a03      	ldr	r2, [pc, #12]	; (8003678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800366a:	5cd3      	ldrb	r3, [r2, r3]
 800366c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021000 	.word	0x40021000
 8003678:	08006068 	.word	0x08006068

0800367c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003680:	f7ff ffde 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8003684:	4601      	mov	r1, r0
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	0adb      	lsrs	r3, r3, #11
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4a03      	ldr	r2, [pc, #12]	; (80036a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003692:	5cd3      	ldrb	r3, [r2, r3]
 8003694:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	08006068 	.word	0x08006068

080036a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	220f      	movs	r2, #15
 80036b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <HAL_RCC_GetClockConfig+0x58>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0203 	and.w	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036c0:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <HAL_RCC_GetClockConfig+0x58>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_RCC_GetClockConfig+0x58>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <HAL_RCC_GetClockConfig+0x58>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	08db      	lsrs	r3, r3, #3
 80036de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_RCC_GetClockConfig+0x5c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0207 	and.w	r2, r3, #7
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	40021000 	.word	0x40021000
 8003700:	40022000 	.word	0x40022000

08003704 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800370c:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <RCC_Delay+0x34>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a0a      	ldr	r2, [pc, #40]	; (800373c <RCC_Delay+0x38>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0a5b      	lsrs	r3, r3, #9
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003720:	bf00      	nop
  }
  while (Delay --);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1e5a      	subs	r2, r3, #1
 8003726:	60fa      	str	r2, [r7, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f9      	bne.n	8003720 <RCC_Delay+0x1c>
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000008 	.word	0x20000008
 800373c:	10624dd3 	.word	0x10624dd3

08003740 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d07d      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800375c:	2300      	movs	r3, #0
 800375e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003760:	4b4f      	ldr	r3, [pc, #316]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10d      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376c:	4b4c      	ldr	r3, [pc, #304]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	4a4b      	ldr	r2, [pc, #300]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003776:	61d3      	str	r3, [r2, #28]
 8003778:	4b49      	ldr	r3, [pc, #292]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003784:	2301      	movs	r3, #1
 8003786:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	4b46      	ldr	r3, [pc, #280]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d118      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003794:	4b43      	ldr	r3, [pc, #268]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a42      	ldr	r2, [pc, #264]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800379a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a0:	f7fe f92e 	bl	8001a00 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a6:	e008      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a8:	f7fe f92a 	bl	8001a00 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	; 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e06d      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ba:	4b3a      	ldr	r3, [pc, #232]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037c6:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d02e      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d027      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037e4:	4b2e      	ldr	r3, [pc, #184]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037ee:	4b2e      	ldr	r3, [pc, #184]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037f4:	4b2c      	ldr	r3, [pc, #176]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037fa:	4a29      	ldr	r2, [pc, #164]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d014      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380a:	f7fe f8f9 	bl	8001a00 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003810:	e00a      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003812:	f7fe f8f5 	bl	8001a00 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003820:	4293      	cmp	r3, r2
 8003822:	d901      	bls.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e036      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003828:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0ee      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003834:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	4917      	ldr	r1, [pc, #92]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003842:	4313      	orrs	r3, r2
 8003844:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003846:	7dfb      	ldrb	r3, [r7, #23]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d105      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800384c:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	4a13      	ldr	r2, [pc, #76]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003856:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003864:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	490b      	ldr	r1, [pc, #44]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003872:	4313      	orrs	r3, r2
 8003874:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	d008      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003882:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	4904      	ldr	r1, [pc, #16]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40007000 	.word	0x40007000
 80038a8:	42420440 	.word	0x42420440

080038ac <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d024      	beq.n	800390c <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01d      	beq.n	800390c <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f821 	bl	8003926 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0204 	mvn.w	r2, #4
 80038ec:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2204      	movs	r2, #4
 80038f2:	745a      	strb	r2, [r3, #17]
 80038f4:	e005      	b.n	8003902 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f80c 	bl	8003914 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f06f 0201 	mvn.w	r2, #1
 800390a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e01d      	b.n	8003986 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fee8 	bl	8001734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	4619      	mov	r1, r3
 8003976:	4610      	mov	r0, r2
 8003978:	f000 fb34 	bl	8003fe4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800398e:	b480      	push	{r7}
 8003990:	b085      	sub	sp, #20
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0201 	orr.w	r2, r2, #1
 80039a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b06      	cmp	r3, #6
 80039b6:	d007      	beq.n	80039c8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr

080039d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e01d      	b.n	8003a22 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fd feb8 	bl	8001770 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	4619      	mov	r1, r3
 8003a12:	4610      	mov	r0, r2
 8003a14:	f000 fae6 	bl	8003fe4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	6839      	ldr	r1, [r7, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fd50 	bl	80044e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a10      	ldr	r2, [pc, #64]	; (8003a8c <HAL_TIM_PWM_Start+0x60>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d107      	bne.n	8003a5e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b06      	cmp	r3, #6
 8003a6e:	d007      	beq.n	8003a80 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40012c00 	.word	0x40012c00

08003a90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d122      	bne.n	8003aec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d11b      	bne.n	8003aec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0202 	mvn.w	r2, #2
 8003abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fa6a 	bl	8003fac <HAL_TIM_IC_CaptureCallback>
 8003ad8:	e005      	b.n	8003ae6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fa5d 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fa6c 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d122      	bne.n	8003b40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d11b      	bne.n	8003b40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0204 	mvn.w	r2, #4
 8003b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2202      	movs	r2, #2
 8003b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 fa40 	bl	8003fac <HAL_TIM_IC_CaptureCallback>
 8003b2c:	e005      	b.n	8003b3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fa33 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fa42 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d122      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d11b      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f06f 0208 	mvn.w	r2, #8
 8003b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2204      	movs	r2, #4
 8003b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fa16 	bl	8003fac <HAL_TIM_IC_CaptureCallback>
 8003b80:	e005      	b.n	8003b8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fa09 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fa18 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b10      	cmp	r3, #16
 8003ba0:	d122      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d11b      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f06f 0210 	mvn.w	r2, #16
 8003bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2208      	movs	r2, #8
 8003bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f9ec 	bl	8003fac <HAL_TIM_IC_CaptureCallback>
 8003bd4:	e005      	b.n	8003be2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f9df 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f9ee 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d10e      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d107      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0201 	mvn.w	r2, #1
 8003c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fd f95c 	bl	8000ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1e:	2b80      	cmp	r3, #128	; 0x80
 8003c20:	d10e      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2c:	2b80      	cmp	r3, #128	; 0x80
 8003c2e:	d107      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fcc3 	bl	80045c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4a:	2b40      	cmp	r3, #64	; 0x40
 8003c4c:	d10e      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c58:	2b40      	cmp	r3, #64	; 0x40
 8003c5a:	d107      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f9b2 	bl	8003fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d10e      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d107      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0220 	mvn.w	r2, #32
 8003c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fc8e 	bl	80045b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c98:	bf00      	nop
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e0b4      	b.n	8003e24 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b0c      	cmp	r3, #12
 8003cce:	f200 809f 	bhi.w	8003e10 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003cd2:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003d0d 	.word	0x08003d0d
 8003cdc:	08003e11 	.word	0x08003e11
 8003ce0:	08003e11 	.word	0x08003e11
 8003ce4:	08003e11 	.word	0x08003e11
 8003ce8:	08003d4d 	.word	0x08003d4d
 8003cec:	08003e11 	.word	0x08003e11
 8003cf0:	08003e11 	.word	0x08003e11
 8003cf4:	08003e11 	.word	0x08003e11
 8003cf8:	08003d8f 	.word	0x08003d8f
 8003cfc:	08003e11 	.word	0x08003e11
 8003d00:	08003e11 	.word	0x08003e11
 8003d04:	08003e11 	.word	0x08003e11
 8003d08:	08003dcf 	.word	0x08003dcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 f9c8 	bl	80040a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0208 	orr.w	r2, r2, #8
 8003d26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0204 	bic.w	r2, r2, #4
 8003d36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6999      	ldr	r1, [r3, #24]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	619a      	str	r2, [r3, #24]
      break;
 8003d4a:	e062      	b.n	8003e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fa0e 	bl	8004174 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6999      	ldr	r1, [r3, #24]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	021a      	lsls	r2, r3, #8
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	619a      	str	r2, [r3, #24]
      break;
 8003d8c:	e041      	b.n	8003e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fa57 	bl	8004248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0208 	orr.w	r2, r2, #8
 8003da8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0204 	bic.w	r2, r2, #4
 8003db8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69d9      	ldr	r1, [r3, #28]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	61da      	str	r2, [r3, #28]
      break;
 8003dcc:	e021      	b.n	8003e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 faa1 	bl	800431c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69d9      	ldr	r1, [r3, #28]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	021a      	lsls	r2, r3, #8
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	61da      	str	r2, [r3, #28]
      break;
 8003e0e:	e000      	b.n	8003e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003e10:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_TIM_ConfigClockSource+0x18>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e0a6      	b.n	8003f92 <HAL_TIM_ConfigClockSource+0x166>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d067      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0x120>
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d80b      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x6c>
 8003e80:	2b10      	cmp	r3, #16
 8003e82:	d073      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0x140>
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d802      	bhi.n	8003e8e <HAL_TIM_ConfigClockSource+0x62>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d06f      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003e8c:	e078      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d06c      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0x140>
 8003e92:	2b30      	cmp	r3, #48	; 0x30
 8003e94:	d06a      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003e96:	e073      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e98:	2b70      	cmp	r3, #112	; 0x70
 8003e9a:	d00d      	beq.n	8003eb8 <HAL_TIM_ConfigClockSource+0x8c>
 8003e9c:	2b70      	cmp	r3, #112	; 0x70
 8003e9e:	d804      	bhi.n	8003eaa <HAL_TIM_ConfigClockSource+0x7e>
 8003ea0:	2b50      	cmp	r3, #80	; 0x50
 8003ea2:	d033      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0xe0>
 8003ea4:	2b60      	cmp	r3, #96	; 0x60
 8003ea6:	d041      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003ea8:	e06a      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eae:	d066      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x152>
 8003eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb4:	d017      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003eb6:	e063      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6899      	ldr	r1, [r3, #8]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f000 faed 	bl	80044a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eda:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	609a      	str	r2, [r3, #8]
      break;
 8003ee4:	e04c      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6899      	ldr	r1, [r3, #8]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f000 fad6 	bl	80044a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f08:	609a      	str	r2, [r3, #8]
      break;
 8003f0a:	e039      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6859      	ldr	r1, [r3, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f000 fa4d 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2150      	movs	r1, #80	; 0x50
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 faa4 	bl	8004472 <TIM_ITRx_SetConfig>
      break;
 8003f2a:	e029      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	6859      	ldr	r1, [r3, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f000 fa6b 	bl	8004414 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2160      	movs	r1, #96	; 0x60
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fa94 	bl	8004472 <TIM_ITRx_SetConfig>
      break;
 8003f4a:	e019      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f000 fa2d 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2140      	movs	r1, #64	; 0x40
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fa84 	bl	8004472 <TIM_ITRx_SetConfig>
      break;
 8003f6a:	e009      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f000 fa7b 	bl	8004472 <TIM_ITRx_SetConfig>
      break;
 8003f7c:	e000      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr

08003fac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr

08003fbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr
	...

08003fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a29      	ldr	r2, [pc, #164]	; (800409c <TIM_Base_SetConfig+0xb8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00b      	beq.n	8004014 <TIM_Base_SetConfig+0x30>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004002:	d007      	beq.n	8004014 <TIM_Base_SetConfig+0x30>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a26      	ldr	r2, [pc, #152]	; (80040a0 <TIM_Base_SetConfig+0xbc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d003      	beq.n	8004014 <TIM_Base_SetConfig+0x30>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a25      	ldr	r2, [pc, #148]	; (80040a4 <TIM_Base_SetConfig+0xc0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d108      	bne.n	8004026 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a1c      	ldr	r2, [pc, #112]	; (800409c <TIM_Base_SetConfig+0xb8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00b      	beq.n	8004046 <TIM_Base_SetConfig+0x62>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004034:	d007      	beq.n	8004046 <TIM_Base_SetConfig+0x62>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <TIM_Base_SetConfig+0xbc>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d003      	beq.n	8004046 <TIM_Base_SetConfig+0x62>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <TIM_Base_SetConfig+0xc0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d108      	bne.n	8004058 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a07      	ldr	r2, [pc, #28]	; (800409c <TIM_Base_SetConfig+0xb8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d103      	bne.n	800408c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	615a      	str	r2, [r3, #20]
}
 8004092:	bf00      	nop
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40000800 	.word	0x40000800

080040a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f023 0201 	bic.w	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0303 	bic.w	r3, r3, #3
 80040de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f023 0302 	bic.w	r3, r3, #2
 80040f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a1c      	ldr	r2, [pc, #112]	; (8004170 <TIM_OC1_SetConfig+0xc8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d10c      	bne.n	800411e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f023 0308 	bic.w	r3, r3, #8
 800410a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f023 0304 	bic.w	r3, r3, #4
 800411c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a13      	ldr	r2, [pc, #76]	; (8004170 <TIM_OC1_SetConfig+0xc8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d111      	bne.n	800414a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800412c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	621a      	str	r2, [r3, #32]
}
 8004164:	bf00      	nop
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40012c00 	.word	0x40012c00

08004174 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0210 	bic.w	r2, r3, #16
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f023 0320 	bic.w	r3, r3, #32
 80041be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <TIM_OC2_SetConfig+0xd0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d10d      	bne.n	80041f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a14      	ldr	r2, [pc, #80]	; (8004244 <TIM_OC2_SetConfig+0xd0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d113      	bne.n	8004220 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	621a      	str	r2, [r3, #32]
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr
 8004244:	40012c00 	.word	0x40012c00

08004248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0303 	bic.w	r3, r3, #3
 800427e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a1d      	ldr	r2, [pc, #116]	; (8004318 <TIM_OC3_SetConfig+0xd0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d10d      	bne.n	80042c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	021b      	lsls	r3, r3, #8
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a14      	ldr	r2, [pc, #80]	; (8004318 <TIM_OC3_SetConfig+0xd0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d113      	bne.n	80042f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	621a      	str	r2, [r3, #32]
}
 800430c:	bf00      	nop
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40012c00 	.word	0x40012c00

0800431c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	031b      	lsls	r3, r3, #12
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a0f      	ldr	r2, [pc, #60]	; (80043b4 <TIM_OC4_SetConfig+0x98>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d109      	bne.n	8004390 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	019b      	lsls	r3, r3, #6
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr
 80043b4:	40012c00 	.word	0x40012c00

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f023 0210 	bic.w	r2, r3, #16
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800443e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	031b      	lsls	r3, r3, #12
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004450:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	621a      	str	r2, [r3, #32]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004472:	b480      	push	{r7}
 8004474:	b085      	sub	sp, #20
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	f043 0307 	orr.w	r3, r3, #7
 8004494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	609a      	str	r2, [r3, #8]
}
 800449c:	bf00      	nop
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr

080044a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b087      	sub	sp, #28
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	021a      	lsls	r2, r3, #8
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	609a      	str	r2, [r3, #8]
}
 80044da:	bf00      	nop
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	2201      	movs	r2, #1
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a1a      	ldr	r2, [r3, #32]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	43db      	mvns	r3, r3
 8004506:	401a      	ands	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a1a      	ldr	r2, [r3, #32]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f003 031f 	and.w	r3, r3, #31
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	fa01 f303 	lsl.w	r3, r1, r3
 800451c:	431a      	orrs	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	621a      	str	r2, [r3, #32]
}
 8004522:	bf00      	nop
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004540:	2302      	movs	r3, #2
 8004542:	e032      	b.n	80045aa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800457c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	4313      	orrs	r3, r2
 8004586:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr

080045b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr

080045c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr

080045d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e03f      	b.n	800466a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fd f966 	bl	80018d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2224      	movs	r2, #36	; 0x24
 8004608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800461a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f9b1 	bl	8004984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004630:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695a      	ldr	r2, [r3, #20]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004640:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004650:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b088      	sub	sp, #32
 8004676:	af02      	add	r7, sp, #8
 8004678:	60f8      	str	r0, [r7, #12]
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	603b      	str	r3, [r7, #0]
 800467e:	4613      	mov	r3, r2
 8004680:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b20      	cmp	r3, #32
 8004690:	f040 8083 	bne.w	800479a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_UART_Transmit+0x2e>
 800469a:	88fb      	ldrh	r3, [r7, #6]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e07b      	b.n	800479c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_UART_Transmit+0x40>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e074      	b.n	800479c <HAL_UART_Transmit+0x12a>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2221      	movs	r2, #33	; 0x21
 80046c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046c8:	f7fd f99a 	bl	8001a00 <HAL_GetTick>
 80046cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	88fa      	ldrh	r2, [r7, #6]
 80046d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	88fa      	ldrh	r2, [r7, #6]
 80046d8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046da:	e042      	b.n	8004762 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f2:	d122      	bne.n	800473a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2200      	movs	r2, #0
 80046fc:	2180      	movs	r1, #128	; 0x80
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f8f6 	bl	80048f0 <UART_WaitOnFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e046      	b.n	800479c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004720:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	3302      	adds	r3, #2
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	e017      	b.n	8004762 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	3301      	adds	r3, #1
 8004736:	60bb      	str	r3, [r7, #8]
 8004738:	e013      	b.n	8004762 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2200      	movs	r2, #0
 8004742:	2180      	movs	r1, #128	; 0x80
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f8d3 	bl	80048f0 <UART_WaitOnFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e023      	b.n	800479c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	60ba      	str	r2, [r7, #8]
 800475a:	781a      	ldrb	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1b7      	bne.n	80046dc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2200      	movs	r2, #0
 8004774:	2140      	movs	r1, #64	; 0x40
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f8ba 	bl	80048f0 <UART_WaitOnFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e00a      	b.n	800479c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	e000      	b.n	800479c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800479a:	2302      	movs	r3, #2
  }
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	4613      	mov	r3, r2
 80047b2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	f040 8090 	bne.w	80048e6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <HAL_UART_Receive+0x2e>
 80047cc:	88fb      	ldrh	r3, [r7, #6]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e088      	b.n	80048e8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_UART_Receive+0x40>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e081      	b.n	80048e8 <HAL_UART_Receive+0x144>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2222      	movs	r2, #34	; 0x22
 80047f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80047fa:	f7fd f901 	bl	8001a00 <HAL_GetTick>
 80047fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	88fa      	ldrh	r2, [r7, #6]
 800480a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800480c:	e05c      	b.n	80048c8 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004824:	d12b      	bne.n	800487e <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2200      	movs	r2, #0
 800482e:	2120      	movs	r1, #32
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f85d 	bl	80048f0 <UART_WaitOnFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e053      	b.n	80048e8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10c      	bne.n	8004866 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004858:	b29a      	uxth	r2, r3
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	3302      	adds	r3, #2
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	e030      	b.n	80048c8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	b29b      	uxth	r3, r3
 800486e:	b2db      	uxtb	r3, r3
 8004870:	b29a      	uxth	r2, r3
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	3301      	adds	r3, #1
 800487a:	60bb      	str	r3, [r7, #8]
 800487c:	e024      	b.n	80048c8 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2200      	movs	r2, #0
 8004886:	2120      	movs	r1, #32
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f831 	bl	80048f0 <UART_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e027      	b.n	80048e8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d108      	bne.n	80048b2 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6859      	ldr	r1, [r3, #4]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	60ba      	str	r2, [r7, #8]
 80048ac:	b2ca      	uxtb	r2, r1
 80048ae:	701a      	strb	r2, [r3, #0]
 80048b0:	e00a      	b.n	80048c8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	1c59      	adds	r1, r3, #1
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d19d      	bne.n	800480e <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e000      	b.n	80048e8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80048e6:	2302      	movs	r3, #2
  }
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	4613      	mov	r3, r2
 80048fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004900:	e02c      	b.n	800495c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	d028      	beq.n	800495c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <UART_WaitOnFlagUntilTimeout+0x30>
 8004910:	f7fd f876 	bl	8001a00 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	429a      	cmp	r2, r3
 800491e:	d21d      	bcs.n	800495c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800492e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695a      	ldr	r2, [r3, #20]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0201 	bic.w	r2, r2, #1
 800493e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e00f      	b.n	800497c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4013      	ands	r3, r2
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	429a      	cmp	r2, r3
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	429a      	cmp	r2, r3
 8004978:	d0c3      	beq.n	8004902 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689a      	ldr	r2, [r3, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80049be:	f023 030c 	bic.w	r3, r3, #12
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	68f9      	ldr	r1, [r7, #12]
 80049c8:	430b      	orrs	r3, r1
 80049ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a52      	ldr	r2, [pc, #328]	; (8004b30 <UART_SetConfig+0x1ac>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d14e      	bne.n	8004a8a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049ec:	f7fe fe46 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 80049f0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	009a      	lsls	r2, r3, #2
 80049fc:	441a      	add	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	4a4a      	ldr	r2, [pc, #296]	; (8004b34 <UART_SetConfig+0x1b0>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	0119      	lsls	r1, r3, #4
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	009a      	lsls	r2, r3, #2
 8004a1c:	441a      	add	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a28:	4b42      	ldr	r3, [pc, #264]	; (8004b34 <UART_SetConfig+0x1b0>)
 8004a2a:	fba3 0302 	umull	r0, r3, r3, r2
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	2064      	movs	r0, #100	; 0x64
 8004a32:	fb00 f303 	mul.w	r3, r0, r3
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	3332      	adds	r3, #50	; 0x32
 8004a3c:	4a3d      	ldr	r2, [pc, #244]	; (8004b34 <UART_SetConfig+0x1b0>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a48:	4419      	add	r1, r3
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	009a      	lsls	r2, r3, #2
 8004a54:	441a      	add	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a60:	4b34      	ldr	r3, [pc, #208]	; (8004b34 <UART_SetConfig+0x1b0>)
 8004a62:	fba3 0302 	umull	r0, r3, r3, r2
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	2064      	movs	r0, #100	; 0x64
 8004a6a:	fb00 f303 	mul.w	r3, r0, r3
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	3332      	adds	r3, #50	; 0x32
 8004a74:	4a2f      	ldr	r2, [pc, #188]	; (8004b34 <UART_SetConfig+0x1b0>)
 8004a76:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7a:	095b      	lsrs	r3, r3, #5
 8004a7c:	f003 020f 	and.w	r2, r3, #15
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	440a      	add	r2, r1
 8004a86:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004a88:	e04d      	b.n	8004b26 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a8a:	f7fe fde3 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 8004a8e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	4613      	mov	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	009a      	lsls	r2, r3, #2
 8004a9a:	441a      	add	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa6:	4a23      	ldr	r2, [pc, #140]	; (8004b34 <UART_SetConfig+0x1b0>)
 8004aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	0119      	lsls	r1, r3, #4
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009a      	lsls	r2, r3, #2
 8004aba:	441a      	add	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ac6:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <UART_SetConfig+0x1b0>)
 8004ac8:	fba3 0302 	umull	r0, r3, r3, r2
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	2064      	movs	r0, #100	; 0x64
 8004ad0:	fb00 f303 	mul.w	r3, r0, r3
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	3332      	adds	r3, #50	; 0x32
 8004ada:	4a16      	ldr	r2, [pc, #88]	; (8004b34 <UART_SetConfig+0x1b0>)
 8004adc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae0:	095b      	lsrs	r3, r3, #5
 8004ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ae6:	4419      	add	r1, r3
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	4613      	mov	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	009a      	lsls	r2, r3, #2
 8004af2:	441a      	add	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004afe:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <UART_SetConfig+0x1b0>)
 8004b00:	fba3 0302 	umull	r0, r3, r3, r2
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	2064      	movs	r0, #100	; 0x64
 8004b08:	fb00 f303 	mul.w	r3, r0, r3
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	3332      	adds	r3, #50	; 0x32
 8004b12:	4a08      	ldr	r2, [pc, #32]	; (8004b34 <UART_SetConfig+0x1b0>)
 8004b14:	fba2 2303 	umull	r2, r3, r2, r3
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	f003 020f 	and.w	r2, r3, #15
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	440a      	add	r2, r1
 8004b24:	609a      	str	r2, [r3, #8]
}
 8004b26:	bf00      	nop
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40013800 	.word	0x40013800
 8004b34:	51eb851f 	.word	0x51eb851f

08004b38 <__errno>:
 8004b38:	4b01      	ldr	r3, [pc, #4]	; (8004b40 <__errno+0x8>)
 8004b3a:	6818      	ldr	r0, [r3, #0]
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000014 	.word	0x20000014

08004b44 <__libc_init_array>:
 8004b44:	b570      	push	{r4, r5, r6, lr}
 8004b46:	2500      	movs	r5, #0
 8004b48:	4e0c      	ldr	r6, [pc, #48]	; (8004b7c <__libc_init_array+0x38>)
 8004b4a:	4c0d      	ldr	r4, [pc, #52]	; (8004b80 <__libc_init_array+0x3c>)
 8004b4c:	1ba4      	subs	r4, r4, r6
 8004b4e:	10a4      	asrs	r4, r4, #2
 8004b50:	42a5      	cmp	r5, r4
 8004b52:	d109      	bne.n	8004b68 <__libc_init_array+0x24>
 8004b54:	f001 f82a 	bl	8005bac <_init>
 8004b58:	2500      	movs	r5, #0
 8004b5a:	4e0a      	ldr	r6, [pc, #40]	; (8004b84 <__libc_init_array+0x40>)
 8004b5c:	4c0a      	ldr	r4, [pc, #40]	; (8004b88 <__libc_init_array+0x44>)
 8004b5e:	1ba4      	subs	r4, r4, r6
 8004b60:	10a4      	asrs	r4, r4, #2
 8004b62:	42a5      	cmp	r5, r4
 8004b64:	d105      	bne.n	8004b72 <__libc_init_array+0x2e>
 8004b66:	bd70      	pop	{r4, r5, r6, pc}
 8004b68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b6c:	4798      	blx	r3
 8004b6e:	3501      	adds	r5, #1
 8004b70:	e7ee      	b.n	8004b50 <__libc_init_array+0xc>
 8004b72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b76:	4798      	blx	r3
 8004b78:	3501      	adds	r5, #1
 8004b7a:	e7f2      	b.n	8004b62 <__libc_init_array+0x1e>
 8004b7c:	08006108 	.word	0x08006108
 8004b80:	08006108 	.word	0x08006108
 8004b84:	08006108 	.word	0x08006108
 8004b88:	0800610c 	.word	0x0800610c

08004b8c <memset>:
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	4402      	add	r2, r0
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d100      	bne.n	8004b96 <memset+0xa>
 8004b94:	4770      	bx	lr
 8004b96:	f803 1b01 	strb.w	r1, [r3], #1
 8004b9a:	e7f9      	b.n	8004b90 <memset+0x4>

08004b9c <iprintf>:
 8004b9c:	b40f      	push	{r0, r1, r2, r3}
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <iprintf+0x2c>)
 8004ba0:	b513      	push	{r0, r1, r4, lr}
 8004ba2:	681c      	ldr	r4, [r3, #0]
 8004ba4:	b124      	cbz	r4, 8004bb0 <iprintf+0x14>
 8004ba6:	69a3      	ldr	r3, [r4, #24]
 8004ba8:	b913      	cbnz	r3, 8004bb0 <iprintf+0x14>
 8004baa:	4620      	mov	r0, r4
 8004bac:	f000 fad0 	bl	8005150 <__sinit>
 8004bb0:	ab05      	add	r3, sp, #20
 8004bb2:	9a04      	ldr	r2, [sp, #16]
 8004bb4:	68a1      	ldr	r1, [r4, #8]
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	9301      	str	r3, [sp, #4]
 8004bba:	f000 fc8d 	bl	80054d8 <_vfiprintf_r>
 8004bbe:	b002      	add	sp, #8
 8004bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc4:	b004      	add	sp, #16
 8004bc6:	4770      	bx	lr
 8004bc8:	20000014 	.word	0x20000014

08004bcc <_puts_r>:
 8004bcc:	b570      	push	{r4, r5, r6, lr}
 8004bce:	460e      	mov	r6, r1
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	b118      	cbz	r0, 8004bdc <_puts_r+0x10>
 8004bd4:	6983      	ldr	r3, [r0, #24]
 8004bd6:	b90b      	cbnz	r3, 8004bdc <_puts_r+0x10>
 8004bd8:	f000 faba 	bl	8005150 <__sinit>
 8004bdc:	69ab      	ldr	r3, [r5, #24]
 8004bde:	68ac      	ldr	r4, [r5, #8]
 8004be0:	b913      	cbnz	r3, 8004be8 <_puts_r+0x1c>
 8004be2:	4628      	mov	r0, r5
 8004be4:	f000 fab4 	bl	8005150 <__sinit>
 8004be8:	4b23      	ldr	r3, [pc, #140]	; (8004c78 <_puts_r+0xac>)
 8004bea:	429c      	cmp	r4, r3
 8004bec:	d117      	bne.n	8004c1e <_puts_r+0x52>
 8004bee:	686c      	ldr	r4, [r5, #4]
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	071b      	lsls	r3, r3, #28
 8004bf4:	d51d      	bpl.n	8004c32 <_puts_r+0x66>
 8004bf6:	6923      	ldr	r3, [r4, #16]
 8004bf8:	b1db      	cbz	r3, 8004c32 <_puts_r+0x66>
 8004bfa:	3e01      	subs	r6, #1
 8004bfc:	68a3      	ldr	r3, [r4, #8]
 8004bfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c02:	3b01      	subs	r3, #1
 8004c04:	60a3      	str	r3, [r4, #8]
 8004c06:	b9e9      	cbnz	r1, 8004c44 <_puts_r+0x78>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	da2e      	bge.n	8004c6a <_puts_r+0x9e>
 8004c0c:	4622      	mov	r2, r4
 8004c0e:	210a      	movs	r1, #10
 8004c10:	4628      	mov	r0, r5
 8004c12:	f000 f8ed 	bl	8004df0 <__swbuf_r>
 8004c16:	3001      	adds	r0, #1
 8004c18:	d011      	beq.n	8004c3e <_puts_r+0x72>
 8004c1a:	200a      	movs	r0, #10
 8004c1c:	e011      	b.n	8004c42 <_puts_r+0x76>
 8004c1e:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <_puts_r+0xb0>)
 8004c20:	429c      	cmp	r4, r3
 8004c22:	d101      	bne.n	8004c28 <_puts_r+0x5c>
 8004c24:	68ac      	ldr	r4, [r5, #8]
 8004c26:	e7e3      	b.n	8004bf0 <_puts_r+0x24>
 8004c28:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <_puts_r+0xb4>)
 8004c2a:	429c      	cmp	r4, r3
 8004c2c:	bf08      	it	eq
 8004c2e:	68ec      	ldreq	r4, [r5, #12]
 8004c30:	e7de      	b.n	8004bf0 <_puts_r+0x24>
 8004c32:	4621      	mov	r1, r4
 8004c34:	4628      	mov	r0, r5
 8004c36:	f000 f92d 	bl	8004e94 <__swsetup_r>
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	d0dd      	beq.n	8004bfa <_puts_r+0x2e>
 8004c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c42:	bd70      	pop	{r4, r5, r6, pc}
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	da04      	bge.n	8004c52 <_puts_r+0x86>
 8004c48:	69a2      	ldr	r2, [r4, #24]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	dc06      	bgt.n	8004c5c <_puts_r+0x90>
 8004c4e:	290a      	cmp	r1, #10
 8004c50:	d004      	beq.n	8004c5c <_puts_r+0x90>
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	6022      	str	r2, [r4, #0]
 8004c58:	7019      	strb	r1, [r3, #0]
 8004c5a:	e7cf      	b.n	8004bfc <_puts_r+0x30>
 8004c5c:	4622      	mov	r2, r4
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f000 f8c6 	bl	8004df0 <__swbuf_r>
 8004c64:	3001      	adds	r0, #1
 8004c66:	d1c9      	bne.n	8004bfc <_puts_r+0x30>
 8004c68:	e7e9      	b.n	8004c3e <_puts_r+0x72>
 8004c6a:	200a      	movs	r0, #10
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	6022      	str	r2, [r4, #0]
 8004c72:	7018      	strb	r0, [r3, #0]
 8004c74:	e7e5      	b.n	8004c42 <_puts_r+0x76>
 8004c76:	bf00      	nop
 8004c78:	08006094 	.word	0x08006094
 8004c7c:	080060b4 	.word	0x080060b4
 8004c80:	08006074 	.word	0x08006074

08004c84 <puts>:
 8004c84:	4b02      	ldr	r3, [pc, #8]	; (8004c90 <puts+0xc>)
 8004c86:	4601      	mov	r1, r0
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	f7ff bf9f 	b.w	8004bcc <_puts_r>
 8004c8e:	bf00      	nop
 8004c90:	20000014 	.word	0x20000014

08004c94 <setvbuf>:
 8004c94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004c98:	461d      	mov	r5, r3
 8004c9a:	4b51      	ldr	r3, [pc, #324]	; (8004de0 <setvbuf+0x14c>)
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	681e      	ldr	r6, [r3, #0]
 8004ca0:	460f      	mov	r7, r1
 8004ca2:	4690      	mov	r8, r2
 8004ca4:	b126      	cbz	r6, 8004cb0 <setvbuf+0x1c>
 8004ca6:	69b3      	ldr	r3, [r6, #24]
 8004ca8:	b913      	cbnz	r3, 8004cb0 <setvbuf+0x1c>
 8004caa:	4630      	mov	r0, r6
 8004cac:	f000 fa50 	bl	8005150 <__sinit>
 8004cb0:	4b4c      	ldr	r3, [pc, #304]	; (8004de4 <setvbuf+0x150>)
 8004cb2:	429c      	cmp	r4, r3
 8004cb4:	d152      	bne.n	8004d5c <setvbuf+0xc8>
 8004cb6:	6874      	ldr	r4, [r6, #4]
 8004cb8:	f1b8 0f02 	cmp.w	r8, #2
 8004cbc:	d006      	beq.n	8004ccc <setvbuf+0x38>
 8004cbe:	f1b8 0f01 	cmp.w	r8, #1
 8004cc2:	f200 8089 	bhi.w	8004dd8 <setvbuf+0x144>
 8004cc6:	2d00      	cmp	r5, #0
 8004cc8:	f2c0 8086 	blt.w	8004dd8 <setvbuf+0x144>
 8004ccc:	4621      	mov	r1, r4
 8004cce:	4630      	mov	r0, r6
 8004cd0:	f000 f9d4 	bl	800507c <_fflush_r>
 8004cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cd6:	b141      	cbz	r1, 8004cea <setvbuf+0x56>
 8004cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cdc:	4299      	cmp	r1, r3
 8004cde:	d002      	beq.n	8004ce6 <setvbuf+0x52>
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	f000 fb2b 	bl	800533c <_free_r>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	6363      	str	r3, [r4, #52]	; 0x34
 8004cea:	2300      	movs	r3, #0
 8004cec:	61a3      	str	r3, [r4, #24]
 8004cee:	6063      	str	r3, [r4, #4]
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	061b      	lsls	r3, r3, #24
 8004cf4:	d503      	bpl.n	8004cfe <setvbuf+0x6a>
 8004cf6:	6921      	ldr	r1, [r4, #16]
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f000 fb1f 	bl	800533c <_free_r>
 8004cfe:	89a3      	ldrh	r3, [r4, #12]
 8004d00:	f1b8 0f02 	cmp.w	r8, #2
 8004d04:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004d08:	f023 0303 	bic.w	r3, r3, #3
 8004d0c:	81a3      	strh	r3, [r4, #12]
 8004d0e:	d05d      	beq.n	8004dcc <setvbuf+0x138>
 8004d10:	ab01      	add	r3, sp, #4
 8004d12:	466a      	mov	r2, sp
 8004d14:	4621      	mov	r1, r4
 8004d16:	4630      	mov	r0, r6
 8004d18:	f000 faa4 	bl	8005264 <__swhatbuf_r>
 8004d1c:	89a3      	ldrh	r3, [r4, #12]
 8004d1e:	4318      	orrs	r0, r3
 8004d20:	81a0      	strh	r0, [r4, #12]
 8004d22:	bb2d      	cbnz	r5, 8004d70 <setvbuf+0xdc>
 8004d24:	9d00      	ldr	r5, [sp, #0]
 8004d26:	4628      	mov	r0, r5
 8004d28:	f000 fb00 	bl	800532c <malloc>
 8004d2c:	4607      	mov	r7, r0
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	d14e      	bne.n	8004dd0 <setvbuf+0x13c>
 8004d32:	f8dd 9000 	ldr.w	r9, [sp]
 8004d36:	45a9      	cmp	r9, r5
 8004d38:	d13c      	bne.n	8004db4 <setvbuf+0x120>
 8004d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d3e:	89a3      	ldrh	r3, [r4, #12]
 8004d40:	f043 0302 	orr.w	r3, r3, #2
 8004d44:	81a3      	strh	r3, [r4, #12]
 8004d46:	2300      	movs	r3, #0
 8004d48:	60a3      	str	r3, [r4, #8]
 8004d4a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d4e:	6023      	str	r3, [r4, #0]
 8004d50:	6123      	str	r3, [r4, #16]
 8004d52:	2301      	movs	r3, #1
 8004d54:	6163      	str	r3, [r4, #20]
 8004d56:	b003      	add	sp, #12
 8004d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d5c:	4b22      	ldr	r3, [pc, #136]	; (8004de8 <setvbuf+0x154>)
 8004d5e:	429c      	cmp	r4, r3
 8004d60:	d101      	bne.n	8004d66 <setvbuf+0xd2>
 8004d62:	68b4      	ldr	r4, [r6, #8]
 8004d64:	e7a8      	b.n	8004cb8 <setvbuf+0x24>
 8004d66:	4b21      	ldr	r3, [pc, #132]	; (8004dec <setvbuf+0x158>)
 8004d68:	429c      	cmp	r4, r3
 8004d6a:	bf08      	it	eq
 8004d6c:	68f4      	ldreq	r4, [r6, #12]
 8004d6e:	e7a3      	b.n	8004cb8 <setvbuf+0x24>
 8004d70:	2f00      	cmp	r7, #0
 8004d72:	d0d8      	beq.n	8004d26 <setvbuf+0x92>
 8004d74:	69b3      	ldr	r3, [r6, #24]
 8004d76:	b913      	cbnz	r3, 8004d7e <setvbuf+0xea>
 8004d78:	4630      	mov	r0, r6
 8004d7a:	f000 f9e9 	bl	8005150 <__sinit>
 8004d7e:	f1b8 0f01 	cmp.w	r8, #1
 8004d82:	bf08      	it	eq
 8004d84:	89a3      	ldrheq	r3, [r4, #12]
 8004d86:	6027      	str	r7, [r4, #0]
 8004d88:	bf04      	itt	eq
 8004d8a:	f043 0301 	orreq.w	r3, r3, #1
 8004d8e:	81a3      	strheq	r3, [r4, #12]
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8004d96:	f013 0008 	ands.w	r0, r3, #8
 8004d9a:	d01b      	beq.n	8004dd4 <setvbuf+0x140>
 8004d9c:	f013 0001 	ands.w	r0, r3, #1
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	bf1f      	itttt	ne
 8004da6:	426d      	negne	r5, r5
 8004da8:	60a3      	strne	r3, [r4, #8]
 8004daa:	61a5      	strne	r5, [r4, #24]
 8004dac:	4618      	movne	r0, r3
 8004dae:	bf08      	it	eq
 8004db0:	60a5      	streq	r5, [r4, #8]
 8004db2:	e7d0      	b.n	8004d56 <setvbuf+0xc2>
 8004db4:	4648      	mov	r0, r9
 8004db6:	f000 fab9 	bl	800532c <malloc>
 8004dba:	4607      	mov	r7, r0
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	d0bc      	beq.n	8004d3a <setvbuf+0xa6>
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	464d      	mov	r5, r9
 8004dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc8:	81a3      	strh	r3, [r4, #12]
 8004dca:	e7d3      	b.n	8004d74 <setvbuf+0xe0>
 8004dcc:	2000      	movs	r0, #0
 8004dce:	e7b6      	b.n	8004d3e <setvbuf+0xaa>
 8004dd0:	46a9      	mov	r9, r5
 8004dd2:	e7f5      	b.n	8004dc0 <setvbuf+0x12c>
 8004dd4:	60a0      	str	r0, [r4, #8]
 8004dd6:	e7be      	b.n	8004d56 <setvbuf+0xc2>
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ddc:	e7bb      	b.n	8004d56 <setvbuf+0xc2>
 8004dde:	bf00      	nop
 8004de0:	20000014 	.word	0x20000014
 8004de4:	08006094 	.word	0x08006094
 8004de8:	080060b4 	.word	0x080060b4
 8004dec:	08006074 	.word	0x08006074

08004df0 <__swbuf_r>:
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	460e      	mov	r6, r1
 8004df4:	4614      	mov	r4, r2
 8004df6:	4605      	mov	r5, r0
 8004df8:	b118      	cbz	r0, 8004e02 <__swbuf_r+0x12>
 8004dfa:	6983      	ldr	r3, [r0, #24]
 8004dfc:	b90b      	cbnz	r3, 8004e02 <__swbuf_r+0x12>
 8004dfe:	f000 f9a7 	bl	8005150 <__sinit>
 8004e02:	4b21      	ldr	r3, [pc, #132]	; (8004e88 <__swbuf_r+0x98>)
 8004e04:	429c      	cmp	r4, r3
 8004e06:	d12a      	bne.n	8004e5e <__swbuf_r+0x6e>
 8004e08:	686c      	ldr	r4, [r5, #4]
 8004e0a:	69a3      	ldr	r3, [r4, #24]
 8004e0c:	60a3      	str	r3, [r4, #8]
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	071a      	lsls	r2, r3, #28
 8004e12:	d52e      	bpl.n	8004e72 <__swbuf_r+0x82>
 8004e14:	6923      	ldr	r3, [r4, #16]
 8004e16:	b363      	cbz	r3, 8004e72 <__swbuf_r+0x82>
 8004e18:	6923      	ldr	r3, [r4, #16]
 8004e1a:	6820      	ldr	r0, [r4, #0]
 8004e1c:	b2f6      	uxtb	r6, r6
 8004e1e:	1ac0      	subs	r0, r0, r3
 8004e20:	6963      	ldr	r3, [r4, #20]
 8004e22:	4637      	mov	r7, r6
 8004e24:	4283      	cmp	r3, r0
 8004e26:	dc04      	bgt.n	8004e32 <__swbuf_r+0x42>
 8004e28:	4621      	mov	r1, r4
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f000 f926 	bl	800507c <_fflush_r>
 8004e30:	bb28      	cbnz	r0, 8004e7e <__swbuf_r+0x8e>
 8004e32:	68a3      	ldr	r3, [r4, #8]
 8004e34:	3001      	adds	r0, #1
 8004e36:	3b01      	subs	r3, #1
 8004e38:	60a3      	str	r3, [r4, #8]
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	6022      	str	r2, [r4, #0]
 8004e40:	701e      	strb	r6, [r3, #0]
 8004e42:	6963      	ldr	r3, [r4, #20]
 8004e44:	4283      	cmp	r3, r0
 8004e46:	d004      	beq.n	8004e52 <__swbuf_r+0x62>
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	07db      	lsls	r3, r3, #31
 8004e4c:	d519      	bpl.n	8004e82 <__swbuf_r+0x92>
 8004e4e:	2e0a      	cmp	r6, #10
 8004e50:	d117      	bne.n	8004e82 <__swbuf_r+0x92>
 8004e52:	4621      	mov	r1, r4
 8004e54:	4628      	mov	r0, r5
 8004e56:	f000 f911 	bl	800507c <_fflush_r>
 8004e5a:	b190      	cbz	r0, 8004e82 <__swbuf_r+0x92>
 8004e5c:	e00f      	b.n	8004e7e <__swbuf_r+0x8e>
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <__swbuf_r+0x9c>)
 8004e60:	429c      	cmp	r4, r3
 8004e62:	d101      	bne.n	8004e68 <__swbuf_r+0x78>
 8004e64:	68ac      	ldr	r4, [r5, #8]
 8004e66:	e7d0      	b.n	8004e0a <__swbuf_r+0x1a>
 8004e68:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <__swbuf_r+0xa0>)
 8004e6a:	429c      	cmp	r4, r3
 8004e6c:	bf08      	it	eq
 8004e6e:	68ec      	ldreq	r4, [r5, #12]
 8004e70:	e7cb      	b.n	8004e0a <__swbuf_r+0x1a>
 8004e72:	4621      	mov	r1, r4
 8004e74:	4628      	mov	r0, r5
 8004e76:	f000 f80d 	bl	8004e94 <__swsetup_r>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	d0cc      	beq.n	8004e18 <__swbuf_r+0x28>
 8004e7e:	f04f 37ff 	mov.w	r7, #4294967295
 8004e82:	4638      	mov	r0, r7
 8004e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e86:	bf00      	nop
 8004e88:	08006094 	.word	0x08006094
 8004e8c:	080060b4 	.word	0x080060b4
 8004e90:	08006074 	.word	0x08006074

08004e94 <__swsetup_r>:
 8004e94:	4b32      	ldr	r3, [pc, #200]	; (8004f60 <__swsetup_r+0xcc>)
 8004e96:	b570      	push	{r4, r5, r6, lr}
 8004e98:	681d      	ldr	r5, [r3, #0]
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	460c      	mov	r4, r1
 8004e9e:	b125      	cbz	r5, 8004eaa <__swsetup_r+0x16>
 8004ea0:	69ab      	ldr	r3, [r5, #24]
 8004ea2:	b913      	cbnz	r3, 8004eaa <__swsetup_r+0x16>
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	f000 f953 	bl	8005150 <__sinit>
 8004eaa:	4b2e      	ldr	r3, [pc, #184]	; (8004f64 <__swsetup_r+0xd0>)
 8004eac:	429c      	cmp	r4, r3
 8004eae:	d10f      	bne.n	8004ed0 <__swsetup_r+0x3c>
 8004eb0:	686c      	ldr	r4, [r5, #4]
 8004eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	0715      	lsls	r5, r2, #28
 8004eba:	d42c      	bmi.n	8004f16 <__swsetup_r+0x82>
 8004ebc:	06d0      	lsls	r0, r2, #27
 8004ebe:	d411      	bmi.n	8004ee4 <__swsetup_r+0x50>
 8004ec0:	2209      	movs	r2, #9
 8004ec2:	6032      	str	r2, [r6, #0]
 8004ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ec8:	81a3      	strh	r3, [r4, #12]
 8004eca:	f04f 30ff 	mov.w	r0, #4294967295
 8004ece:	e03e      	b.n	8004f4e <__swsetup_r+0xba>
 8004ed0:	4b25      	ldr	r3, [pc, #148]	; (8004f68 <__swsetup_r+0xd4>)
 8004ed2:	429c      	cmp	r4, r3
 8004ed4:	d101      	bne.n	8004eda <__swsetup_r+0x46>
 8004ed6:	68ac      	ldr	r4, [r5, #8]
 8004ed8:	e7eb      	b.n	8004eb2 <__swsetup_r+0x1e>
 8004eda:	4b24      	ldr	r3, [pc, #144]	; (8004f6c <__swsetup_r+0xd8>)
 8004edc:	429c      	cmp	r4, r3
 8004ede:	bf08      	it	eq
 8004ee0:	68ec      	ldreq	r4, [r5, #12]
 8004ee2:	e7e6      	b.n	8004eb2 <__swsetup_r+0x1e>
 8004ee4:	0751      	lsls	r1, r2, #29
 8004ee6:	d512      	bpl.n	8004f0e <__swsetup_r+0x7a>
 8004ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eea:	b141      	cbz	r1, 8004efe <__swsetup_r+0x6a>
 8004eec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ef0:	4299      	cmp	r1, r3
 8004ef2:	d002      	beq.n	8004efa <__swsetup_r+0x66>
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	f000 fa21 	bl	800533c <_free_r>
 8004efa:	2300      	movs	r3, #0
 8004efc:	6363      	str	r3, [r4, #52]	; 0x34
 8004efe:	89a3      	ldrh	r3, [r4, #12]
 8004f00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f04:	81a3      	strh	r3, [r4, #12]
 8004f06:	2300      	movs	r3, #0
 8004f08:	6063      	str	r3, [r4, #4]
 8004f0a:	6923      	ldr	r3, [r4, #16]
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	89a3      	ldrh	r3, [r4, #12]
 8004f10:	f043 0308 	orr.w	r3, r3, #8
 8004f14:	81a3      	strh	r3, [r4, #12]
 8004f16:	6923      	ldr	r3, [r4, #16]
 8004f18:	b94b      	cbnz	r3, 8004f2e <__swsetup_r+0x9a>
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f24:	d003      	beq.n	8004f2e <__swsetup_r+0x9a>
 8004f26:	4621      	mov	r1, r4
 8004f28:	4630      	mov	r0, r6
 8004f2a:	f000 f9bf 	bl	80052ac <__smakebuf_r>
 8004f2e:	89a2      	ldrh	r2, [r4, #12]
 8004f30:	f012 0301 	ands.w	r3, r2, #1
 8004f34:	d00c      	beq.n	8004f50 <__swsetup_r+0xbc>
 8004f36:	2300      	movs	r3, #0
 8004f38:	60a3      	str	r3, [r4, #8]
 8004f3a:	6963      	ldr	r3, [r4, #20]
 8004f3c:	425b      	negs	r3, r3
 8004f3e:	61a3      	str	r3, [r4, #24]
 8004f40:	6923      	ldr	r3, [r4, #16]
 8004f42:	b953      	cbnz	r3, 8004f5a <__swsetup_r+0xc6>
 8004f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f48:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004f4c:	d1ba      	bne.n	8004ec4 <__swsetup_r+0x30>
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
 8004f50:	0792      	lsls	r2, r2, #30
 8004f52:	bf58      	it	pl
 8004f54:	6963      	ldrpl	r3, [r4, #20]
 8004f56:	60a3      	str	r3, [r4, #8]
 8004f58:	e7f2      	b.n	8004f40 <__swsetup_r+0xac>
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	e7f7      	b.n	8004f4e <__swsetup_r+0xba>
 8004f5e:	bf00      	nop
 8004f60:	20000014 	.word	0x20000014
 8004f64:	08006094 	.word	0x08006094
 8004f68:	080060b4 	.word	0x080060b4
 8004f6c:	08006074 	.word	0x08006074

08004f70 <__sflush_r>:
 8004f70:	898a      	ldrh	r2, [r1, #12]
 8004f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f76:	4605      	mov	r5, r0
 8004f78:	0710      	lsls	r0, r2, #28
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	d458      	bmi.n	8005030 <__sflush_r+0xc0>
 8004f7e:	684b      	ldr	r3, [r1, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	dc05      	bgt.n	8004f90 <__sflush_r+0x20>
 8004f84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	dc02      	bgt.n	8004f90 <__sflush_r+0x20>
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f92:	2e00      	cmp	r6, #0
 8004f94:	d0f9      	beq.n	8004f8a <__sflush_r+0x1a>
 8004f96:	2300      	movs	r3, #0
 8004f98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f9c:	682f      	ldr	r7, [r5, #0]
 8004f9e:	6a21      	ldr	r1, [r4, #32]
 8004fa0:	602b      	str	r3, [r5, #0]
 8004fa2:	d032      	beq.n	800500a <__sflush_r+0x9a>
 8004fa4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fa6:	89a3      	ldrh	r3, [r4, #12]
 8004fa8:	075a      	lsls	r2, r3, #29
 8004faa:	d505      	bpl.n	8004fb8 <__sflush_r+0x48>
 8004fac:	6863      	ldr	r3, [r4, #4]
 8004fae:	1ac0      	subs	r0, r0, r3
 8004fb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fb2:	b10b      	cbz	r3, 8004fb8 <__sflush_r+0x48>
 8004fb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fb6:	1ac0      	subs	r0, r0, r3
 8004fb8:	2300      	movs	r3, #0
 8004fba:	4602      	mov	r2, r0
 8004fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fbe:	6a21      	ldr	r1, [r4, #32]
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	47b0      	blx	r6
 8004fc4:	1c43      	adds	r3, r0, #1
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	d106      	bne.n	8004fd8 <__sflush_r+0x68>
 8004fca:	6829      	ldr	r1, [r5, #0]
 8004fcc:	291d      	cmp	r1, #29
 8004fce:	d848      	bhi.n	8005062 <__sflush_r+0xf2>
 8004fd0:	4a29      	ldr	r2, [pc, #164]	; (8005078 <__sflush_r+0x108>)
 8004fd2:	40ca      	lsrs	r2, r1
 8004fd4:	07d6      	lsls	r6, r2, #31
 8004fd6:	d544      	bpl.n	8005062 <__sflush_r+0xf2>
 8004fd8:	2200      	movs	r2, #0
 8004fda:	6062      	str	r2, [r4, #4]
 8004fdc:	6922      	ldr	r2, [r4, #16]
 8004fde:	04d9      	lsls	r1, r3, #19
 8004fe0:	6022      	str	r2, [r4, #0]
 8004fe2:	d504      	bpl.n	8004fee <__sflush_r+0x7e>
 8004fe4:	1c42      	adds	r2, r0, #1
 8004fe6:	d101      	bne.n	8004fec <__sflush_r+0x7c>
 8004fe8:	682b      	ldr	r3, [r5, #0]
 8004fea:	b903      	cbnz	r3, 8004fee <__sflush_r+0x7e>
 8004fec:	6560      	str	r0, [r4, #84]	; 0x54
 8004fee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ff0:	602f      	str	r7, [r5, #0]
 8004ff2:	2900      	cmp	r1, #0
 8004ff4:	d0c9      	beq.n	8004f8a <__sflush_r+0x1a>
 8004ff6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ffa:	4299      	cmp	r1, r3
 8004ffc:	d002      	beq.n	8005004 <__sflush_r+0x94>
 8004ffe:	4628      	mov	r0, r5
 8005000:	f000 f99c 	bl	800533c <_free_r>
 8005004:	2000      	movs	r0, #0
 8005006:	6360      	str	r0, [r4, #52]	; 0x34
 8005008:	e7c0      	b.n	8004f8c <__sflush_r+0x1c>
 800500a:	2301      	movs	r3, #1
 800500c:	4628      	mov	r0, r5
 800500e:	47b0      	blx	r6
 8005010:	1c41      	adds	r1, r0, #1
 8005012:	d1c8      	bne.n	8004fa6 <__sflush_r+0x36>
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0c5      	beq.n	8004fa6 <__sflush_r+0x36>
 800501a:	2b1d      	cmp	r3, #29
 800501c:	d001      	beq.n	8005022 <__sflush_r+0xb2>
 800501e:	2b16      	cmp	r3, #22
 8005020:	d101      	bne.n	8005026 <__sflush_r+0xb6>
 8005022:	602f      	str	r7, [r5, #0]
 8005024:	e7b1      	b.n	8004f8a <__sflush_r+0x1a>
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800502c:	81a3      	strh	r3, [r4, #12]
 800502e:	e7ad      	b.n	8004f8c <__sflush_r+0x1c>
 8005030:	690f      	ldr	r7, [r1, #16]
 8005032:	2f00      	cmp	r7, #0
 8005034:	d0a9      	beq.n	8004f8a <__sflush_r+0x1a>
 8005036:	0793      	lsls	r3, r2, #30
 8005038:	bf18      	it	ne
 800503a:	2300      	movne	r3, #0
 800503c:	680e      	ldr	r6, [r1, #0]
 800503e:	bf08      	it	eq
 8005040:	694b      	ldreq	r3, [r1, #20]
 8005042:	eba6 0807 	sub.w	r8, r6, r7
 8005046:	600f      	str	r7, [r1, #0]
 8005048:	608b      	str	r3, [r1, #8]
 800504a:	f1b8 0f00 	cmp.w	r8, #0
 800504e:	dd9c      	ble.n	8004f8a <__sflush_r+0x1a>
 8005050:	4643      	mov	r3, r8
 8005052:	463a      	mov	r2, r7
 8005054:	6a21      	ldr	r1, [r4, #32]
 8005056:	4628      	mov	r0, r5
 8005058:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800505a:	47b0      	blx	r6
 800505c:	2800      	cmp	r0, #0
 800505e:	dc06      	bgt.n	800506e <__sflush_r+0xfe>
 8005060:	89a3      	ldrh	r3, [r4, #12]
 8005062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005066:	81a3      	strh	r3, [r4, #12]
 8005068:	f04f 30ff 	mov.w	r0, #4294967295
 800506c:	e78e      	b.n	8004f8c <__sflush_r+0x1c>
 800506e:	4407      	add	r7, r0
 8005070:	eba8 0800 	sub.w	r8, r8, r0
 8005074:	e7e9      	b.n	800504a <__sflush_r+0xda>
 8005076:	bf00      	nop
 8005078:	20400001 	.word	0x20400001

0800507c <_fflush_r>:
 800507c:	b538      	push	{r3, r4, r5, lr}
 800507e:	690b      	ldr	r3, [r1, #16]
 8005080:	4605      	mov	r5, r0
 8005082:	460c      	mov	r4, r1
 8005084:	b1db      	cbz	r3, 80050be <_fflush_r+0x42>
 8005086:	b118      	cbz	r0, 8005090 <_fflush_r+0x14>
 8005088:	6983      	ldr	r3, [r0, #24]
 800508a:	b90b      	cbnz	r3, 8005090 <_fflush_r+0x14>
 800508c:	f000 f860 	bl	8005150 <__sinit>
 8005090:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <_fflush_r+0x48>)
 8005092:	429c      	cmp	r4, r3
 8005094:	d109      	bne.n	80050aa <_fflush_r+0x2e>
 8005096:	686c      	ldr	r4, [r5, #4]
 8005098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800509c:	b17b      	cbz	r3, 80050be <_fflush_r+0x42>
 800509e:	4621      	mov	r1, r4
 80050a0:	4628      	mov	r0, r5
 80050a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050a6:	f7ff bf63 	b.w	8004f70 <__sflush_r>
 80050aa:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <_fflush_r+0x4c>)
 80050ac:	429c      	cmp	r4, r3
 80050ae:	d101      	bne.n	80050b4 <_fflush_r+0x38>
 80050b0:	68ac      	ldr	r4, [r5, #8]
 80050b2:	e7f1      	b.n	8005098 <_fflush_r+0x1c>
 80050b4:	4b05      	ldr	r3, [pc, #20]	; (80050cc <_fflush_r+0x50>)
 80050b6:	429c      	cmp	r4, r3
 80050b8:	bf08      	it	eq
 80050ba:	68ec      	ldreq	r4, [r5, #12]
 80050bc:	e7ec      	b.n	8005098 <_fflush_r+0x1c>
 80050be:	2000      	movs	r0, #0
 80050c0:	bd38      	pop	{r3, r4, r5, pc}
 80050c2:	bf00      	nop
 80050c4:	08006094 	.word	0x08006094
 80050c8:	080060b4 	.word	0x080060b4
 80050cc:	08006074 	.word	0x08006074

080050d0 <std>:
 80050d0:	2300      	movs	r3, #0
 80050d2:	b510      	push	{r4, lr}
 80050d4:	4604      	mov	r4, r0
 80050d6:	e9c0 3300 	strd	r3, r3, [r0]
 80050da:	6083      	str	r3, [r0, #8]
 80050dc:	8181      	strh	r1, [r0, #12]
 80050de:	6643      	str	r3, [r0, #100]	; 0x64
 80050e0:	81c2      	strh	r2, [r0, #14]
 80050e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050e6:	6183      	str	r3, [r0, #24]
 80050e8:	4619      	mov	r1, r3
 80050ea:	2208      	movs	r2, #8
 80050ec:	305c      	adds	r0, #92	; 0x5c
 80050ee:	f7ff fd4d 	bl	8004b8c <memset>
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <std+0x38>)
 80050f4:	6224      	str	r4, [r4, #32]
 80050f6:	6263      	str	r3, [r4, #36]	; 0x24
 80050f8:	4b04      	ldr	r3, [pc, #16]	; (800510c <std+0x3c>)
 80050fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80050fc:	4b04      	ldr	r3, [pc, #16]	; (8005110 <std+0x40>)
 80050fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005100:	4b04      	ldr	r3, [pc, #16]	; (8005114 <std+0x44>)
 8005102:	6323      	str	r3, [r4, #48]	; 0x30
 8005104:	bd10      	pop	{r4, pc}
 8005106:	bf00      	nop
 8005108:	08005a35 	.word	0x08005a35
 800510c:	08005a57 	.word	0x08005a57
 8005110:	08005a8f 	.word	0x08005a8f
 8005114:	08005ab3 	.word	0x08005ab3

08005118 <_cleanup_r>:
 8005118:	4901      	ldr	r1, [pc, #4]	; (8005120 <_cleanup_r+0x8>)
 800511a:	f000 b885 	b.w	8005228 <_fwalk_reent>
 800511e:	bf00      	nop
 8005120:	0800507d 	.word	0x0800507d

08005124 <__sfmoreglue>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	2568      	movs	r5, #104	; 0x68
 8005128:	1e4a      	subs	r2, r1, #1
 800512a:	4355      	muls	r5, r2
 800512c:	460e      	mov	r6, r1
 800512e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005132:	f000 f94f 	bl	80053d4 <_malloc_r>
 8005136:	4604      	mov	r4, r0
 8005138:	b140      	cbz	r0, 800514c <__sfmoreglue+0x28>
 800513a:	2100      	movs	r1, #0
 800513c:	e9c0 1600 	strd	r1, r6, [r0]
 8005140:	300c      	adds	r0, #12
 8005142:	60a0      	str	r0, [r4, #8]
 8005144:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005148:	f7ff fd20 	bl	8004b8c <memset>
 800514c:	4620      	mov	r0, r4
 800514e:	bd70      	pop	{r4, r5, r6, pc}

08005150 <__sinit>:
 8005150:	6983      	ldr	r3, [r0, #24]
 8005152:	b510      	push	{r4, lr}
 8005154:	4604      	mov	r4, r0
 8005156:	bb33      	cbnz	r3, 80051a6 <__sinit+0x56>
 8005158:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800515c:	6503      	str	r3, [r0, #80]	; 0x50
 800515e:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <__sinit+0x58>)
 8005160:	4a12      	ldr	r2, [pc, #72]	; (80051ac <__sinit+0x5c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6282      	str	r2, [r0, #40]	; 0x28
 8005166:	4298      	cmp	r0, r3
 8005168:	bf04      	itt	eq
 800516a:	2301      	moveq	r3, #1
 800516c:	6183      	streq	r3, [r0, #24]
 800516e:	f000 f81f 	bl	80051b0 <__sfp>
 8005172:	6060      	str	r0, [r4, #4]
 8005174:	4620      	mov	r0, r4
 8005176:	f000 f81b 	bl	80051b0 <__sfp>
 800517a:	60a0      	str	r0, [r4, #8]
 800517c:	4620      	mov	r0, r4
 800517e:	f000 f817 	bl	80051b0 <__sfp>
 8005182:	2200      	movs	r2, #0
 8005184:	60e0      	str	r0, [r4, #12]
 8005186:	2104      	movs	r1, #4
 8005188:	6860      	ldr	r0, [r4, #4]
 800518a:	f7ff ffa1 	bl	80050d0 <std>
 800518e:	2201      	movs	r2, #1
 8005190:	2109      	movs	r1, #9
 8005192:	68a0      	ldr	r0, [r4, #8]
 8005194:	f7ff ff9c 	bl	80050d0 <std>
 8005198:	2202      	movs	r2, #2
 800519a:	2112      	movs	r1, #18
 800519c:	68e0      	ldr	r0, [r4, #12]
 800519e:	f7ff ff97 	bl	80050d0 <std>
 80051a2:	2301      	movs	r3, #1
 80051a4:	61a3      	str	r3, [r4, #24]
 80051a6:	bd10      	pop	{r4, pc}
 80051a8:	08006070 	.word	0x08006070
 80051ac:	08005119 	.word	0x08005119

080051b0 <__sfp>:
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b2:	4b1b      	ldr	r3, [pc, #108]	; (8005220 <__sfp+0x70>)
 80051b4:	4607      	mov	r7, r0
 80051b6:	681e      	ldr	r6, [r3, #0]
 80051b8:	69b3      	ldr	r3, [r6, #24]
 80051ba:	b913      	cbnz	r3, 80051c2 <__sfp+0x12>
 80051bc:	4630      	mov	r0, r6
 80051be:	f7ff ffc7 	bl	8005150 <__sinit>
 80051c2:	3648      	adds	r6, #72	; 0x48
 80051c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	d503      	bpl.n	80051d4 <__sfp+0x24>
 80051cc:	6833      	ldr	r3, [r6, #0]
 80051ce:	b133      	cbz	r3, 80051de <__sfp+0x2e>
 80051d0:	6836      	ldr	r6, [r6, #0]
 80051d2:	e7f7      	b.n	80051c4 <__sfp+0x14>
 80051d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051d8:	b16d      	cbz	r5, 80051f6 <__sfp+0x46>
 80051da:	3468      	adds	r4, #104	; 0x68
 80051dc:	e7f4      	b.n	80051c8 <__sfp+0x18>
 80051de:	2104      	movs	r1, #4
 80051e0:	4638      	mov	r0, r7
 80051e2:	f7ff ff9f 	bl	8005124 <__sfmoreglue>
 80051e6:	6030      	str	r0, [r6, #0]
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d1f1      	bne.n	80051d0 <__sfp+0x20>
 80051ec:	230c      	movs	r3, #12
 80051ee:	4604      	mov	r4, r0
 80051f0:	603b      	str	r3, [r7, #0]
 80051f2:	4620      	mov	r0, r4
 80051f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051f6:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <__sfp+0x74>)
 80051f8:	6665      	str	r5, [r4, #100]	; 0x64
 80051fa:	e9c4 5500 	strd	r5, r5, [r4]
 80051fe:	60a5      	str	r5, [r4, #8]
 8005200:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005204:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005208:	2208      	movs	r2, #8
 800520a:	4629      	mov	r1, r5
 800520c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005210:	f7ff fcbc 	bl	8004b8c <memset>
 8005214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800521c:	e7e9      	b.n	80051f2 <__sfp+0x42>
 800521e:	bf00      	nop
 8005220:	08006070 	.word	0x08006070
 8005224:	ffff0001 	.word	0xffff0001

08005228 <_fwalk_reent>:
 8005228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800522c:	4680      	mov	r8, r0
 800522e:	4689      	mov	r9, r1
 8005230:	2600      	movs	r6, #0
 8005232:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005236:	b914      	cbnz	r4, 800523e <_fwalk_reent+0x16>
 8005238:	4630      	mov	r0, r6
 800523a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800523e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005242:	3f01      	subs	r7, #1
 8005244:	d501      	bpl.n	800524a <_fwalk_reent+0x22>
 8005246:	6824      	ldr	r4, [r4, #0]
 8005248:	e7f5      	b.n	8005236 <_fwalk_reent+0xe>
 800524a:	89ab      	ldrh	r3, [r5, #12]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d907      	bls.n	8005260 <_fwalk_reent+0x38>
 8005250:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005254:	3301      	adds	r3, #1
 8005256:	d003      	beq.n	8005260 <_fwalk_reent+0x38>
 8005258:	4629      	mov	r1, r5
 800525a:	4640      	mov	r0, r8
 800525c:	47c8      	blx	r9
 800525e:	4306      	orrs	r6, r0
 8005260:	3568      	adds	r5, #104	; 0x68
 8005262:	e7ee      	b.n	8005242 <_fwalk_reent+0x1a>

08005264 <__swhatbuf_r>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	460e      	mov	r6, r1
 8005268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800526c:	b096      	sub	sp, #88	; 0x58
 800526e:	2900      	cmp	r1, #0
 8005270:	4614      	mov	r4, r2
 8005272:	461d      	mov	r5, r3
 8005274:	da07      	bge.n	8005286 <__swhatbuf_r+0x22>
 8005276:	2300      	movs	r3, #0
 8005278:	602b      	str	r3, [r5, #0]
 800527a:	89b3      	ldrh	r3, [r6, #12]
 800527c:	061a      	lsls	r2, r3, #24
 800527e:	d410      	bmi.n	80052a2 <__swhatbuf_r+0x3e>
 8005280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005284:	e00e      	b.n	80052a4 <__swhatbuf_r+0x40>
 8005286:	466a      	mov	r2, sp
 8005288:	f000 fc3a 	bl	8005b00 <_fstat_r>
 800528c:	2800      	cmp	r0, #0
 800528e:	dbf2      	blt.n	8005276 <__swhatbuf_r+0x12>
 8005290:	9a01      	ldr	r2, [sp, #4]
 8005292:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005296:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800529a:	425a      	negs	r2, r3
 800529c:	415a      	adcs	r2, r3
 800529e:	602a      	str	r2, [r5, #0]
 80052a0:	e7ee      	b.n	8005280 <__swhatbuf_r+0x1c>
 80052a2:	2340      	movs	r3, #64	; 0x40
 80052a4:	2000      	movs	r0, #0
 80052a6:	6023      	str	r3, [r4, #0]
 80052a8:	b016      	add	sp, #88	; 0x58
 80052aa:	bd70      	pop	{r4, r5, r6, pc}

080052ac <__smakebuf_r>:
 80052ac:	898b      	ldrh	r3, [r1, #12]
 80052ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052b0:	079d      	lsls	r5, r3, #30
 80052b2:	4606      	mov	r6, r0
 80052b4:	460c      	mov	r4, r1
 80052b6:	d507      	bpl.n	80052c8 <__smakebuf_r+0x1c>
 80052b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052bc:	6023      	str	r3, [r4, #0]
 80052be:	6123      	str	r3, [r4, #16]
 80052c0:	2301      	movs	r3, #1
 80052c2:	6163      	str	r3, [r4, #20]
 80052c4:	b002      	add	sp, #8
 80052c6:	bd70      	pop	{r4, r5, r6, pc}
 80052c8:	ab01      	add	r3, sp, #4
 80052ca:	466a      	mov	r2, sp
 80052cc:	f7ff ffca 	bl	8005264 <__swhatbuf_r>
 80052d0:	9900      	ldr	r1, [sp, #0]
 80052d2:	4605      	mov	r5, r0
 80052d4:	4630      	mov	r0, r6
 80052d6:	f000 f87d 	bl	80053d4 <_malloc_r>
 80052da:	b948      	cbnz	r0, 80052f0 <__smakebuf_r+0x44>
 80052dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052e0:	059a      	lsls	r2, r3, #22
 80052e2:	d4ef      	bmi.n	80052c4 <__smakebuf_r+0x18>
 80052e4:	f023 0303 	bic.w	r3, r3, #3
 80052e8:	f043 0302 	orr.w	r3, r3, #2
 80052ec:	81a3      	strh	r3, [r4, #12]
 80052ee:	e7e3      	b.n	80052b8 <__smakebuf_r+0xc>
 80052f0:	4b0d      	ldr	r3, [pc, #52]	; (8005328 <__smakebuf_r+0x7c>)
 80052f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80052f4:	89a3      	ldrh	r3, [r4, #12]
 80052f6:	6020      	str	r0, [r4, #0]
 80052f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fc:	81a3      	strh	r3, [r4, #12]
 80052fe:	9b00      	ldr	r3, [sp, #0]
 8005300:	6120      	str	r0, [r4, #16]
 8005302:	6163      	str	r3, [r4, #20]
 8005304:	9b01      	ldr	r3, [sp, #4]
 8005306:	b15b      	cbz	r3, 8005320 <__smakebuf_r+0x74>
 8005308:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800530c:	4630      	mov	r0, r6
 800530e:	f000 fc09 	bl	8005b24 <_isatty_r>
 8005312:	b128      	cbz	r0, 8005320 <__smakebuf_r+0x74>
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	f023 0303 	bic.w	r3, r3, #3
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	81a3      	strh	r3, [r4, #12]
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	431d      	orrs	r5, r3
 8005324:	81a5      	strh	r5, [r4, #12]
 8005326:	e7cd      	b.n	80052c4 <__smakebuf_r+0x18>
 8005328:	08005119 	.word	0x08005119

0800532c <malloc>:
 800532c:	4b02      	ldr	r3, [pc, #8]	; (8005338 <malloc+0xc>)
 800532e:	4601      	mov	r1, r0
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	f000 b84f 	b.w	80053d4 <_malloc_r>
 8005336:	bf00      	nop
 8005338:	20000014 	.word	0x20000014

0800533c <_free_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4605      	mov	r5, r0
 8005340:	2900      	cmp	r1, #0
 8005342:	d043      	beq.n	80053cc <_free_r+0x90>
 8005344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005348:	1f0c      	subs	r4, r1, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	bfb8      	it	lt
 800534e:	18e4      	addlt	r4, r4, r3
 8005350:	f000 fc18 	bl	8005b84 <__malloc_lock>
 8005354:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <_free_r+0x94>)
 8005356:	6813      	ldr	r3, [r2, #0]
 8005358:	4610      	mov	r0, r2
 800535a:	b933      	cbnz	r3, 800536a <_free_r+0x2e>
 800535c:	6063      	str	r3, [r4, #4]
 800535e:	6014      	str	r4, [r2, #0]
 8005360:	4628      	mov	r0, r5
 8005362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005366:	f000 bc0e 	b.w	8005b86 <__malloc_unlock>
 800536a:	42a3      	cmp	r3, r4
 800536c:	d90b      	bls.n	8005386 <_free_r+0x4a>
 800536e:	6821      	ldr	r1, [r4, #0]
 8005370:	1862      	adds	r2, r4, r1
 8005372:	4293      	cmp	r3, r2
 8005374:	bf01      	itttt	eq
 8005376:	681a      	ldreq	r2, [r3, #0]
 8005378:	685b      	ldreq	r3, [r3, #4]
 800537a:	1852      	addeq	r2, r2, r1
 800537c:	6022      	streq	r2, [r4, #0]
 800537e:	6063      	str	r3, [r4, #4]
 8005380:	6004      	str	r4, [r0, #0]
 8005382:	e7ed      	b.n	8005360 <_free_r+0x24>
 8005384:	4613      	mov	r3, r2
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	b10a      	cbz	r2, 800538e <_free_r+0x52>
 800538a:	42a2      	cmp	r2, r4
 800538c:	d9fa      	bls.n	8005384 <_free_r+0x48>
 800538e:	6819      	ldr	r1, [r3, #0]
 8005390:	1858      	adds	r0, r3, r1
 8005392:	42a0      	cmp	r0, r4
 8005394:	d10b      	bne.n	80053ae <_free_r+0x72>
 8005396:	6820      	ldr	r0, [r4, #0]
 8005398:	4401      	add	r1, r0
 800539a:	1858      	adds	r0, r3, r1
 800539c:	4282      	cmp	r2, r0
 800539e:	6019      	str	r1, [r3, #0]
 80053a0:	d1de      	bne.n	8005360 <_free_r+0x24>
 80053a2:	6810      	ldr	r0, [r2, #0]
 80053a4:	6852      	ldr	r2, [r2, #4]
 80053a6:	4401      	add	r1, r0
 80053a8:	6019      	str	r1, [r3, #0]
 80053aa:	605a      	str	r2, [r3, #4]
 80053ac:	e7d8      	b.n	8005360 <_free_r+0x24>
 80053ae:	d902      	bls.n	80053b6 <_free_r+0x7a>
 80053b0:	230c      	movs	r3, #12
 80053b2:	602b      	str	r3, [r5, #0]
 80053b4:	e7d4      	b.n	8005360 <_free_r+0x24>
 80053b6:	6820      	ldr	r0, [r4, #0]
 80053b8:	1821      	adds	r1, r4, r0
 80053ba:	428a      	cmp	r2, r1
 80053bc:	bf01      	itttt	eq
 80053be:	6811      	ldreq	r1, [r2, #0]
 80053c0:	6852      	ldreq	r2, [r2, #4]
 80053c2:	1809      	addeq	r1, r1, r0
 80053c4:	6021      	streq	r1, [r4, #0]
 80053c6:	6062      	str	r2, [r4, #4]
 80053c8:	605c      	str	r4, [r3, #4]
 80053ca:	e7c9      	b.n	8005360 <_free_r+0x24>
 80053cc:	bd38      	pop	{r3, r4, r5, pc}
 80053ce:	bf00      	nop
 80053d0:	200000a4 	.word	0x200000a4

080053d4 <_malloc_r>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	1ccd      	adds	r5, r1, #3
 80053d8:	f025 0503 	bic.w	r5, r5, #3
 80053dc:	3508      	adds	r5, #8
 80053de:	2d0c      	cmp	r5, #12
 80053e0:	bf38      	it	cc
 80053e2:	250c      	movcc	r5, #12
 80053e4:	2d00      	cmp	r5, #0
 80053e6:	4606      	mov	r6, r0
 80053e8:	db01      	blt.n	80053ee <_malloc_r+0x1a>
 80053ea:	42a9      	cmp	r1, r5
 80053ec:	d903      	bls.n	80053f6 <_malloc_r+0x22>
 80053ee:	230c      	movs	r3, #12
 80053f0:	6033      	str	r3, [r6, #0]
 80053f2:	2000      	movs	r0, #0
 80053f4:	bd70      	pop	{r4, r5, r6, pc}
 80053f6:	f000 fbc5 	bl	8005b84 <__malloc_lock>
 80053fa:	4a21      	ldr	r2, [pc, #132]	; (8005480 <_malloc_r+0xac>)
 80053fc:	6814      	ldr	r4, [r2, #0]
 80053fe:	4621      	mov	r1, r4
 8005400:	b991      	cbnz	r1, 8005428 <_malloc_r+0x54>
 8005402:	4c20      	ldr	r4, [pc, #128]	; (8005484 <_malloc_r+0xb0>)
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	b91b      	cbnz	r3, 8005410 <_malloc_r+0x3c>
 8005408:	4630      	mov	r0, r6
 800540a:	f000 fb03 	bl	8005a14 <_sbrk_r>
 800540e:	6020      	str	r0, [r4, #0]
 8005410:	4629      	mov	r1, r5
 8005412:	4630      	mov	r0, r6
 8005414:	f000 fafe 	bl	8005a14 <_sbrk_r>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d124      	bne.n	8005466 <_malloc_r+0x92>
 800541c:	230c      	movs	r3, #12
 800541e:	4630      	mov	r0, r6
 8005420:	6033      	str	r3, [r6, #0]
 8005422:	f000 fbb0 	bl	8005b86 <__malloc_unlock>
 8005426:	e7e4      	b.n	80053f2 <_malloc_r+0x1e>
 8005428:	680b      	ldr	r3, [r1, #0]
 800542a:	1b5b      	subs	r3, r3, r5
 800542c:	d418      	bmi.n	8005460 <_malloc_r+0x8c>
 800542e:	2b0b      	cmp	r3, #11
 8005430:	d90f      	bls.n	8005452 <_malloc_r+0x7e>
 8005432:	600b      	str	r3, [r1, #0]
 8005434:	18cc      	adds	r4, r1, r3
 8005436:	50cd      	str	r5, [r1, r3]
 8005438:	4630      	mov	r0, r6
 800543a:	f000 fba4 	bl	8005b86 <__malloc_unlock>
 800543e:	f104 000b 	add.w	r0, r4, #11
 8005442:	1d23      	adds	r3, r4, #4
 8005444:	f020 0007 	bic.w	r0, r0, #7
 8005448:	1ac3      	subs	r3, r0, r3
 800544a:	d0d3      	beq.n	80053f4 <_malloc_r+0x20>
 800544c:	425a      	negs	r2, r3
 800544e:	50e2      	str	r2, [r4, r3]
 8005450:	e7d0      	b.n	80053f4 <_malloc_r+0x20>
 8005452:	684b      	ldr	r3, [r1, #4]
 8005454:	428c      	cmp	r4, r1
 8005456:	bf16      	itet	ne
 8005458:	6063      	strne	r3, [r4, #4]
 800545a:	6013      	streq	r3, [r2, #0]
 800545c:	460c      	movne	r4, r1
 800545e:	e7eb      	b.n	8005438 <_malloc_r+0x64>
 8005460:	460c      	mov	r4, r1
 8005462:	6849      	ldr	r1, [r1, #4]
 8005464:	e7cc      	b.n	8005400 <_malloc_r+0x2c>
 8005466:	1cc4      	adds	r4, r0, #3
 8005468:	f024 0403 	bic.w	r4, r4, #3
 800546c:	42a0      	cmp	r0, r4
 800546e:	d005      	beq.n	800547c <_malloc_r+0xa8>
 8005470:	1a21      	subs	r1, r4, r0
 8005472:	4630      	mov	r0, r6
 8005474:	f000 face 	bl	8005a14 <_sbrk_r>
 8005478:	3001      	adds	r0, #1
 800547a:	d0cf      	beq.n	800541c <_malloc_r+0x48>
 800547c:	6025      	str	r5, [r4, #0]
 800547e:	e7db      	b.n	8005438 <_malloc_r+0x64>
 8005480:	200000a4 	.word	0x200000a4
 8005484:	200000a8 	.word	0x200000a8

08005488 <__sfputc_r>:
 8005488:	6893      	ldr	r3, [r2, #8]
 800548a:	b410      	push	{r4}
 800548c:	3b01      	subs	r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	6093      	str	r3, [r2, #8]
 8005492:	da07      	bge.n	80054a4 <__sfputc_r+0x1c>
 8005494:	6994      	ldr	r4, [r2, #24]
 8005496:	42a3      	cmp	r3, r4
 8005498:	db01      	blt.n	800549e <__sfputc_r+0x16>
 800549a:	290a      	cmp	r1, #10
 800549c:	d102      	bne.n	80054a4 <__sfputc_r+0x1c>
 800549e:	bc10      	pop	{r4}
 80054a0:	f7ff bca6 	b.w	8004df0 <__swbuf_r>
 80054a4:	6813      	ldr	r3, [r2, #0]
 80054a6:	1c58      	adds	r0, r3, #1
 80054a8:	6010      	str	r0, [r2, #0]
 80054aa:	7019      	strb	r1, [r3, #0]
 80054ac:	4608      	mov	r0, r1
 80054ae:	bc10      	pop	{r4}
 80054b0:	4770      	bx	lr

080054b2 <__sfputs_r>:
 80054b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b4:	4606      	mov	r6, r0
 80054b6:	460f      	mov	r7, r1
 80054b8:	4614      	mov	r4, r2
 80054ba:	18d5      	adds	r5, r2, r3
 80054bc:	42ac      	cmp	r4, r5
 80054be:	d101      	bne.n	80054c4 <__sfputs_r+0x12>
 80054c0:	2000      	movs	r0, #0
 80054c2:	e007      	b.n	80054d4 <__sfputs_r+0x22>
 80054c4:	463a      	mov	r2, r7
 80054c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ca:	4630      	mov	r0, r6
 80054cc:	f7ff ffdc 	bl	8005488 <__sfputc_r>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d1f3      	bne.n	80054bc <__sfputs_r+0xa>
 80054d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054d8 <_vfiprintf_r>:
 80054d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	460c      	mov	r4, r1
 80054de:	b09d      	sub	sp, #116	; 0x74
 80054e0:	4617      	mov	r7, r2
 80054e2:	461d      	mov	r5, r3
 80054e4:	4606      	mov	r6, r0
 80054e6:	b118      	cbz	r0, 80054f0 <_vfiprintf_r+0x18>
 80054e8:	6983      	ldr	r3, [r0, #24]
 80054ea:	b90b      	cbnz	r3, 80054f0 <_vfiprintf_r+0x18>
 80054ec:	f7ff fe30 	bl	8005150 <__sinit>
 80054f0:	4b7c      	ldr	r3, [pc, #496]	; (80056e4 <_vfiprintf_r+0x20c>)
 80054f2:	429c      	cmp	r4, r3
 80054f4:	d158      	bne.n	80055a8 <_vfiprintf_r+0xd0>
 80054f6:	6874      	ldr	r4, [r6, #4]
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	0718      	lsls	r0, r3, #28
 80054fc:	d55e      	bpl.n	80055bc <_vfiprintf_r+0xe4>
 80054fe:	6923      	ldr	r3, [r4, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d05b      	beq.n	80055bc <_vfiprintf_r+0xe4>
 8005504:	2300      	movs	r3, #0
 8005506:	9309      	str	r3, [sp, #36]	; 0x24
 8005508:	2320      	movs	r3, #32
 800550a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800550e:	2330      	movs	r3, #48	; 0x30
 8005510:	f04f 0b01 	mov.w	fp, #1
 8005514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005518:	9503      	str	r5, [sp, #12]
 800551a:	46b8      	mov	r8, r7
 800551c:	4645      	mov	r5, r8
 800551e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005522:	b10b      	cbz	r3, 8005528 <_vfiprintf_r+0x50>
 8005524:	2b25      	cmp	r3, #37	; 0x25
 8005526:	d154      	bne.n	80055d2 <_vfiprintf_r+0xfa>
 8005528:	ebb8 0a07 	subs.w	sl, r8, r7
 800552c:	d00b      	beq.n	8005546 <_vfiprintf_r+0x6e>
 800552e:	4653      	mov	r3, sl
 8005530:	463a      	mov	r2, r7
 8005532:	4621      	mov	r1, r4
 8005534:	4630      	mov	r0, r6
 8005536:	f7ff ffbc 	bl	80054b2 <__sfputs_r>
 800553a:	3001      	adds	r0, #1
 800553c:	f000 80c2 	beq.w	80056c4 <_vfiprintf_r+0x1ec>
 8005540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005542:	4453      	add	r3, sl
 8005544:	9309      	str	r3, [sp, #36]	; 0x24
 8005546:	f898 3000 	ldrb.w	r3, [r8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 80ba 	beq.w	80056c4 <_vfiprintf_r+0x1ec>
 8005550:	2300      	movs	r3, #0
 8005552:	f04f 32ff 	mov.w	r2, #4294967295
 8005556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800555a:	9304      	str	r3, [sp, #16]
 800555c:	9307      	str	r3, [sp, #28]
 800555e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005562:	931a      	str	r3, [sp, #104]	; 0x68
 8005564:	46a8      	mov	r8, r5
 8005566:	2205      	movs	r2, #5
 8005568:	f818 1b01 	ldrb.w	r1, [r8], #1
 800556c:	485e      	ldr	r0, [pc, #376]	; (80056e8 <_vfiprintf_r+0x210>)
 800556e:	f000 fafb 	bl	8005b68 <memchr>
 8005572:	9b04      	ldr	r3, [sp, #16]
 8005574:	bb78      	cbnz	r0, 80055d6 <_vfiprintf_r+0xfe>
 8005576:	06d9      	lsls	r1, r3, #27
 8005578:	bf44      	itt	mi
 800557a:	2220      	movmi	r2, #32
 800557c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005580:	071a      	lsls	r2, r3, #28
 8005582:	bf44      	itt	mi
 8005584:	222b      	movmi	r2, #43	; 0x2b
 8005586:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800558a:	782a      	ldrb	r2, [r5, #0]
 800558c:	2a2a      	cmp	r2, #42	; 0x2a
 800558e:	d02a      	beq.n	80055e6 <_vfiprintf_r+0x10e>
 8005590:	46a8      	mov	r8, r5
 8005592:	2000      	movs	r0, #0
 8005594:	250a      	movs	r5, #10
 8005596:	9a07      	ldr	r2, [sp, #28]
 8005598:	4641      	mov	r1, r8
 800559a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800559e:	3b30      	subs	r3, #48	; 0x30
 80055a0:	2b09      	cmp	r3, #9
 80055a2:	d969      	bls.n	8005678 <_vfiprintf_r+0x1a0>
 80055a4:	b360      	cbz	r0, 8005600 <_vfiprintf_r+0x128>
 80055a6:	e024      	b.n	80055f2 <_vfiprintf_r+0x11a>
 80055a8:	4b50      	ldr	r3, [pc, #320]	; (80056ec <_vfiprintf_r+0x214>)
 80055aa:	429c      	cmp	r4, r3
 80055ac:	d101      	bne.n	80055b2 <_vfiprintf_r+0xda>
 80055ae:	68b4      	ldr	r4, [r6, #8]
 80055b0:	e7a2      	b.n	80054f8 <_vfiprintf_r+0x20>
 80055b2:	4b4f      	ldr	r3, [pc, #316]	; (80056f0 <_vfiprintf_r+0x218>)
 80055b4:	429c      	cmp	r4, r3
 80055b6:	bf08      	it	eq
 80055b8:	68f4      	ldreq	r4, [r6, #12]
 80055ba:	e79d      	b.n	80054f8 <_vfiprintf_r+0x20>
 80055bc:	4621      	mov	r1, r4
 80055be:	4630      	mov	r0, r6
 80055c0:	f7ff fc68 	bl	8004e94 <__swsetup_r>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d09d      	beq.n	8005504 <_vfiprintf_r+0x2c>
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295
 80055cc:	b01d      	add	sp, #116	; 0x74
 80055ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d2:	46a8      	mov	r8, r5
 80055d4:	e7a2      	b.n	800551c <_vfiprintf_r+0x44>
 80055d6:	4a44      	ldr	r2, [pc, #272]	; (80056e8 <_vfiprintf_r+0x210>)
 80055d8:	4645      	mov	r5, r8
 80055da:	1a80      	subs	r0, r0, r2
 80055dc:	fa0b f000 	lsl.w	r0, fp, r0
 80055e0:	4318      	orrs	r0, r3
 80055e2:	9004      	str	r0, [sp, #16]
 80055e4:	e7be      	b.n	8005564 <_vfiprintf_r+0x8c>
 80055e6:	9a03      	ldr	r2, [sp, #12]
 80055e8:	1d11      	adds	r1, r2, #4
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	9103      	str	r1, [sp, #12]
 80055ee:	2a00      	cmp	r2, #0
 80055f0:	db01      	blt.n	80055f6 <_vfiprintf_r+0x11e>
 80055f2:	9207      	str	r2, [sp, #28]
 80055f4:	e004      	b.n	8005600 <_vfiprintf_r+0x128>
 80055f6:	4252      	negs	r2, r2
 80055f8:	f043 0302 	orr.w	r3, r3, #2
 80055fc:	9207      	str	r2, [sp, #28]
 80055fe:	9304      	str	r3, [sp, #16]
 8005600:	f898 3000 	ldrb.w	r3, [r8]
 8005604:	2b2e      	cmp	r3, #46	; 0x2e
 8005606:	d10e      	bne.n	8005626 <_vfiprintf_r+0x14e>
 8005608:	f898 3001 	ldrb.w	r3, [r8, #1]
 800560c:	2b2a      	cmp	r3, #42	; 0x2a
 800560e:	d138      	bne.n	8005682 <_vfiprintf_r+0x1aa>
 8005610:	9b03      	ldr	r3, [sp, #12]
 8005612:	f108 0802 	add.w	r8, r8, #2
 8005616:	1d1a      	adds	r2, r3, #4
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	9203      	str	r2, [sp, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	bfb8      	it	lt
 8005620:	f04f 33ff 	movlt.w	r3, #4294967295
 8005624:	9305      	str	r3, [sp, #20]
 8005626:	4d33      	ldr	r5, [pc, #204]	; (80056f4 <_vfiprintf_r+0x21c>)
 8005628:	2203      	movs	r2, #3
 800562a:	f898 1000 	ldrb.w	r1, [r8]
 800562e:	4628      	mov	r0, r5
 8005630:	f000 fa9a 	bl	8005b68 <memchr>
 8005634:	b140      	cbz	r0, 8005648 <_vfiprintf_r+0x170>
 8005636:	2340      	movs	r3, #64	; 0x40
 8005638:	1b40      	subs	r0, r0, r5
 800563a:	fa03 f000 	lsl.w	r0, r3, r0
 800563e:	9b04      	ldr	r3, [sp, #16]
 8005640:	f108 0801 	add.w	r8, r8, #1
 8005644:	4303      	orrs	r3, r0
 8005646:	9304      	str	r3, [sp, #16]
 8005648:	f898 1000 	ldrb.w	r1, [r8]
 800564c:	2206      	movs	r2, #6
 800564e:	482a      	ldr	r0, [pc, #168]	; (80056f8 <_vfiprintf_r+0x220>)
 8005650:	f108 0701 	add.w	r7, r8, #1
 8005654:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005658:	f000 fa86 	bl	8005b68 <memchr>
 800565c:	2800      	cmp	r0, #0
 800565e:	d037      	beq.n	80056d0 <_vfiprintf_r+0x1f8>
 8005660:	4b26      	ldr	r3, [pc, #152]	; (80056fc <_vfiprintf_r+0x224>)
 8005662:	bb1b      	cbnz	r3, 80056ac <_vfiprintf_r+0x1d4>
 8005664:	9b03      	ldr	r3, [sp, #12]
 8005666:	3307      	adds	r3, #7
 8005668:	f023 0307 	bic.w	r3, r3, #7
 800566c:	3308      	adds	r3, #8
 800566e:	9303      	str	r3, [sp, #12]
 8005670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005672:	444b      	add	r3, r9
 8005674:	9309      	str	r3, [sp, #36]	; 0x24
 8005676:	e750      	b.n	800551a <_vfiprintf_r+0x42>
 8005678:	fb05 3202 	mla	r2, r5, r2, r3
 800567c:	2001      	movs	r0, #1
 800567e:	4688      	mov	r8, r1
 8005680:	e78a      	b.n	8005598 <_vfiprintf_r+0xc0>
 8005682:	2300      	movs	r3, #0
 8005684:	250a      	movs	r5, #10
 8005686:	4619      	mov	r1, r3
 8005688:	f108 0801 	add.w	r8, r8, #1
 800568c:	9305      	str	r3, [sp, #20]
 800568e:	4640      	mov	r0, r8
 8005690:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005694:	3a30      	subs	r2, #48	; 0x30
 8005696:	2a09      	cmp	r2, #9
 8005698:	d903      	bls.n	80056a2 <_vfiprintf_r+0x1ca>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0c3      	beq.n	8005626 <_vfiprintf_r+0x14e>
 800569e:	9105      	str	r1, [sp, #20]
 80056a0:	e7c1      	b.n	8005626 <_vfiprintf_r+0x14e>
 80056a2:	fb05 2101 	mla	r1, r5, r1, r2
 80056a6:	2301      	movs	r3, #1
 80056a8:	4680      	mov	r8, r0
 80056aa:	e7f0      	b.n	800568e <_vfiprintf_r+0x1b6>
 80056ac:	ab03      	add	r3, sp, #12
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	4622      	mov	r2, r4
 80056b2:	4b13      	ldr	r3, [pc, #76]	; (8005700 <_vfiprintf_r+0x228>)
 80056b4:	a904      	add	r1, sp, #16
 80056b6:	4630      	mov	r0, r6
 80056b8:	f3af 8000 	nop.w
 80056bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80056c0:	4681      	mov	r9, r0
 80056c2:	d1d5      	bne.n	8005670 <_vfiprintf_r+0x198>
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	065b      	lsls	r3, r3, #25
 80056c8:	f53f af7e 	bmi.w	80055c8 <_vfiprintf_r+0xf0>
 80056cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056ce:	e77d      	b.n	80055cc <_vfiprintf_r+0xf4>
 80056d0:	ab03      	add	r3, sp, #12
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	4622      	mov	r2, r4
 80056d6:	4b0a      	ldr	r3, [pc, #40]	; (8005700 <_vfiprintf_r+0x228>)
 80056d8:	a904      	add	r1, sp, #16
 80056da:	4630      	mov	r0, r6
 80056dc:	f000 f888 	bl	80057f0 <_printf_i>
 80056e0:	e7ec      	b.n	80056bc <_vfiprintf_r+0x1e4>
 80056e2:	bf00      	nop
 80056e4:	08006094 	.word	0x08006094
 80056e8:	080060d4 	.word	0x080060d4
 80056ec:	080060b4 	.word	0x080060b4
 80056f0:	08006074 	.word	0x08006074
 80056f4:	080060da 	.word	0x080060da
 80056f8:	080060de 	.word	0x080060de
 80056fc:	00000000 	.word	0x00000000
 8005700:	080054b3 	.word	0x080054b3

08005704 <_printf_common>:
 8005704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005708:	4691      	mov	r9, r2
 800570a:	461f      	mov	r7, r3
 800570c:	688a      	ldr	r2, [r1, #8]
 800570e:	690b      	ldr	r3, [r1, #16]
 8005710:	4606      	mov	r6, r0
 8005712:	4293      	cmp	r3, r2
 8005714:	bfb8      	it	lt
 8005716:	4613      	movlt	r3, r2
 8005718:	f8c9 3000 	str.w	r3, [r9]
 800571c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005720:	460c      	mov	r4, r1
 8005722:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005726:	b112      	cbz	r2, 800572e <_printf_common+0x2a>
 8005728:	3301      	adds	r3, #1
 800572a:	f8c9 3000 	str.w	r3, [r9]
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	0699      	lsls	r1, r3, #26
 8005732:	bf42      	ittt	mi
 8005734:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005738:	3302      	addmi	r3, #2
 800573a:	f8c9 3000 	strmi.w	r3, [r9]
 800573e:	6825      	ldr	r5, [r4, #0]
 8005740:	f015 0506 	ands.w	r5, r5, #6
 8005744:	d107      	bne.n	8005756 <_printf_common+0x52>
 8005746:	f104 0a19 	add.w	sl, r4, #25
 800574a:	68e3      	ldr	r3, [r4, #12]
 800574c:	f8d9 2000 	ldr.w	r2, [r9]
 8005750:	1a9b      	subs	r3, r3, r2
 8005752:	42ab      	cmp	r3, r5
 8005754:	dc29      	bgt.n	80057aa <_printf_common+0xa6>
 8005756:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	3300      	adds	r3, #0
 800575e:	bf18      	it	ne
 8005760:	2301      	movne	r3, #1
 8005762:	0692      	lsls	r2, r2, #26
 8005764:	d42e      	bmi.n	80057c4 <_printf_common+0xc0>
 8005766:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800576a:	4639      	mov	r1, r7
 800576c:	4630      	mov	r0, r6
 800576e:	47c0      	blx	r8
 8005770:	3001      	adds	r0, #1
 8005772:	d021      	beq.n	80057b8 <_printf_common+0xb4>
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	68e5      	ldr	r5, [r4, #12]
 8005778:	f003 0306 	and.w	r3, r3, #6
 800577c:	2b04      	cmp	r3, #4
 800577e:	bf18      	it	ne
 8005780:	2500      	movne	r5, #0
 8005782:	f8d9 2000 	ldr.w	r2, [r9]
 8005786:	f04f 0900 	mov.w	r9, #0
 800578a:	bf08      	it	eq
 800578c:	1aad      	subeq	r5, r5, r2
 800578e:	68a3      	ldr	r3, [r4, #8]
 8005790:	6922      	ldr	r2, [r4, #16]
 8005792:	bf08      	it	eq
 8005794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005798:	4293      	cmp	r3, r2
 800579a:	bfc4      	itt	gt
 800579c:	1a9b      	subgt	r3, r3, r2
 800579e:	18ed      	addgt	r5, r5, r3
 80057a0:	341a      	adds	r4, #26
 80057a2:	454d      	cmp	r5, r9
 80057a4:	d11a      	bne.n	80057dc <_printf_common+0xd8>
 80057a6:	2000      	movs	r0, #0
 80057a8:	e008      	b.n	80057bc <_printf_common+0xb8>
 80057aa:	2301      	movs	r3, #1
 80057ac:	4652      	mov	r2, sl
 80057ae:	4639      	mov	r1, r7
 80057b0:	4630      	mov	r0, r6
 80057b2:	47c0      	blx	r8
 80057b4:	3001      	adds	r0, #1
 80057b6:	d103      	bne.n	80057c0 <_printf_common+0xbc>
 80057b8:	f04f 30ff 	mov.w	r0, #4294967295
 80057bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c0:	3501      	adds	r5, #1
 80057c2:	e7c2      	b.n	800574a <_printf_common+0x46>
 80057c4:	2030      	movs	r0, #48	; 0x30
 80057c6:	18e1      	adds	r1, r4, r3
 80057c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057d2:	4422      	add	r2, r4
 80057d4:	3302      	adds	r3, #2
 80057d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057da:	e7c4      	b.n	8005766 <_printf_common+0x62>
 80057dc:	2301      	movs	r3, #1
 80057de:	4622      	mov	r2, r4
 80057e0:	4639      	mov	r1, r7
 80057e2:	4630      	mov	r0, r6
 80057e4:	47c0      	blx	r8
 80057e6:	3001      	adds	r0, #1
 80057e8:	d0e6      	beq.n	80057b8 <_printf_common+0xb4>
 80057ea:	f109 0901 	add.w	r9, r9, #1
 80057ee:	e7d8      	b.n	80057a2 <_printf_common+0x9e>

080057f0 <_printf_i>:
 80057f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80057f8:	460c      	mov	r4, r1
 80057fa:	7e09      	ldrb	r1, [r1, #24]
 80057fc:	b085      	sub	sp, #20
 80057fe:	296e      	cmp	r1, #110	; 0x6e
 8005800:	4617      	mov	r7, r2
 8005802:	4606      	mov	r6, r0
 8005804:	4698      	mov	r8, r3
 8005806:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005808:	f000 80b3 	beq.w	8005972 <_printf_i+0x182>
 800580c:	d822      	bhi.n	8005854 <_printf_i+0x64>
 800580e:	2963      	cmp	r1, #99	; 0x63
 8005810:	d036      	beq.n	8005880 <_printf_i+0x90>
 8005812:	d80a      	bhi.n	800582a <_printf_i+0x3a>
 8005814:	2900      	cmp	r1, #0
 8005816:	f000 80b9 	beq.w	800598c <_printf_i+0x19c>
 800581a:	2958      	cmp	r1, #88	; 0x58
 800581c:	f000 8083 	beq.w	8005926 <_printf_i+0x136>
 8005820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005824:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005828:	e032      	b.n	8005890 <_printf_i+0xa0>
 800582a:	2964      	cmp	r1, #100	; 0x64
 800582c:	d001      	beq.n	8005832 <_printf_i+0x42>
 800582e:	2969      	cmp	r1, #105	; 0x69
 8005830:	d1f6      	bne.n	8005820 <_printf_i+0x30>
 8005832:	6820      	ldr	r0, [r4, #0]
 8005834:	6813      	ldr	r3, [r2, #0]
 8005836:	0605      	lsls	r5, r0, #24
 8005838:	f103 0104 	add.w	r1, r3, #4
 800583c:	d52a      	bpl.n	8005894 <_printf_i+0xa4>
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6011      	str	r1, [r2, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	da03      	bge.n	800584e <_printf_i+0x5e>
 8005846:	222d      	movs	r2, #45	; 0x2d
 8005848:	425b      	negs	r3, r3
 800584a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800584e:	486f      	ldr	r0, [pc, #444]	; (8005a0c <_printf_i+0x21c>)
 8005850:	220a      	movs	r2, #10
 8005852:	e039      	b.n	80058c8 <_printf_i+0xd8>
 8005854:	2973      	cmp	r1, #115	; 0x73
 8005856:	f000 809d 	beq.w	8005994 <_printf_i+0x1a4>
 800585a:	d808      	bhi.n	800586e <_printf_i+0x7e>
 800585c:	296f      	cmp	r1, #111	; 0x6f
 800585e:	d020      	beq.n	80058a2 <_printf_i+0xb2>
 8005860:	2970      	cmp	r1, #112	; 0x70
 8005862:	d1dd      	bne.n	8005820 <_printf_i+0x30>
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	f043 0320 	orr.w	r3, r3, #32
 800586a:	6023      	str	r3, [r4, #0]
 800586c:	e003      	b.n	8005876 <_printf_i+0x86>
 800586e:	2975      	cmp	r1, #117	; 0x75
 8005870:	d017      	beq.n	80058a2 <_printf_i+0xb2>
 8005872:	2978      	cmp	r1, #120	; 0x78
 8005874:	d1d4      	bne.n	8005820 <_printf_i+0x30>
 8005876:	2378      	movs	r3, #120	; 0x78
 8005878:	4865      	ldr	r0, [pc, #404]	; (8005a10 <_printf_i+0x220>)
 800587a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800587e:	e055      	b.n	800592c <_printf_i+0x13c>
 8005880:	6813      	ldr	r3, [r2, #0]
 8005882:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005886:	1d19      	adds	r1, r3, #4
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6011      	str	r1, [r2, #0]
 800588c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005890:	2301      	movs	r3, #1
 8005892:	e08c      	b.n	80059ae <_printf_i+0x1be>
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f010 0f40 	tst.w	r0, #64	; 0x40
 800589a:	6011      	str	r1, [r2, #0]
 800589c:	bf18      	it	ne
 800589e:	b21b      	sxthne	r3, r3
 80058a0:	e7cf      	b.n	8005842 <_printf_i+0x52>
 80058a2:	6813      	ldr	r3, [r2, #0]
 80058a4:	6825      	ldr	r5, [r4, #0]
 80058a6:	1d18      	adds	r0, r3, #4
 80058a8:	6010      	str	r0, [r2, #0]
 80058aa:	0628      	lsls	r0, r5, #24
 80058ac:	d501      	bpl.n	80058b2 <_printf_i+0xc2>
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	e002      	b.n	80058b8 <_printf_i+0xc8>
 80058b2:	0668      	lsls	r0, r5, #25
 80058b4:	d5fb      	bpl.n	80058ae <_printf_i+0xbe>
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	296f      	cmp	r1, #111	; 0x6f
 80058ba:	bf14      	ite	ne
 80058bc:	220a      	movne	r2, #10
 80058be:	2208      	moveq	r2, #8
 80058c0:	4852      	ldr	r0, [pc, #328]	; (8005a0c <_printf_i+0x21c>)
 80058c2:	2100      	movs	r1, #0
 80058c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058c8:	6865      	ldr	r5, [r4, #4]
 80058ca:	2d00      	cmp	r5, #0
 80058cc:	60a5      	str	r5, [r4, #8]
 80058ce:	f2c0 8095 	blt.w	80059fc <_printf_i+0x20c>
 80058d2:	6821      	ldr	r1, [r4, #0]
 80058d4:	f021 0104 	bic.w	r1, r1, #4
 80058d8:	6021      	str	r1, [r4, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d13d      	bne.n	800595a <_printf_i+0x16a>
 80058de:	2d00      	cmp	r5, #0
 80058e0:	f040 808e 	bne.w	8005a00 <_printf_i+0x210>
 80058e4:	4665      	mov	r5, ip
 80058e6:	2a08      	cmp	r2, #8
 80058e8:	d10b      	bne.n	8005902 <_printf_i+0x112>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	07db      	lsls	r3, r3, #31
 80058ee:	d508      	bpl.n	8005902 <_printf_i+0x112>
 80058f0:	6923      	ldr	r3, [r4, #16]
 80058f2:	6862      	ldr	r2, [r4, #4]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	bfde      	ittt	le
 80058f8:	2330      	movle	r3, #48	; 0x30
 80058fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005902:	ebac 0305 	sub.w	r3, ip, r5
 8005906:	6123      	str	r3, [r4, #16]
 8005908:	f8cd 8000 	str.w	r8, [sp]
 800590c:	463b      	mov	r3, r7
 800590e:	aa03      	add	r2, sp, #12
 8005910:	4621      	mov	r1, r4
 8005912:	4630      	mov	r0, r6
 8005914:	f7ff fef6 	bl	8005704 <_printf_common>
 8005918:	3001      	adds	r0, #1
 800591a:	d14d      	bne.n	80059b8 <_printf_i+0x1c8>
 800591c:	f04f 30ff 	mov.w	r0, #4294967295
 8005920:	b005      	add	sp, #20
 8005922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005926:	4839      	ldr	r0, [pc, #228]	; (8005a0c <_printf_i+0x21c>)
 8005928:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800592c:	6813      	ldr	r3, [r2, #0]
 800592e:	6821      	ldr	r1, [r4, #0]
 8005930:	1d1d      	adds	r5, r3, #4
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6015      	str	r5, [r2, #0]
 8005936:	060a      	lsls	r2, r1, #24
 8005938:	d50b      	bpl.n	8005952 <_printf_i+0x162>
 800593a:	07ca      	lsls	r2, r1, #31
 800593c:	bf44      	itt	mi
 800593e:	f041 0120 	orrmi.w	r1, r1, #32
 8005942:	6021      	strmi	r1, [r4, #0]
 8005944:	b91b      	cbnz	r3, 800594e <_printf_i+0x15e>
 8005946:	6822      	ldr	r2, [r4, #0]
 8005948:	f022 0220 	bic.w	r2, r2, #32
 800594c:	6022      	str	r2, [r4, #0]
 800594e:	2210      	movs	r2, #16
 8005950:	e7b7      	b.n	80058c2 <_printf_i+0xd2>
 8005952:	064d      	lsls	r5, r1, #25
 8005954:	bf48      	it	mi
 8005956:	b29b      	uxthmi	r3, r3
 8005958:	e7ef      	b.n	800593a <_printf_i+0x14a>
 800595a:	4665      	mov	r5, ip
 800595c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005960:	fb02 3311 	mls	r3, r2, r1, r3
 8005964:	5cc3      	ldrb	r3, [r0, r3]
 8005966:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800596a:	460b      	mov	r3, r1
 800596c:	2900      	cmp	r1, #0
 800596e:	d1f5      	bne.n	800595c <_printf_i+0x16c>
 8005970:	e7b9      	b.n	80058e6 <_printf_i+0xf6>
 8005972:	6813      	ldr	r3, [r2, #0]
 8005974:	6825      	ldr	r5, [r4, #0]
 8005976:	1d18      	adds	r0, r3, #4
 8005978:	6961      	ldr	r1, [r4, #20]
 800597a:	6010      	str	r0, [r2, #0]
 800597c:	0628      	lsls	r0, r5, #24
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	d501      	bpl.n	8005986 <_printf_i+0x196>
 8005982:	6019      	str	r1, [r3, #0]
 8005984:	e002      	b.n	800598c <_printf_i+0x19c>
 8005986:	066a      	lsls	r2, r5, #25
 8005988:	d5fb      	bpl.n	8005982 <_printf_i+0x192>
 800598a:	8019      	strh	r1, [r3, #0]
 800598c:	2300      	movs	r3, #0
 800598e:	4665      	mov	r5, ip
 8005990:	6123      	str	r3, [r4, #16]
 8005992:	e7b9      	b.n	8005908 <_printf_i+0x118>
 8005994:	6813      	ldr	r3, [r2, #0]
 8005996:	1d19      	adds	r1, r3, #4
 8005998:	6011      	str	r1, [r2, #0]
 800599a:	681d      	ldr	r5, [r3, #0]
 800599c:	6862      	ldr	r2, [r4, #4]
 800599e:	2100      	movs	r1, #0
 80059a0:	4628      	mov	r0, r5
 80059a2:	f000 f8e1 	bl	8005b68 <memchr>
 80059a6:	b108      	cbz	r0, 80059ac <_printf_i+0x1bc>
 80059a8:	1b40      	subs	r0, r0, r5
 80059aa:	6060      	str	r0, [r4, #4]
 80059ac:	6863      	ldr	r3, [r4, #4]
 80059ae:	6123      	str	r3, [r4, #16]
 80059b0:	2300      	movs	r3, #0
 80059b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b6:	e7a7      	b.n	8005908 <_printf_i+0x118>
 80059b8:	6923      	ldr	r3, [r4, #16]
 80059ba:	462a      	mov	r2, r5
 80059bc:	4639      	mov	r1, r7
 80059be:	4630      	mov	r0, r6
 80059c0:	47c0      	blx	r8
 80059c2:	3001      	adds	r0, #1
 80059c4:	d0aa      	beq.n	800591c <_printf_i+0x12c>
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	079b      	lsls	r3, r3, #30
 80059ca:	d413      	bmi.n	80059f4 <_printf_i+0x204>
 80059cc:	68e0      	ldr	r0, [r4, #12]
 80059ce:	9b03      	ldr	r3, [sp, #12]
 80059d0:	4298      	cmp	r0, r3
 80059d2:	bfb8      	it	lt
 80059d4:	4618      	movlt	r0, r3
 80059d6:	e7a3      	b.n	8005920 <_printf_i+0x130>
 80059d8:	2301      	movs	r3, #1
 80059da:	464a      	mov	r2, r9
 80059dc:	4639      	mov	r1, r7
 80059de:	4630      	mov	r0, r6
 80059e0:	47c0      	blx	r8
 80059e2:	3001      	adds	r0, #1
 80059e4:	d09a      	beq.n	800591c <_printf_i+0x12c>
 80059e6:	3501      	adds	r5, #1
 80059e8:	68e3      	ldr	r3, [r4, #12]
 80059ea:	9a03      	ldr	r2, [sp, #12]
 80059ec:	1a9b      	subs	r3, r3, r2
 80059ee:	42ab      	cmp	r3, r5
 80059f0:	dcf2      	bgt.n	80059d8 <_printf_i+0x1e8>
 80059f2:	e7eb      	b.n	80059cc <_printf_i+0x1dc>
 80059f4:	2500      	movs	r5, #0
 80059f6:	f104 0919 	add.w	r9, r4, #25
 80059fa:	e7f5      	b.n	80059e8 <_printf_i+0x1f8>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1ac      	bne.n	800595a <_printf_i+0x16a>
 8005a00:	7803      	ldrb	r3, [r0, #0]
 8005a02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a0a:	e76c      	b.n	80058e6 <_printf_i+0xf6>
 8005a0c:	080060e5 	.word	0x080060e5
 8005a10:	080060f6 	.word	0x080060f6

08005a14 <_sbrk_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	2300      	movs	r3, #0
 8005a18:	4c05      	ldr	r4, [pc, #20]	; (8005a30 <_sbrk_r+0x1c>)
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	4608      	mov	r0, r1
 8005a1e:	6023      	str	r3, [r4, #0]
 8005a20:	f7fb fd50 	bl	80014c4 <_sbrk>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d102      	bne.n	8005a2e <_sbrk_r+0x1a>
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	b103      	cbz	r3, 8005a2e <_sbrk_r+0x1a>
 8005a2c:	602b      	str	r3, [r5, #0]
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}
 8005a30:	20000280 	.word	0x20000280

08005a34 <__sread>:
 8005a34:	b510      	push	{r4, lr}
 8005a36:	460c      	mov	r4, r1
 8005a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a3c:	f000 f8a4 	bl	8005b88 <_read_r>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	bfab      	itete	ge
 8005a44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a46:	89a3      	ldrhlt	r3, [r4, #12]
 8005a48:	181b      	addge	r3, r3, r0
 8005a4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a4e:	bfac      	ite	ge
 8005a50:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a52:	81a3      	strhlt	r3, [r4, #12]
 8005a54:	bd10      	pop	{r4, pc}

08005a56 <__swrite>:
 8005a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5a:	461f      	mov	r7, r3
 8005a5c:	898b      	ldrh	r3, [r1, #12]
 8005a5e:	4605      	mov	r5, r0
 8005a60:	05db      	lsls	r3, r3, #23
 8005a62:	460c      	mov	r4, r1
 8005a64:	4616      	mov	r6, r2
 8005a66:	d505      	bpl.n	8005a74 <__swrite+0x1e>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a70:	f000 f868 	bl	8005b44 <_lseek_r>
 8005a74:	89a3      	ldrh	r3, [r4, #12]
 8005a76:	4632      	mov	r2, r6
 8005a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a7c:	81a3      	strh	r3, [r4, #12]
 8005a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a82:	463b      	mov	r3, r7
 8005a84:	4628      	mov	r0, r5
 8005a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8a:	f000 b817 	b.w	8005abc <_write_r>

08005a8e <__sseek>:
 8005a8e:	b510      	push	{r4, lr}
 8005a90:	460c      	mov	r4, r1
 8005a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a96:	f000 f855 	bl	8005b44 <_lseek_r>
 8005a9a:	1c43      	adds	r3, r0, #1
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	bf15      	itete	ne
 8005aa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005aa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005aa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005aaa:	81a3      	strheq	r3, [r4, #12]
 8005aac:	bf18      	it	ne
 8005aae:	81a3      	strhne	r3, [r4, #12]
 8005ab0:	bd10      	pop	{r4, pc}

08005ab2 <__sclose>:
 8005ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab6:	f000 b813 	b.w	8005ae0 <_close_r>
	...

08005abc <_write_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4605      	mov	r5, r0
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	4c05      	ldr	r4, [pc, #20]	; (8005adc <_write_r+0x20>)
 8005ac8:	6022      	str	r2, [r4, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f7fb fb68 	bl	80011a0 <_write>
 8005ad0:	1c43      	adds	r3, r0, #1
 8005ad2:	d102      	bne.n	8005ada <_write_r+0x1e>
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	b103      	cbz	r3, 8005ada <_write_r+0x1e>
 8005ad8:	602b      	str	r3, [r5, #0]
 8005ada:	bd38      	pop	{r3, r4, r5, pc}
 8005adc:	20000280 	.word	0x20000280

08005ae0 <_close_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	4c05      	ldr	r4, [pc, #20]	; (8005afc <_close_r+0x1c>)
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	4608      	mov	r0, r1
 8005aea:	6023      	str	r3, [r4, #0]
 8005aec:	f7fb fb84 	bl	80011f8 <_close>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_close_r+0x1a>
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_close_r+0x1a>
 8005af8:	602b      	str	r3, [r5, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	20000280 	.word	0x20000280

08005b00 <_fstat_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	2300      	movs	r3, #0
 8005b04:	4c06      	ldr	r4, [pc, #24]	; (8005b20 <_fstat_r+0x20>)
 8005b06:	4605      	mov	r5, r0
 8005b08:	4608      	mov	r0, r1
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	6023      	str	r3, [r4, #0]
 8005b0e:	f7fb fbc3 	bl	8001298 <_fstat>
 8005b12:	1c43      	adds	r3, r0, #1
 8005b14:	d102      	bne.n	8005b1c <_fstat_r+0x1c>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	b103      	cbz	r3, 8005b1c <_fstat_r+0x1c>
 8005b1a:	602b      	str	r3, [r5, #0]
 8005b1c:	bd38      	pop	{r3, r4, r5, pc}
 8005b1e:	bf00      	nop
 8005b20:	20000280 	.word	0x20000280

08005b24 <_isatty_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	2300      	movs	r3, #0
 8005b28:	4c05      	ldr	r4, [pc, #20]	; (8005b40 <_isatty_r+0x1c>)
 8005b2a:	4605      	mov	r5, r0
 8005b2c:	4608      	mov	r0, r1
 8005b2e:	6023      	str	r3, [r4, #0]
 8005b30:	f7fb fb20 	bl	8001174 <_isatty>
 8005b34:	1c43      	adds	r3, r0, #1
 8005b36:	d102      	bne.n	8005b3e <_isatty_r+0x1a>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	b103      	cbz	r3, 8005b3e <_isatty_r+0x1a>
 8005b3c:	602b      	str	r3, [r5, #0]
 8005b3e:	bd38      	pop	{r3, r4, r5, pc}
 8005b40:	20000280 	.word	0x20000280

08005b44 <_lseek_r>:
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	4605      	mov	r5, r0
 8005b48:	4608      	mov	r0, r1
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	4c05      	ldr	r4, [pc, #20]	; (8005b64 <_lseek_r+0x20>)
 8005b50:	6022      	str	r2, [r4, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	f7fb fb67 	bl	8001226 <_lseek>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d102      	bne.n	8005b62 <_lseek_r+0x1e>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	b103      	cbz	r3, 8005b62 <_lseek_r+0x1e>
 8005b60:	602b      	str	r3, [r5, #0]
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	20000280 	.word	0x20000280

08005b68 <memchr>:
 8005b68:	b510      	push	{r4, lr}
 8005b6a:	b2c9      	uxtb	r1, r1
 8005b6c:	4402      	add	r2, r0
 8005b6e:	4290      	cmp	r0, r2
 8005b70:	4603      	mov	r3, r0
 8005b72:	d101      	bne.n	8005b78 <memchr+0x10>
 8005b74:	2300      	movs	r3, #0
 8005b76:	e003      	b.n	8005b80 <memchr+0x18>
 8005b78:	781c      	ldrb	r4, [r3, #0]
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	428c      	cmp	r4, r1
 8005b7e:	d1f6      	bne.n	8005b6e <memchr+0x6>
 8005b80:	4618      	mov	r0, r3
 8005b82:	bd10      	pop	{r4, pc}

08005b84 <__malloc_lock>:
 8005b84:	4770      	bx	lr

08005b86 <__malloc_unlock>:
 8005b86:	4770      	bx	lr

08005b88 <_read_r>:
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	4605      	mov	r5, r0
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	4611      	mov	r1, r2
 8005b90:	2200      	movs	r2, #0
 8005b92:	4c05      	ldr	r4, [pc, #20]	; (8005ba8 <_read_r+0x20>)
 8005b94:	6022      	str	r2, [r4, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	f7fb fb56 	bl	8001248 <_read>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d102      	bne.n	8005ba6 <_read_r+0x1e>
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	b103      	cbz	r3, 8005ba6 <_read_r+0x1e>
 8005ba4:	602b      	str	r3, [r5, #0]
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	20000280 	.word	0x20000280

08005bac <_init>:
 8005bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bae:	bf00      	nop
 8005bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb2:	bc08      	pop	{r3}
 8005bb4:	469e      	mov	lr, r3
 8005bb6:	4770      	bx	lr

08005bb8 <_fini>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	bf00      	nop
 8005bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bbe:	bc08      	pop	{r3}
 8005bc0:	469e      	mov	lr, r3
 8005bc2:	4770      	bx	lr
